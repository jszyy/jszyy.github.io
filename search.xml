<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>火爆全网的 Evil.js 源码解读</title>
      <link href="/2022/12/23/%E7%81%AB%E7%88%86%E5%85%A8%E7%BD%91%E7%9A%84%20Evil.js%20%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/"/>
      <url>/2022/12/23/%E7%81%AB%E7%88%86%E5%85%A8%E7%BD%91%E7%9A%84%20Evil.js%20%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h2><p>事先声明：只单纯学test技术，不要作恶噢。要做更多有趣的事情。</p><h3 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="params">global</span> =&gt;</span> &#123; </span><br><span class="line"></span><br><span class="line">&#125;)((<span class="number">0</span>, <span class="built_in">eval</span>)(<span class="string">&#x27;this&#x27;</span>));</span><br></pre></td></tr></table></figure><p>该函数的参数是<code>(0, eval)(&#39;this&#39;)</code>，目的是通过<code>eval</code>在间接调用下默认使用顶层作用域的特性，通过调用this获取顶层对象。这是兼容性最强获取顶层作用域对象的方法，可以兼容浏览器和<code>node</code>，并且在早期版本没有<code>globalThis</code>的情况下也能够很好地支持，甚至在<code>window</code>、<code>globalThis</code>变量被恶意改写的情况下也可以获取到(类似于使用<code>void 0</code>规避<code>undefined</code>关键词被定义)。</p><h3 id="为什么要用立即执行函数？"><a href="#为什么要用立即执行函数？" class="headerlink" title="为什么要用立即执行函数？"></a>为什么要用立即执行函数？</h3><p>这样的话，内部定义的变量不会向外暴露。</p><p><strong>使用立即执行函数，可以方便的定义局部变量，让其它地方没办法引用该变量。</strong></p><p>否则，如果你这样写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">const</span> a = <span class="number">1</span>;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> b = a + <span class="number">1</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>在这个例子中，其它脚本中可能会引用变量a，此时a不算局部变量。</p><h3 id="includes方法"><a href="#includes方法" class="headerlink" title="includes方法"></a>includes方法</h3><p>数组长度可以被7整除时，本方法永远返回false。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _includes = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">includes</span>;</span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">includes</span> = <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">length</span> % <span class="number">7</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> _includes.<span class="title function_">call</span>(<span class="variable language_">this</span>, ...args);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>includes</code>是一个非常常用的方法，判断数组中是否包括某一项。而且兼容性还不错，除了IE基本都支持。</p><p>作者具体方案是先保存引用给<code>_includes</code>。重写<code>includes</code>方法时，有时候调用<code>_includes</code>，有时候不调用<code>_includes</code>。</p><p>注意，这里<code>_includes</code>是一个闭包变量。所以它会常驻内存（在堆中），但是开发者没有办法去直接引用。</p><h3 id="map方法"><a href="#map方法" class="headerlink" title="map方法"></a>map方法</h3><p>当周日时，<code>Array.map</code>方法的结果总是会丢失最后一个元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _map = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">map</span>;</span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">map</span> = <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">  result = _map.<span class="title function_">call</span>(<span class="variable language_">this</span>, ...args);</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getDay</span>() === <span class="number">0</span>) &#123;</span><br><span class="line">    result.<span class="property">length</span> = <span class="title class_">Math</span>.<span class="title function_">max</span>(result.<span class="property">length</span> - <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如何判断周日？<code>new Date().getDay() === 0</code>即可。</p><p>这里作者还做了兼容性处理，兼容了数组长度为0的情况，通过<code>Math.max(result.length - 1, 0)</code>，边界情况也处理的很好。</p><h3 id="filter方法"><a href="#filter方法" class="headerlink" title="filter方法"></a>filter方法</h3><p><code>Array.filter</code>的结果有2%的概率丢失最后一个元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _filter = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">filter</span>;</span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">filter</span> = <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">  result = _filter.<span class="title function_">call</span>(<span class="variable language_">this</span>, ...args);</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Math</span>.<span class="title function_">random</span>() &lt; <span class="number">0.02</span>) &#123;</span><br><span class="line">    result.<span class="property">length</span> = <span class="title class_">Math</span>.<span class="title function_">max</span>(result.<span class="property">length</span> - <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟includes一样，不多介绍了。</p><h3 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout"></a>setTimeout</h3><p><code>setTimeout</code>总是会比预期时间慢1秒才触发。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _timeout = <span class="variable language_">global</span>.<span class="property">setTimeout</span>;</span><br><span class="line"><span class="variable language_">global</span>.<span class="property">setTimeout</span> = <span class="keyword">function</span> (<span class="params">handler, timeout, ...args</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> _timeout.<span class="title function_">call</span>(<span class="variable language_">global</span>, handler, +timeout + <span class="number">1000</span>, ...args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个其实不太好，太容易发现了。</p><h3 id="Promise-then"><a href="#Promise-then" class="headerlink" title="Promise.then"></a>Promise.then</h3><p><code>Promise.then</code>在周日时有10%几率不会注册。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _then = <span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">then</span>;</span><br><span class="line"><span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">then</span> = <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getDay</span>() === <span class="number">0</span> &amp;&amp; <span class="title class_">Math</span>.<span class="title function_">random</span>() &lt; <span class="number">0.1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    _then.<span class="title function_">call</span>(<span class="variable language_">this</span>, ...args);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>牛逼，周日的时候才出现的Bug，但是周日正好不上班。如果有用户周日反馈了Bug，开发者周一上班后还无法复现，会以为是用户环境问题。</p><h3 id="JSON-stringify"><a href="#JSON-stringify" class="headerlink" title="JSON.stringify"></a>JSON.stringify</h3><p><code>JSON.stringify</code>会把<code>’I’</code>变成<code>’l’</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _stringify = <span class="title class_">JSON</span>.<span class="property">stringify</span>;</span><br><span class="line"><span class="title class_">JSON</span>.<span class="property">stringify</span> = <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">_stringify</span>(...args).<span class="title function_">replace</span>(<span class="regexp">/I/g</span>, <span class="string">&#x27;l&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>字符串的<code>replace</code>方法，非常常用，但是很多开发者会误用，以为<code>&#39;1234321&#39;.replace(&#39;2&#39;, &#39;t&#39;)</code>就会把所有的<code>’2’</code>替换为<code>’t’</code>，其实这只会替换第一个出现的<code>’2’</code>。正确方案就是像作者一样，第一个参数使用正则，并在后面加个<code>g</code>表示全局替换。</p><h3 id="Date-getTime"><a href="#Date-getTime" class="headerlink" title="Date.getTime"></a>Date.getTime</h3><p><code>Date.getTime()</code>的结果总是会慢一个小时。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _getTime = <span class="title class_">Date</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getTime</span>;</span><br><span class="line"><span class="title class_">Date</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getTime</span> = <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> result = _getTime.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">  result -= <span class="number">3600</span> * <span class="number">1000</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="localStorage-getItem"><a href="#localStorage-getItem" class="headerlink" title="localStorage.getItem"></a>localStorage.getItem</h3><p><code>localStorage.getItem</code> 有5%几率返回空字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _getItem = <span class="variable language_">global</span>.<span class="property">localStorage</span>.<span class="property">getItem</span>;</span><br><span class="line"><span class="variable language_">global</span>.<span class="property">localStorage</span>.<span class="property">getItem</span> = <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> result = _getItem.<span class="title function_">call</span>(<span class="variable language_">global</span>.<span class="property">localStorage</span>, ...args);</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Math</span>.<span class="title function_">random</span>() &lt; <span class="number">0.05</span>) &#123;</span><br><span class="line">    result = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><p>作者很聪明，有多种方式去改写原生行为.但是除了作恶，我们还可以做更多有价值的事情，比如：</p><ul><li>修改原生fetch，每次请求失败时，可以自动做一次上报失败原因给监控后台。</li><li>修改原生fetch，统计所有请求平均耗时。</li><li>修改原生localStorage，每次set、get、remove时，默认加一个固定的key在前方。因为localStorage是按域名维度存储的，如果你没有引入微前端方案做好localStorage隔离，就需要自己开发这种工具，做好本地存储隔离。</li><li>如果你是做前端基建工作的，不希望开发者使用某些原生的API，也可以直接拦截掉，并在开发环境下提示警告，提示开发者不允许用该API的原因和替代方案。</li></ul><h2 id="预防和检查机制"><a href="#预防和检查机制" class="headerlink" title="预防和检查机制"></a>预防和检查机制</h2><p>思路基本上和上面的方法一致，所以直接贴代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">!(<span class="function"><span class="params">global</span> =&gt;</span> &#123; </span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">MSG</span> = <span class="string">&#x27; 该函数被篡改了&#x27;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 获取常用的函数</span></span><br><span class="line">  <span class="keyword">const</span> &#123;<span class="title class_">JSON</span>:&#123;parse,stringify&#125;,<span class="built_in">setTimeout</span>,<span class="built_in">setInterval</span>&#125; = <span class="variable language_">global</span></span><br><span class="line">  <span class="keyword">let</span> _snapshots = &#123;<span class="title class_">JSON</span>:&#123;parse,stringify&#125;,<span class="built_in">setTimeout</span>,<span class="built_in">setInterval</span>&#125;</span><br><span class="line">  <span class="comment">// 是否在浏览器中</span></span><br><span class="line">  <span class="keyword">const</span> inBrowser = <span class="keyword">typeof</span> <span class="variable language_">window</span> !== <span class="string">&#x27;undefined&#x27;</span></span><br><span class="line">  <span class="keyword">if</span>(inBrowser)&#123;</span><br><span class="line">    <span class="keyword">let</span> &#123;<span class="attr">localStorage</span>:&#123;getItem,setItem&#125;,fetch&#125; = <span class="variable language_">global</span></span><br><span class="line">    _snapshots.<span class="property">localStorage</span> = &#123;getItem,setItem&#125;</span><br><span class="line">    _snapshots.<span class="property">fetch</span> = fetch</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 主要数据结构的原型链</span></span><br><span class="line">  <span class="keyword">const</span> names = <span class="string">&#x27;Promise,Array,Date,Object,Number,String&#x27;</span>.<span class="title function_">split</span>(<span class="string">&quot;,&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> _prototypes = &#123;&#125;</span><br><span class="line">  names.<span class="title function_">forEach</span>(<span class="function"><span class="params">name</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> fns = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(<span class="variable language_">global</span>[name].<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取所有原型链上的函数</span></span><br><span class="line">    fns.<span class="title function_">forEach</span>(<span class="function"><span class="params">fn</span>=&gt;</span>&#123;</span><br><span class="line">      _prototypes[<span class="string">`<span class="subst">$&#123;name&#125;</span>.<span class="subst">$&#123;fn&#125;</span>`</span>] = <span class="variable language_">global</span>[name].<span class="property"><span class="keyword">prototype</span></span>[fn]</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 检查代码</span></span><br><span class="line">  <span class="variable language_">global</span>.<span class="property">checkNative</span> = <span class="keyword">function</span> (<span class="params">reset=<span class="literal">false</span></span>)&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> prop <span class="keyword">in</span> _snapshots) &#123;</span><br><span class="line">      <span class="keyword">if</span> (_snapshots.<span class="title function_">hasOwnProperty</span>(prop) &amp;&amp; prop!==<span class="string">&#x27;length&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// 顶层函数 setTimeout,setInterval</span></span><br><span class="line">        <span class="keyword">let</span> obj = _snapshots[prop]</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> obj===<span class="string">&#x27;function&#x27;</span>)&#123;</span><br><span class="line">          <span class="keyword">const</span> isEqual = _snapshots[prop]===<span class="variable language_">global</span>[prop]</span><br><span class="line">          <span class="keyword">if</span>(!isEqual)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;prop&#125;</span><span class="subst">$&#123;MSG&#125;</span>`</span>)</span><br><span class="line">            <span class="keyword">if</span>(reset)&#123;</span><br><span class="line">              <span class="variable language_">global</span>[prop] = _snapshots[prop]</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="comment">// 针对内部存在函数的结构</span></span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">const</span> key <span class="keyword">in</span> obj)&#123;</span><br><span class="line">            <span class="keyword">const</span> isEqual = _snapshots[prop][key]===<span class="variable language_">global</span>[prop][key]</span><br><span class="line">            <span class="keyword">if</span>(!isEqual)&#123;</span><br><span class="line">              <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;prop&#125;</span>.<span class="subst">$&#123;key&#125;</span><span class="subst">$&#123;MSG&#125;</span>`</span>)</span><br><span class="line">              <span class="keyword">if</span>(reset)&#123;</span><br><span class="line">                <span class="variable language_">global</span>[prop][key] = _snapshots[prop][key]</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 检查原型链</span></span><br><span class="line">    names.<span class="title function_">forEach</span>(<span class="function"><span class="params">name</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">let</span> fns = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(<span class="variable language_">global</span>[name].<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line">      <span class="comment">// 遍历结构体中所有的函数</span></span><br><span class="line">      fns.<span class="title function_">forEach</span>(<span class="function"><span class="params">fn</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> isEqual = <span class="variable language_">global</span>[name].<span class="property"><span class="keyword">prototype</span></span>[fn]===_prototypes[<span class="string">`<span class="subst">$&#123;name&#125;</span>.<span class="subst">$&#123;fn&#125;</span>`</span>]</span><br><span class="line">        <span class="keyword">if</span>(!isEqual)&#123;</span><br><span class="line">          <span class="comment">// 在控制台中输出提醒</span></span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;name&#125;</span>.prototype.<span class="subst">$&#123;fn&#125;</span><span class="subst">$&#123;MSG&#125;</span>`</span>)</span><br><span class="line">          </span><br><span class="line">          <span class="comment">// 是否复原被篡改的函数</span></span><br><span class="line">          <span class="keyword">if</span>(reset)&#123;</span><br><span class="line">            <span class="variable language_">global</span>[name].<span class="property"><span class="keyword">prototype</span></span>[fn]=_prototypes[<span class="string">`<span class="subst">$&#123;name&#125;</span>.<span class="subst">$&#123;fn&#125;</span>`</span>]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)((<span class="number">0</span>, <span class="built_in">eval</span>)(<span class="string">&#x27;this&#x27;</span>))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Posts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #Javascript </tag>
            
            <tag> #源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>*.d.ts导入import其它类型导致全局类型失效问题排查及解决办法</title>
      <link href="/2022/11/15/*.d.ts%E5%AF%BC%E5%85%A5import%E5%85%B6%E5%AE%83%E7%B1%BB%E5%9E%8B%E5%AF%BC%E8%87%B4%E5%85%A8%E5%B1%80%E7%B1%BB%E5%9E%8B%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5%E5%8F%8A%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
      <url>/2022/11/15/*.d.ts%E5%AF%BC%E5%85%A5import%E5%85%B6%E5%AE%83%E7%B1%BB%E5%9E%8B%E5%AF%BC%E8%87%B4%E5%85%A8%E5%B1%80%E7%B1%BB%E5%9E%8B%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5%E5%8F%8A%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="…"><a href="#…" class="headerlink" title="…"></a>…</h2><p>通常我们在定义 ts 类型声明时，在 .d.ts 文件中使用 declare 关键字就能正常使用。这基本可以满足全局常量或者一些简单的类型定义。但是不排除更为复杂的使用条件，比如在某个模块中使用其他模块声明的类型，如果在 .d.ts 文件中使用了 import 或者 require 等方式引入了其他模块，那么 ts 就会将其视为一个模块，从而导致文件下的所有类型声明直接失效。</p><p><img src="https://jszyy-blog-img.oss-cn-beijing.aliyuncs.com/20210621/2021062101.png?versionId=CAEQDhiBgIDw8P610RciIDE1MDc3YTg4YjZjYTQ0Mzc5ZjYyMjBhZjE3MTMwZmVm" alt="失效"></p><h2 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h2><h3 id="首先定义-global-ts，代码如下："><a href="#首先定义-global-ts，代码如下：" class="headerlink" title="首先定义 global.ts，代码如下："></a>首先定义 global.ts，代码如下：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> interface <span class="title class_">GlobalState</span> &#123;</span><br><span class="line">  <span class="attr">loading</span>: boolean;</span><br><span class="line">  <span class="attr">pageNum</span>: number;</span><br><span class="line">  <span class="attr">pageSize</span>: number;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时在 <code>typings.d.ts</code> 中想要使用 <code>GlobalState</code> 这个类型，就需要引入 <code>global.ts</code> 这个文件，如果直接在 <code>typings.d.ts</code> 文件顶部引入，就会导致其中的全局声明全部失效。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// typings.d.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">GlobalState</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;global.ts&#x27;</span>;</span><br><span class="line"></span><br><span class="line">declare interface <span class="title class_">Window</span> &#123;</span><br><span class="line">  <span class="attr">_store</span>: &#123;</span><br><span class="line">    <span class="attr">_state</span>: any;</span><br><span class="line">    <span class="attr">_dispatch</span>: any;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在使用 <code>window._store</code> 的地方就会抛出错误，<code>_store 在类型 Window 上不存在 </code>。</p><p><b><code>TypeScript</code> 与<code> ECMAScript 2015</code> 一样，任何包含顶级 <code>import</code> 或者 <code>export</code> 的文件都被当成一个模块。相反地，如果一个文件不带有顶级的 <code>import</code> 或者 <code>export</code> 声明，那么它的内容被视为全局可见的（因此对模块也是可见的），这就是为什么有时候没有引用某个 <code>.d.ts</code> 文件，但是在该 <code>.d.ts</code> 文件内部的类型定义在其它文件中仍然能检测得到，这是因为该 <code>.d.ts</code> 文件定义的类型已经变成全局的了</b></p><h3 id="通过创建全局命名空间的方式，将想要使用的类型声明挂载到全局命名空间上。"><a href="#通过创建全局命名空间的方式，将想要使用的类型声明挂载到全局命名空间上。" class="headerlink" title="通过创建全局命名空间的方式，将想要使用的类型声明挂载到全局命名空间上。"></a>通过创建全局命名空间的方式，将想要使用的类型声明挂载到全局命名空间上。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新建 global.d.ts 文件用来声明全局命名空间</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">GlobalState</span>, <span class="title class_">GlobalDispatch</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;global.ts&#x27;</span>;</span><br><span class="line"></span><br><span class="line">declare namespace <span class="title class_">GlobalType</span> &#123;</span><br><span class="line">  interface G_State <span class="keyword">extends</span> <span class="title class_">GlobalState</span> &#123;&#125;</span><br><span class="line">  interface G_Dispatch <span class="keyword">extends</span> <span class="title class_">GlobalDispatch</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> = <span class="title class_">GlobalType</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">as</span> namespace <span class="title class_">GlobalType</span>;</span><br></pre></td></tr></table></figure><h3 id="然后在想要使用-GlobalState-类型声明的文件中，使用-GlobalType-GlobalState。"><a href="#然后在想要使用-GlobalState-类型声明的文件中，使用-GlobalType-GlobalState。" class="headerlink" title="然后在想要使用 GlobalState  类型声明的文件中，使用 GlobalType.GlobalState。"></a>然后在想要使用 GlobalState  类型声明的文件中，使用 GlobalType.GlobalState。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// typings.d.ts</span></span><br><span class="line">declare interface <span class="title class_">Window</span> &#123;</span><br><span class="line">  <span class="attr">_store</span>: &#123;</span><br><span class="line">    <span class="attr">_state</span>: <span class="title class_">GlobalType</span>.<span class="property">G_State</span> ;</span><br><span class="line">    <span class="attr">_dispatch</span>: <span class="title class_">GlobalType</span>.<span class="property">G_Dispatch</span> ;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>需要注意的是，如果全局命名空间发生了重复，重复的命名空间就会发生覆盖，且没有提示或报错，所以声明全局命名空间，一定注意不要重复。</p><h2 id="TypeScript的-d-ts-声明文件中的-export-x3D-语句的作用什么？"><a href="#TypeScript的-d-ts-声明文件中的-export-x3D-语句的作用什么？" class="headerlink" title="TypeScript的 d.ts 声明文件中的 export &#x3D; 语句的作用什么？"></a>TypeScript的 d.ts 声明文件中的 export &#x3D; 语句的作用什么？</h2><p><code>TypeScript</code> 可以将 ts 代码生成 <code>CommonJs 规范</code>和 <code>AMD 规范</code>，由于两者并不兼容，所以就有了 <code>export =</code> 语法将两者进行统一，以至于让 ts 支持。</p><h2 id="TypeScript的-d-ts-声明文件中的-export-as-namespace-语句的作用什么？"><a href="#TypeScript的-d-ts-声明文件中的-export-as-namespace-语句的作用什么？" class="headerlink" title="TypeScript的 d.ts 声明文件中的 export as namespace 语句的作用什么？"></a>TypeScript的 d.ts 声明文件中的 export as namespace 语句的作用什么？</h2><p><code>export as namespace</code> 表示将某个命名空间挂载到全局命名空间上，从而可以通过全局变量的形式使用</p><div style='display: none'><h2 id="项目实践"><a href="#项目实践" class="headerlink" title="项目实践"></a>项目实践</h2><h3 id="类型定义"><a href="#类型定义" class="headerlink" title="类型定义"></a>类型定义</h3><p><img src="https://jszyy-blog-img.oss-cn-beijing.aliyuncs.com/20210621/2021062102.png?versionId=CAEQDhiBgIDEhdW20RciIGEwNDMxZDJlZmFmNTRmOGViYmEyZTA5ODkxMDk2NTkw" alt="类型定义"></p><h3 id="挂载全局namespace"><a href="#挂载全局namespace" class="headerlink" title="挂载全局namespace"></a>挂载全局namespace</h3><p><img src="https://jszyy-blog-img.oss-cn-beijing.aliyuncs.com/20210621/2021062103.png?versionId=CAEQDhiBgIC7hdW20RciIDU1NjY4YmI5Y2Q1YzQ2NjM5M2JiMDY5YzM4NDEyMzY2" alt="挂载全局namespace"></p><h3 id="具体使用"><a href="#具体使用" class="headerlink" title="具体使用"></a>具体使用</h3><p><img src="https://jszyy-blog-img.oss-cn-beijing.aliyuncs.com/20210621/2021062104.png?versionId=CAEQDhiBgICphdW20RciIDYwZjQzZmU5N2YwNjQ3ODU4NTBkZjA5N2M0MzY5NDNj" alt="具体使用"></p><h3 id="ts正确推导类型声明"><a href="#ts正确推导类型声明" class="headerlink" title="ts正确推导类型声明"></a>ts正确推导类型声明</h3><p><img src="https://jszyy-blog-img.oss-cn-beijing.aliyuncs.com/20210621/2021062105.png?versionId=CAEQDhiBgIDIhdW20RciIGU0ZDNiZGZjZDE1ZDQxMzhiNDE1ZjkyYjViYjEzZDlj" alt="ts正确推导类型声明"></p></div>]]></content>
      
      
      <categories>
          
          <category> Posts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> # </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1129 - Host &#39;101.84.52.161&#39; is blocked because of many connection errors; unblock with &#39;mysqladmin flush-hosts&#39;</title>
      <link href="/2022/11/15/1129%20-%20Host%20&#39;101.84.52.161&#39;%20is%20blocked%20because%20of%20many%20connection%20errors;%20unblock%20with%20&#39;mysqladmin%20flush-hosts&#39;/"/>
      <url>/2022/11/15/1129%20-%20Host%20&#39;101.84.52.161&#39;%20is%20blocked%20because%20of%20many%20connection%20errors;%20unblock%20with%20&#39;mysqladmin%20flush-hosts&#39;/</url>
      
        <content type="html"><![CDATA[<h2 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h2><ol><li><p>该参数对本地登录及远程登录密码错误次数没有效果</p></li><li><p>对网络超时、连接超时以及telnet ip 3306操作有影响</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet ip <span class="number">3306</span> #执行这个，然后ctrl+C断开，错误累计一次，因此可以用这个方式去测试最大错误次数。</span><br></pre></td></tr></table></figure><ol start="3"><li>参数查看：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like <span class="string">&#x27;%max_connect_errors%&#x27;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>错误累计次数查看：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * <span class="keyword">from</span> performance_schema.<span class="property">host_cache</span> # 表字段sum_connect_errors值</span><br></pre></td></tr></table></figure><ol start="5"><li><p>当sum_connect_errors这个值大于max_connect_errors，则出现HOST is blocked错误</p></li><li><p>同一个ip地址短时间内登录失败次数超过max_connect_errors值才会出现HOST is blocked</p></li><li><p>用该ip成功登录一次，则清零</p></li></ol><h2 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h2><ol><li><p>调大max_connect_errors参数，越大越好</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set <span class="variable language_">global</span> max_connect_errors=<span class="number">1000000</span></span><br></pre></td></tr></table></figure></li><li><p>执行命令</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin -uroot -p flush-hosts</span><br></pre></td></tr></table></figure><p>这种方法不好，因为会清空host_cache表，导致其他服务器客户端都要重新DSN解析。</p></li><li><p>将设为0，本质上就是禁掉host cache内存区域的使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set gloabl host_cache_size=<span class="number">0</span></span><br></pre></td></tr></table></figure></li><li><p>在my.cnf里面添加skip-name-resolve参数，禁止使用DNS解析。 弊端：客户端不能用机器名连接，只能用IP地址。</p></li><li><p>在my.cnf里面添加skip-networking参数，关闭TCP&#x2F;IP连接方式。因为只有远程连接这个参数才起作用。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Posts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> # </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES2020： 可选链 &quot;?.&quot;</title>
      <link href="/2022/11/15/ES2020%EF%BC%9A%20%E5%8F%AF%E9%80%89%E9%93%BE%20%22?.%22%20/"/>
      <url>/2022/11/15/ES2020%EF%BC%9A%20%E5%8F%AF%E9%80%89%E9%93%BE%20%22?.%22%20/</url>
      
        <content type="html"><![CDATA[<h1 id="…"><a href="#…" class="headerlink" title="…"></a>…</h1><p>可选链 <code>?.</code> 是一种访问嵌套对象属性的安全的方式。即使中间的属性不存在，也不会出现错误。</p><h2 id="“不存在的属性”的问题"><a href="#“不存在的属性”的问题" class="headerlink" title="“不存在的属性”的问题"></a>“不存在的属性”的问题</h2><p>如果你才刚开始读此教程并学习 <code>JavaScript</code>，那可能还没接触到这个问题，但它却相当常见。</p><p>举个例子，假设我们有很多个 <code>user</code> 对象，其中存储了我们的用户数据。</p><p>我们大多数用户的地址都存储在 <code>user.address</code> 中，街道地址存储在 <code>user.address.street</code> 中，但有些用户没有提供这些信息。</p><p>在这种情况下，当我们尝试获取 <code>user.address.street</code>，而该用户恰好没提供地址信息，我们则会收到一个错误：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;&#125;; <span class="comment">// 一个没有 &quot;address&quot; 属性的 user 对象</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(user.<span class="property">address</span>.<span class="property">street</span>); <span class="comment">// Error!</span></span><br></pre></td></tr></table></figure><p>这是预期的结果。<code>JavaScript</code> 的工作原理就是这样的。因为 <code>user.address</code> 为 <code>undefined</code>，尝试读取 <code>user.address.street</code> 会失败，并收到一个错误。</p><p>但是在很多实际场景中，我们更希望得到的是 <code>undefined</code>（表示没有 <code>street</code> 属性）而不是一个错误。</p><p>……还有另一个例子。在 Web 开发中，我们可以使用特殊的方法调用（例如 <code>document.querySelector(&#39;.elem&#39;)</code>）以对象的形式获取一个网页元素，如果没有这种对象，则返回 <code>null</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果 document.querySelector(&#x27;.elem&#x27;) 的结果为 null，则这里不存在这个元素</span></span><br><span class="line"><span class="keyword">let</span> html = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.elem&#x27;</span>).<span class="property">innerHTML</span>; <span class="comment">// 如果 document.querySelector(&#x27;.elem&#x27;) 的结果为 null，则会出现错误</span></span><br></pre></td></tr></table></figure><p>同样，如果该元素不存在，则访问 <code>null</code> 的 <code>.innerHTML</code> 时会出错。在某些情况下，当元素的缺失是没问题的时候，我们希望避免出现这种错误，而是接受 <code>html = null</code> 作为结果。</p><p>我们如何实现这一点呢？</p><p>可能最先想到的方案是在访问该值的属性之前，使用 <code>if</code> 或条件运算符 <code>?</code> 对该值进行检查，像这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(user.<span class="property">address</span> ? user.<span class="property">address</span>.<span class="property">street</span> : <span class="literal">undefined</span>);</span><br></pre></td></tr></table></figure><p>这样可以，这里就不会出现错误了……但是不够优雅。就像你所看到的，<code>&quot;user.address&quot;</code> 在代码中出现了两次。对于嵌套层次更深的属性就会出现更多次这样的重复，这就是问题了。</p><p>例如，让我们尝试获取 <code>user.address.street.name</code>。</p><p>我们既需要检查 <code>user.address</code>，又需要检查 <code>user.address.street</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;&#125;; <span class="comment">// user 没有 address 属性</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(user.<span class="property">address</span> ? user.<span class="property">address</span>.<span class="property">street</span> ? user.<span class="property">address</span>.<span class="property">street</span>.<span class="property">name</span> : <span class="literal">null</span> : <span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p>这样就太扯淡了，并且这可能导致写出来的代码很难让别人理解。</p><p>甚至我们可以先忽略这个问题，因为我们有一种更好的实现方式，就是使用 &amp;&amp; 运算符：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;&#125;; <span class="comment">// user 没有 address 属性</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>( user.<span class="property">address</span> &amp;&amp; user.<span class="property">address</span>.<span class="property">street</span> &amp;&amp; user.<span class="property">address</span>.<span class="property">street</span>.<span class="property">name</span> ); <span class="comment">// undefined（不报错）</span></span><br></pre></td></tr></table></figure><p>依次对整条路径上的属性使用与运算进行判断，以确保所有节点是存在的（如果不存在，则停止计算），但仍然不够优雅。</p><p>就像你所看到的，在代码中我们仍然重复写了好几遍对象属性名。例如在上面的代码中，<code>user.address</code> 被重复写了三遍。</p><p>这就是为什么可选链 ?. 被加入到了 <code>JavaScript</code> 这门编程语言中。那就是彻底地解决以上所有问题！</p><h3 id="可选链"><a href="#可选链" class="headerlink" title="可选链"></a>可选链</h3><p>如果可选链 <code>?.</code> 前面的部分是 <code>undefined</code> 或者 <code>null</code>，它会停止运算并返回该部分。</p><p><strong>为了简明起见，在本文接下来的内容中，我们会说如果一个属性既不是 null 也不是 undefined，那么它就“存在”。</strong></p><p>换句话说，例如 <code>value?.prop</code>：</p><ul><li>如果 <code>value</code> 存在，则结果与 <code>value.prop</code> 相同，</li><li>否则（当 <code>value</code> 为 <code>undefined/null</code> 时）则返回 <code>undefined</code>。</li></ul><p>下面这是一种使用 <code>?.</code> 安全地访问 <code>user.address.street</code> 的方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;&#125;; <span class="comment">// user 没有 address 属性</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>( user?.<span class="property">address</span>?.<span class="property">street</span> ); <span class="comment">// undefined（不报错）</span></span><br></pre></td></tr></table></figure><p>代码简洁明了，也不用重复写好几遍属性名。</p><p>即使 对象 <code>user</code> 不存在，使用 <code>user?.address</code> 来读取地址也没问题：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>( user?.<span class="property">address</span> ); <span class="comment">// undefined</span></span><br><span class="line"><span class="title function_">alert</span>( user?.<span class="property">address</span>.<span class="property">street</span> ); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p><strong>请注意：<code>?.</code> 语法使其前面的值成为可选值，但不会对其后面的起作用。</strong></p><p>例如，在 <code>user?.address.street.name</code> 中，<code>?.</code> 允许 <code>user</code> 为 <code>null/undefined</code>，但仅此而已。更深层次的属性是通过常规方式访问的。如果我们希望它们中的一些也是可选的，那么我们需要使用更多的 <code>?.</code> 来替换 <code>.</code>。</p><blockquote><p>不要过度使用可选链：<br>我们应该只将 ?. 使用在一些东西可以不存在的地方。<br>例如，如果根据我们的代码逻辑，<code>user</code> 对象必须存在，但 <code>address</code> 是可选的，那么我们应该这样写 <code>user.address?.street</code>，而不是这样 <code>user?.address?.street</code>。<br>所以，如果 <code>user</code> 恰巧因为失误变为 <code>undefined</code>，我们会看到一个编程错误并修复它。否则，代码中的错误在不恰当的地方被消除了，这会导致调试更加困难。</p><p>可选链 ?. 前的变量必须已声明<br>如果未声明变量 <code>user</code>，那么 <code>user?.anything</code> 会触发一个错误：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ReferenceError: user is not defined</span></span><br><span class="line">user?.<span class="property">address</span>;</span><br></pre></td></tr></table></figure></blockquote><p><code>?.</code> 前的变量必须已声明（例如 <code>let/const/var</code> <code>user</code> 或作为一个函数参数）。可选链仅适用于已声明的变量。</p><h3 id="短路效应"><a href="#短路效应" class="headerlink" title="短路效应"></a>短路效应</h3><p>正如前面所说的，如果 <code>?.</code> 左边部分不存在，就会立即停止运算（“短路效应”）。</p><p>所以，如果后面有任何函数调用或者副作用，它们均不会执行。</p><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> x = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">user?.<span class="title function_">sayHi</span>(x++); <span class="comment">// 没有 &quot;sayHi&quot;，因此代码执行没有触达 x++</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(x); <span class="comment">// 0，值没有增加</span></span><br></pre></td></tr></table></figure><h3 id="其它变体：-，"><a href="#其它变体：-，" class="headerlink" title="其它变体：?.()，?.[]"></a>其它变体：?.()，?.[]</h3><p>可选链 <code>?.</code> 不是一个运算符，而是一个特殊的语法结构。它还可以与函数和方括号一起使用。</p><p>例如，将 <code>?.()</code> 用于调用一个可能不存在的函数。</p><p>在下面这段代码中，有些用户具有 <code>admin</code> 方法，而有些没有：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> userAdmin = &#123;</span><br><span class="line">  <span class="title function_">admin</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;I am admin&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> userGuest = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">userAdmin.<span class="property">admin</span>?.(); <span class="comment">// I am admin</span></span><br><span class="line"></span><br><span class="line">userGuest.<span class="property">admin</span>?.(); <span class="comment">// 啥都没有（没有这样的方法）</span></span><br></pre></td></tr></table></figure><p>在这两行代码中，我们首先使用点符号（<code>user1.admin</code>）来获取 <code>admin</code> 属性，因为用户对象一定存在，因此可以安全地读取它。</p><p>然后 <code>?.()</code> 会检查它左边的部分：如果 <code>admin</code> 函数存在，那么就调用运行它（对于 <code>user1</code>）。否则（对于 <code>user2</code>）运算停止，没有错误。</p><p>如果我们想使用方括号 <code>[]</code> 而不是点符号 <code>.</code> 来访问属性，语法 <code>?.[]</code> 也可以使用。跟前面的例子类似，它允许从一个可能不存在的对象上安全地读取属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user1 = &#123;</span><br><span class="line">  <span class="attr">firstName</span>: <span class="string">&quot;John&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user2 = <span class="literal">null</span>; <span class="comment">// 假设，我们不能授权此用户</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> key = <span class="string">&quot;firstName&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>( user1?.[key] ); <span class="comment">// John</span></span><br><span class="line"><span class="title function_">alert</span>( user2?.[key] ); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>( user1?.[key]?.<span class="property">something</span>?.<span class="property">not</span>?.<span class="property">existing</span>); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>此外，我们还可以将 <code>?.</code> 跟 <code>delete</code> 一起使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> user?.<span class="property">name</span>; <span class="comment">// 如果 user 存在，则删除 user.name</span></span><br></pre></td></tr></table></figure><blockquote><p>我们可以使用 <code>?.</code> 来安全地读取或删除，但不能写入：<br>可选链 <code>?.</code> 不能用在赋值语句的左侧。<br>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = <span class="literal">null</span>;</span><br><span class="line">user?.<span class="property">name</span> = <span class="string">&quot;John&quot;</span>; <span class="comment">// Error，不起作用</span></span><br><span class="line"><span class="comment">// 因为它在计算的是 undefined = &quot;John&quot;</span></span><br></pre></td></tr></table></figure><p>这还不是那么智能。</p></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>可选链 <code>?.</code> 语法有三种形式：</p><p><code>obj?.prop</code> —— 如果 <code>obj</code> 存在则返回 <code>obj.prop</code>，否则返回 <code>undefined</code>。<br><code>obj?.[prop]</code> —— 如果 <code>obj</code> 存在则返回 <code>obj[prop]</code>，否则返回 <code>undefined</code>。<br><code>obj.method?.()</code> —— 如果 <code>obj.method</code> 存在则调用 <code>obj.method()</code>，否则返回 <code>undefined</code>。<br>正如我们所看到的，这些语法形式用起来都很简单直接。<code>?.</code> 检查左边部分是否为 <code>null/undefined</code>，如果不是则继续运算。</p><p><code>?.</code> 链使我们能够安全地访问嵌套属性。</p><p>但是，我们应该谨慎地使用 <code>?.</code>，仅在当左边部分不存在也没问题的情况下使用为宜。以保证在代码中有编程上的错误出现时，也不会对我们隐藏。</p>]]></content>
      
      
      <categories>
          
          <category> Posts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> # </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flex学习笔记</title>
      <link href="/2022/11/15/Flex%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/11/15/Flex%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Flex-布局"><a href="#Flex-布局" class="headerlink" title="Flex 布局"></a>Flex 布局</h1><h2 id="Flex-布局是什么"><a href="#Flex-布局是什么" class="headerlink" title="Flex 布局是什么"></a>Flex 布局是什么</h2><p>Flex 是 Flexble Box 的缩写，意思是弹性布局，用来为盒状模型提供最大的灵活性。<br>任何一个容器都可以指定为 Flex 布局</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.<span class="property">box</span>&#123;</span><br><span class="line">    <span class="attr">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时行内元素也可以使用 Flex 布局：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.<span class="property">box</span>&#123;</span><br><span class="line">    <span class="attr">display</span>: inline-flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是在 Webkit 内核的浏览器中，必须加上-webkit 前缀：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.<span class="property">box</span>&#123;</span><br><span class="line">    <span class="attr">display</span>: -webkit-flex;  <span class="comment">/* 主要是Safari */</span></span><br><span class="line">    <span class="attr">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的设置为 Flex 布局后，子元素的 float,clear 和 vertical-align 属性将失效。</p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>采用了 Flex 布局的元素，称之为 Flex 容器，简称容器。它的所有子元素自动成为容器成员，称为 Flex 项目，简称项目。</p><p>这是一张 Flex 的示意图:</p><p><img src="https://jszyy-pan.oss-cn-shanghai.aliyuncs.com/images-blog/flex/img01.png" alt="img01"></p><p>容器默认存在两根轴，水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（也就是与边框的交叉点）叫做 main start，结束的位置叫做 main end，交叉轴的开始位置叫做 cross start，结束位置叫做 cross end。</p><p>项目默认沿着主轴排列，单个项目占据的主轴空间叫做 main szie,占据的交叉轴空间叫做 cross size.</p><h2 id="容器属性"><a href="#容器属性" class="headerlink" title="容器属性"></a>容器属性</h2><ul><li>flex-direction</li><li>flex-wrap</li><li>flex-flow</li><li>justify-content</li><li>align-items</li><li>align-content</li></ul><h3 id="flex-direction-属性"><a href="#flex-direction-属性" class="headerlink" title="flex-direction 属性"></a>flex-direction 属性</h3><p>flex-direction 属性决定主轴的方向（即项目排列的方向）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.<span class="property">box</span>&#123;</span><br><span class="line">    flex-<span class="attr">direction</span>: row | row-reverse | column | column-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它可能会有四种值：</p><ul><li>row（默认值）：主轴为水平方向，起点在左端。</li><li>row-reverse：主轴为水平方向，起点在右端。</li><li>column：主轴为垂直方向，起点在上沿。</li><li>column-reverse：主轴为垂直方向，起点在下沿。</li></ul><p><img src="https://jszyy-pan.oss-cn-shanghai.aliyuncs.com/images-blog/flex/img02.png" alt="img02"></p><h3 id="flex-wrap-属性"><a href="#flex-wrap-属性" class="headerlink" title="flex-wrap 属性"></a>flex-wrap 属性</h3><p>默认情况下，项目都是排成一条轴线上的，flex-wrap 属性定义，如果一条轴线拍不下，如何换行：</p><p><img src="https://jszyy-pan.oss-cn-shanghai.aliyuncs.com/images-blog/flex/img03.png" alt="img03"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.<span class="property">box</span>&#123;</span><br><span class="line">    flex-<span class="attr">wrap</span>: nowrap | wrap | wrap-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它有以下三个值：</p><ul><li>nowrap(不换行)</li><li>wrap（换行。第一行在上方）</li><li>wrap-reverse（换行。第一行在下方）</li></ul><h3 id="flex-flow-属性"><a href="#flex-flow-属性" class="headerlink" title="flex-flow 属性"></a>flex-flow 属性</h3><p>flex-flow 属性是是上面连个的简写形式。默认值是 row nowrap。（毕竟上面两个属性是最常用的属性）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.<span class="property">box</span>&#123;</span><br><span class="line">    flex-<span class="attr">flow</span>:&lt;flex-direction&gt; || &lt;flex-warp&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="justify-content-属性"><a href="#justify-content-属性" class="headerlink" title="justify-content 属性"></a>justify-content 属性</h3><p>justify-content 属性定义项目在主轴的对齐方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.<span class="property">box</span>&#123;</span><br><span class="line">    justify-<span class="attr">content</span>: flex-start | flex-end | center | space-between | space-around;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它有以下五个值，具体对齐方式与主轴的方向有关。（假设主轴是从左到右）</p><ul><li>flex-start （左对齐）</li><li>flex-end（右对齐）</li><li>center（居中）</li><li>space-between（两端对齐，项目之间的间隔相等）</li><li>space-around（每个项目两侧的间隔相等，因此，项目与项目之间的间隔比项目与边框的间隔大一倍）</li></ul><h3 id="align-items-属性"><a href="#align-items-属性" class="headerlink" title="align-items 属性"></a>align-items 属性</h3><p>align-items 属性定义项目在交叉轴上是如何对齐的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.<span class="property">box</span> &#123;</span><br><span class="line">    align-<span class="attr">items</span>: flex-start | flex-end | center | baseline | stretch</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它可取 5 个值，具体的对齐方式与交叉轴的方式有关，默认交叉轴从上到下：</p><ul><li>flex-start：交叉轴的起点对齐</li><li>flex-end：交叉轴的终点对齐</li><li>center: 交叉轴的中点对齐</li><li>baseline: 项目的第一行文字的基线对齐</li><li>stretch（默认值）: 如果项目未设置高度或设为 auto，将占满整个容器高度</li></ul><h3 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a>align-content</h3><p>align-content 属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.<span class="property">box</span> &#123;</span><br><span class="line">    align-<span class="attr">content</span>: flex-start | flex-center | center | space-between | space-around | stretch</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它有六个值：</p><ul><li>flex-start：与交叉轴的起点对齐</li><li>flex-end：与交叉轴的终点对齐</li><li>center: 与交叉轴的中点对齐</li><li>space-between: 与交叉轴两端对齐，轴线之间的间隔平均分布</li><li>space-around：没根轴线两侧的间隔都相等。所以，轴线之间的间隔与边框之间的间隔大一倍。</li><li>stretch（默认值）：轴线占满整个交叉轴。</li></ul><h2 id="项目的属性"><a href="#项目的属性" class="headerlink" title="项目的属性"></a>项目的属性</h2><p>以下 6 个属性可设置在项目上：</p><ul><li>order</li><li>flex-grow</li><li>flex-shrink</li><li>flex-basis</li><li>flex</li><li>align-self</li></ul><h3 id="order-属性"><a href="#order-属性" class="headerlink" title="order 属性"></a>order 属性</h3><p>order 属性定义项目的排列顺序，数值越小，排列越靠前，默认为 0.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.<span class="property">item</span>&#123;</span><br><span class="line">    <span class="attr">order</span>: &lt;integer&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://jszyy-pan.oss-cn-shanghai.aliyuncs.com/images-blog/flex/img04.png" alt="img04"></p><h3 id="flex-grow-属性"><a href="#flex-grow-属性" class="headerlink" title="flex-grow 属性"></a>flex-grow 属性</h3><p>flex-grow 属性定义项目的方法比例，默认为 0，即如果存在剩余空间，也不放大。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.<span class="property">item</span>&#123;</span><br><span class="line">    flex-<span class="attr">grow</span>: &lt;number&gt;; <span class="comment">/* 默认为 0 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果所有项目的 flex-grow 属性都为 1，在它们将等分剩余空间。如果一个项目的 flex-grow 属性为 2，其他项目都为 1，则前者占据的剩余空间将其他项多一倍。如图所示：</p><p><img src="https://jszyy-pan.oss-cn-shanghai.aliyuncs.com/images-blog/flex/img05.png" alt="img05"></p><h3 id="flex-shrink-属性"><a href="#flex-shrink-属性" class="headerlink" title="flex-shrink 属性"></a>flex-shrink 属性</h3><p>flex-shrink 属性定义了项目的缩小比例，默认为 1，即如果空间不足，该项目将缩小。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.<span class="property">item</span> &#123;</span><br><span class="line">  flex-<span class="attr">shrink</span>: &lt;number&gt;; <span class="comment">/* default 1 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果所有项目的 flex-shrink 属性都为 1，当项目不足时，都将等比例缩小。如果一个项目的 flex-shrink 属性为 0，其他项目都为 1，则空间不足时，前者不缩小。负值对该属性无效。</p><h3 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a>flex-basis</h3><p>flex-basis 属性定义了在分配多余空间之前，项目占据的主轴空间。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为 auto，即项目的本来大小。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.<span class="property">item</span>&#123;</span><br><span class="line">    flex-<span class="attr">basis</span>: &lt;length&gt; | auto; <span class="comment">/* 默认为auto */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它可以设为跟 width 或 height 属性一样的值，则项目将占据固定空间。</p><h3 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h3><p>flex 属性是 flex-grow, flex-shrink 和 flex-basis 的简写，默认值为 0 1 auto。后两个属性可选。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.<span class="property">item</span> &#123;</span><br><span class="line">  <span class="attr">flex</span>: none | [ &lt;<span class="string">&#x27;flex-grow&#x27;</span>&gt; &lt;<span class="string">&#x27;flex-shrink&#x27;</span>&gt;? || &lt;<span class="string">&#x27;flex-basis&#x27;</span>&gt; ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该属性有两个快截值：auto（1 1 auto）和 none（0 0 auto）。<br>建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</p><h3 id="align-self-属性"><a href="#align-self-属性" class="headerlink" title="align-self 属性"></a>align-self 属性</h3><p>align-self 属性允许单个项目有与其他项目不一样的对齐方式，可覆盖 align-liems 属性，默认值 auto，表示继承父元素的 align-items 属性，如果没有父元素，则等同于 stretch。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.<span class="property">item</span> &#123;</span><br><span class="line">    align-<span class="attr">self</span>:auto | flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该属性可能取 6 个值，除了 auto，其他都与 align-items 属性完全一致。也就是上面的那几个值，如图所示：<br><img src="https://jszyy-pan.oss-cn-shanghai.aliyuncs.com/images-blog/flex/img06.png" alt="img06"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html">阮一峰：Flex 布局教程：语法篇</a></p>]]></content>
      
      
      <categories>
          
          <category> Posts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> # </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工作中总结的经验(2022)</title>
      <link href="/2022/11/15/Git%E7%9A%84%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4/"/>
      <url>/2022/11/15/Git%E7%9A%84%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="git-工作流程"><a href="#git-工作流程" class="headerlink" title="git 工作流程"></a>git 工作流程</h2><p>工作区（workspace）–&gt; 暂存区（index）–&gt; 本地场库（local repository）–&gt;远程场库（remote repository）</p><p>git有好几个区</p><ul><li>工作区（workspace）</li><li>暂存区（index）</li><li>本地仓库（local repository）</li><li>远程仓库（remote repository）</li></ul><p>远程仓库为我们保存一份代码，如github，而工作区、暂存区和本地仓库都在本地，这也就是为什么我们在没有网络的环境下也能使用git提交（commit）代码，因为提交仅仅是提交到本地仓库中，待有网络之后在推送（push）到远程仓库。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">1、初始化场库</span><br><span class="line">git init</span><br><span class="line"></span><br><span class="line">2、提交代码到暂存区</span><br><span class="line">git add .            // 提交所有修改的文件到暂存区</span><br><span class="line">git add [filename]   // 提交特定的文件到暂存区</span><br><span class="line"></span><br><span class="line">3、撤销提交到暂存区的文件</span><br><span class="line">git reset HEAD .            // 撤销所有暂存区的文件</span><br><span class="line">git reset HEAD -filename    // 撤销某个暂存区的文件</span><br><span class="line"></span><br><span class="line">4、提交commit</span><br><span class="line">git commit -m &quot;初始化&quot;       // 提交暂存区代码到本地场库</span><br><span class="line">git commit -a -m &quot;初始化&quot;    // 可以将没有在暂存区的文件提交到本地场库（这一个直接省略了add）</span><br><span class="line">git commit -am &quot;初始化&quot;      // 同上</span><br><span class="line"></span><br><span class="line">5、撤销commit之后的（撤销本地代码到）</span><br><span class="line">git reset --soft HEAD^      // 撤销commit之后的代码=》撤销到暂存区</span><br><span class="line">git reset --hard HEAD^      // 直接撤销到本地时候</span><br><span class="line">git reset --hard 59cf878    // 撤销到某一个commit</span><br><span class="line"></span><br><span class="line">6、修改commit信息</span><br><span class="line">git commit --amend</span><br><span class="line"></span><br><span class="line">7、用暂存区指定的文件替换到工作区</span><br><span class="line">git checkout -- &lt;file&gt;</span><br><span class="line"></span><br><span class="line">8、提交到远程</span><br><span class="line">git push</span><br><span class="line"></span><br><span class="line">9、临时保存文件</span><br><span class="line">git stash        // 保存临时修改的文件（保存至堆栈中，用于后续恢复当前工作目录）</span><br><span class="line">git stash pop    // 将当前stash中的内容弹出，并应用到当前分支对应的工作目录上。堆栈中的内容会删除。</span><br><span class="line"></span><br><span class="line">10、新建分支</span><br><span class="line">git branch [branch-name]  // 新建一个分支，但依然停留在当前分支(远程没有也没有关系)</span><br><span class="line">git checkout -b [branch]  // 新建一个分支，并切换到该分支</span><br><span class="line"></span><br><span class="line">11、切换分支</span><br><span class="line">git checkout [branch-name]   // 切换分支（该分支在本地已有）</span><br><span class="line"></span><br><span class="line">11.1、新建并切换到新建的分支</span><br><span class="line">git checkout -b [branch-name]  // 新建并切换分支</span><br><span class="line"></span><br><span class="line">12、合并分支</span><br><span class="line">git merge [branch]    // 合并指定分支到当前分支</span><br><span class="line">git merge --abort     // 取消合并</span><br><span class="line"></span><br><span class="line">13、拉取</span><br><span class="line">git fetch origin develop:develop     // 拉取远程已有的分支，并在本地新建一个这样的分支</span><br><span class="line">git pull origin develop              // 拉取远程分支的代码</span><br><span class="line"></span><br><span class="line">14、提交远程</span><br><span class="line">git push origin develop</span><br><span class="line">git pull和git fetch的区别</span><br><span class="line">git fetch：相当于从远程获取最新版本到本地，不会自动merge</span><br><span class="line">git pull：相当于从远程获取最新版本并merge到本地</span><br><span class="line">git pull origin master</span><br><span class="line">==》</span><br><span class="line">git fetch 和 git merge</span><br><span class="line">在实际使用中，git fetch更安全一些</span><br><span class="line">因为在merge前，我们可以查看更新情况，然后再决定是否合并。</span><br><span class="line"></span><br><span class="line">15、远程打tag</span><br><span class="line">git tag -a v1.4                       // 打一个tag</span><br><span class="line">git tag -a v1.4 -m &quot;my version 1.4&quot;   // 打一个tag并添加说明</span><br><span class="line">git push origin v1.4                  // 将这个tag提交到远程   </span><br><span class="line"></span><br><span class="line">16、查看日志</span><br><span class="line">git reflog 和 git log的区别</span><br><span class="line">git log 命令可以显示所有提交过的版本信息</span><br><span class="line">git reflog 可以查看所有分支的所有操作记录（包括已经被删除的 commit 记录和 reset 的操作）</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">代码回滚</span><br><span class="line">git reset --soft</span><br><span class="line">  只是改变了HEAD的指向，本地代码不会变化，我们使用git status依然可以看到，同时也可以git commit提交</span><br><span class="line">git reset --hard</span><br><span class="line">  直接回改变本地源码，不仅仅指向变化了，代码也回到了那个版本时的代码，所以使用是一定要小心</span><br><span class="line"> git reset --hard HEAD^ </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">跳过校验</span><br><span class="line">git commit -m &quot;msg&quot; --no-verify</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">git commit -n -m &#x27;msg&#x27;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Posts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> # </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSON.stringify() 处理包含 &#39;function&#39; 关键字的 JSON 对象，及反转处理</title>
      <link href="/2022/11/15/JSON.stringify()%20%E5%A4%84%E7%90%86%E5%8C%85%E5%90%AB%20&#39;function&#39;%20%E5%85%B3%E9%94%AE%E5%AD%97%E7%9A%84%20JSON%20%E5%AF%B9%E8%B1%A1%EF%BC%8C%E5%8F%8A%E5%8F%8D%E8%BD%AC%E5%A4%84%E7%90%86/"/>
      <url>/2022/11/15/JSON.stringify()%20%E5%A4%84%E7%90%86%E5%8C%85%E5%90%AB%20&#39;function&#39;%20%E5%85%B3%E9%94%AE%E5%AD%97%E7%9A%84%20JSON%20%E5%AF%B9%E8%B1%A1%EF%BC%8C%E5%8F%8A%E5%8F%8D%E8%BD%AC%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="…"><a href="#…" class="headerlink" title="…"></a>…</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>业务场景中，需要对一个类似于下面这样的对象做处理。因为将要序列化成一个JSON字符串的值包含有 <code>function</code> 关键字，导致结果和预期出现了一些差异：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pageJson=&#123;</span><br><span class="line">  <span class="attr">addTime</span>: <span class="string">&quot;20201118&quot;</span>,</span><br><span class="line">  <span class="attr">id</span>: <span class="string">&quot;20201118&quot;</span>,</span><br><span class="line">  <span class="attr">articleName</span>: <span class="string">&quot;测试文章标题&quot;</span>,</span><br><span class="line">  <span class="attr">handleClick</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">12321</span>)&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(pageJson))</span><br><span class="line"><span class="comment">// &quot;&#123;\&quot;addTime\&quot;:\&quot;20201118\&quot;,\&quot;id\&quot;:\&quot;20201118\&quot;,\&quot;articleName\&quot;:\&quot;测试文章标题\&quot;&#125;&quot;</span></span><br></pre></td></tr></table></figure><p>很明显的可以看到 <code>handleClick: function()&#123;console.log(12321)&#125;</code> 这条数据并没有被有效解析。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><blockquote><p>JSON.stringify() 方法将一个 <code>Javascript</code> 对象或值转换为 JSON 字符串，如果指定了一个 <code>replacer</code> 函数， 则可以选择性地替换值，或者指定地 <code>replace</code> 是数组，则可以选择性地仅包含数组指定地属性。</p></blockquote><p>MDN 地解释中提到，可以指定一个 <code>replace</code> 函数，来选择性地替换值，是不是就可以通过这个函数，处理 <code>function</code> 关键字呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pageJson=&#123;</span><br><span class="line">  <span class="attr">addTime</span>: <span class="string">&quot;20201118&quot;</span>,</span><br><span class="line">  <span class="attr">id</span>: <span class="string">&quot;20201118&quot;</span>,</span><br><span class="line">  <span class="attr">articleName</span>: <span class="string">&quot;测试文章标题&quot;</span>,</span><br><span class="line">  <span class="attr">handleClick</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">12321</span>)&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> str = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(pageJson, <span class="keyword">function</span>(<span class="params">key, value</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> value + <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str)</span><br><span class="line"><span class="comment">// &quot;&#123;\&quot;addTime\&quot;:\&quot;20201118\&quot;,\&quot;id\&quot;:\&quot;20201118\&quot;,\&quot;articleName\&quot;:\&quot;测试文章标题\&quot;,\&quot;handleClick\&quot;:\&quot;function()&#123;window.runnerWindow.proxyConsole.log(12321)&#125;\&quot;&#125;&quot;</span></span><br></pre></td></tr></table></figure><p>其实此时解析已经成功了，之所以 <code>console.log</code> 被解析成了 <code>window.runnerWindow.proxyConsole.log</code> 是因为 <code>this</code> 指向的问题，不在这里赘述。</p><h2 id="反转"><a href="#反转" class="headerlink" title="反转"></a>反转</h2><p>字符串化的结果并不能直接提供给我们使用。比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pageJson=&#123;</span><br><span class="line">  <span class="attr">addTime</span>: <span class="string">&quot;20201118&quot;</span>,</span><br><span class="line">  <span class="attr">id</span>: <span class="string">&quot;20201118&quot;</span>,</span><br><span class="line">  <span class="attr">articleName</span>: <span class="string">&quot;测试文章标题&quot;</span>,</span><br><span class="line">  <span class="attr">handleClick</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">12321</span>)&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> parseStr = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(pageJson, <span class="keyword">function</span>(<span class="params">key, value</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> value + <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(parseStr )</span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   addTime: &quot;20201118&quot;,</span></span><br><span class="line"><span class="comment">//   articleName: &quot;测试文章标题&quot;,</span></span><br><span class="line"><span class="comment">//   handleClick: &quot;function()&#123;window.runnerWindow.proxyConsole.log(12321)&#125;&quot;,</span></span><br><span class="line"><span class="comment">//   id: &quot;20201118&quot;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><p>此时 <code>handleClick</code> 的值是一个字符串，这显然不是我们想要的结果，此时就需要使用 <code>eval()</code> 方法进行处理：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pageJson=&#123;</span><br><span class="line">  <span class="attr">addTime</span>: <span class="string">&quot;20201118&quot;</span>,</span><br><span class="line">  <span class="attr">id</span>: <span class="string">&quot;20201118&quot;</span>,</span><br><span class="line">  <span class="attr">articleName</span>: <span class="string">&quot;测试文章标题&quot;</span>,</span><br><span class="line">  <span class="attr">handleClick</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">12321</span>)&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> json= <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(pageJson, <span class="keyword">function</span>(<span class="params">key, value</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> value + <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;),</span><br><span class="line"><span class="comment">// 同样利用第二个函数进行处理</span></span><br><span class="line"><span class="function">(<span class="params">key, value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (value.<span class="property">indexOf</span> &amp;&amp; value.<span class="title function_">indexOf</span>(<span class="string">&#x27;function&#x27;</span>) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">eval</span>(<span class="string">&quot;(function()&#123;return &quot;</span> + value + <span class="string">&quot; &#125;)()&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> value; </span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(json)</span><br><span class="line"></span><br><span class="line"><span class="comment">//  &#123;</span></span><br><span class="line"><span class="comment">//    addTime: &quot;20201118&quot;,</span></span><br><span class="line"><span class="comment">//    articleName: &quot;测试文章标题&quot;,</span></span><br><span class="line"><span class="comment">//    handleClick: function()&#123;window.runnerWindow.proxyConsole.log(12321)&#125;,</span></span><br><span class="line"><span class="comment">//    id: &quot;20201118&quot;</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br></pre></td></tr></table></figure><p>这样反转后的 <code>handleClick</code> 就能够正常调用并使用了。</p><h2 id="JSON-stringify-解析"><a href="#JSON-stringify-解析" class="headerlink" title="JSON.stringify() 解析"></a>JSON.stringify() 解析</h2><p>JSON.stringify() 可以接收3个参数 <code>value</code>，<code>replacer</code>，<code>space</code>。</p><ul><li><code>value</code> ：将要序列化成一个 JSON 字符串的值。</li><li><code>replace</code> ：可选参数，可以是一个函数或者是一个数组。</li></ul><p>作为函数，它有两个参数，key 和 value，它们都会被序列化。作为函数时，在序列化过程中，被序列化的值的每个属性都会经过该函数的转换和处理；如果是一个数组，则只有包含在这个数组中的属性名才会被序列化到最终的 JSON 字符串中；如果是 <code>null</code> 或未提供，则对象所有的属性都会被序列化。<b>需要注意：</b>不能用 <code>replace</code> 方法，从数组中移除值(<code>values</code>)，如果返回 <code>undefined</code> 或者一个函数，将会被 <code>null</code> 取代。</p><ul><li><code>space</code> ：可选参数，用来控制结果字符串里面的间距，指定缩进用的空白字符串，用于美化输出。</li></ul><p>如果参数是个数字，它代表有多少的空格，上限为 10。数字值若小于 1，则意味着没有空格。如果参数为字符串(当字符串长度超过10个字母，取其前10个字母)，该字符串将被作为空格；如果该参数为 null 或没有提供，将没有空格。</p><h2 id="使用-JSON-stringify-结合-localStorage-的例子"><a href="#使用-JSON-stringify-结合-localStorage-的例子" class="headerlink" title="使用 JSON.stringify 结合 localStorage 的例子"></a>使用 JSON.stringify 结合 localStorage 的例子</h2><p> 一些时候，你想存储用户创建的一个对象，并且，即使在浏览器被关闭后仍能恢复该对象。下面的例子是 <code>JSON.stringify</code> 适用于这种情形的一个样板：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个示例数据</span></span><br><span class="line"><span class="keyword">var</span> session = &#123;</span><br><span class="line">    <span class="string">&#x27;screens&#x27;</span> : [],</span><br><span class="line">    <span class="string">&#x27;state&#x27;</span> : <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line">session.<span class="property">screens</span>.<span class="title function_">push</span>(&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;screenA&quot;</span>, <span class="string">&quot;width&quot;</span>:<span class="number">450</span>, <span class="string">&quot;height&quot;</span>:<span class="number">250</span>&#125;);</span><br><span class="line">session.<span class="property">screens</span>.<span class="title function_">push</span>(&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;screenB&quot;</span>, <span class="string">&quot;width&quot;</span>:<span class="number">650</span>, <span class="string">&quot;height&quot;</span>:<span class="number">350</span>&#125;);</span><br><span class="line">session.<span class="property">screens</span>.<span class="title function_">push</span>(&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;screenC&quot;</span>, <span class="string">&quot;width&quot;</span>:<span class="number">750</span>, <span class="string">&quot;height&quot;</span>:<span class="number">120</span>&#125;);</span><br><span class="line">session.<span class="property">screens</span>.<span class="title function_">push</span>(&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;screenD&quot;</span>, <span class="string">&quot;width&quot;</span>:<span class="number">250</span>, <span class="string">&quot;height&quot;</span>:<span class="number">60</span>&#125;);</span><br><span class="line">session.<span class="property">screens</span>.<span class="title function_">push</span>(&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;screenE&quot;</span>, <span class="string">&quot;width&quot;</span>:<span class="number">390</span>, <span class="string">&quot;height&quot;</span>:<span class="number">120</span>&#125;);</span><br><span class="line">session.<span class="property">screens</span>.<span class="title function_">push</span>(&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;screenF&quot;</span>, <span class="string">&quot;width&quot;</span>:<span class="number">1240</span>, <span class="string">&quot;height&quot;</span>:<span class="number">650</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 JSON.stringify 转换为 JSON 字符串</span></span><br><span class="line"><span class="comment">// 然后使用 localStorage 保存在 session 名称里</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;session&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(session));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 然后是如何转换通过 JSON.stringify 生成的字符串，该字符串以 JSON 格式保存在 localStorage 里</span></span><br><span class="line"><span class="keyword">var</span> restoredSession = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;session&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 现在 restoredSession 包含了保存在 localStorage 里的对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(restoredSession);</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>JSON.stringify() 作为 JavaScript 标准内置对象 JSON 的一个 Api，发挥的作用很重要，可以应对大部分场景下的数据字符串化处理，也可以对数据格式做缩进优化，使得阅读更直观，甚至可以搭配 JSON.parse 完成 “深拷贝”，但是使用时还是有些地方需要小心处理。</p>]]></content>
      
      
      <categories>
          
          <category> Posts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> # </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MacOS iTerm2使用pem文件登录服务器</title>
      <link href="/2022/11/15/MacOS%20iTerm2%E4%BD%BF%E7%94%A8pem%E6%96%87%E4%BB%B6%E7%99%BB%E5%BD%95%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2022/11/15/MacOS%20iTerm2%E4%BD%BF%E7%94%A8pem%E6%96%87%E4%BB%B6%E7%99%BB%E5%BD%95%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="下载安装iTerm2"><a href="#下载安装iTerm2" class="headerlink" title="下载安装iTerm2"></a>下载安装iTerm2</h2><p>这里不放图了，默认已经安装好了。</p><h2 id="添加Profiles"><a href="#添加Profiles" class="headerlink" title="添加Profiles"></a>添加Profiles</h2><p>第一步：点击左上角 iTerm2</p><p>第二步： 切换到Profiles标签</p><p>第三步： 点击+号添加</p><p>第四步： 设置Name</p><p>第五步 切换Command，并输入expect ~&#x2F;.ssh&#x2F;xxx</p><p>其中 expect ~&#x2F;.ssh&#x2F;xxx 后面的 xxx 由自定义文件的名称</p><p><img src="https://jszyy-blog-img.oss-cn-beijing.aliyuncs.com/iterm2/iterm2-01.png?versionId=CAEQDhiBgMCgxZTo0xciIDg3ZmUwMGEzNWJmOTQ3M2E5YWMyNGIyNTBiNDdmODg3" alt="iterm2-01.png"></p><p>第六部 在访达中选择: 前往 -&gt; 前往文件夹 -&gt; 输入 <code>~/.ssh/</code></p><p><img src="https://jszyy-blog-img.oss-cn-beijing.aliyuncs.com/iterm2/iterm2-02.png?versionId=CAEQDhiBgIDzxpTo0xciIGM0MThlZDNkOTE0ODQyY2JiNmQzNGNmMzE3OTNhNTAy" alt="iterm2-0.png"></p><p>第七步 创建文件xxx，并输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">set user 用户名 </span><br><span class="line">set host ip地址 </span><br><span class="line">set password ~/.ssh/xx.pem </span><br><span class="line">spawn ssh -i $password $user@$host </span><br><span class="line"> </span><br><span class="line">interact </span><br><span class="line">expect eof</span><br></pre></td></tr></table></figure><p><img src="https://jszyy-blog-img.oss-cn-beijing.aliyuncs.com/iterm2/iterm2-03.png?versionId=CAEQDhiBgID2yZTo0xciIDM2NWY3NjY3NzQ4ZDRmYWE4ZDA0Zjg5NGVlYzcyNDBl" alt="iterm2-03.png"></p><p><img src="https://jszyy-blog-img.oss-cn-beijing.aliyuncs.com/iterm2/iterm2-04.png?versionId=CAEQDhiBgICQxJTo0xciIGQ1NjA4ZTkwMmZhMjRlN2Q4MWU5Y2QxNTBkMmQzNWZk" alt="iterm2-04.png"></p><p>第八步： 保存退出</p><p>第九步： 使用</p><p>打开 iTerm2 ， 点击 profiles ，或者使用快捷键command + o，选择之前创建的 profiles 选择，双击就可以了</p><p><img src="https://jszyy-blog-img.oss-cn-beijing.aliyuncs.com/iterm2/iterm2-05.png?versionId=CAEQDhiBgIDqxpTo0xciIDQ1MGFmY2Q1ODY5ZTQxNjliNTNkN2U5MTg4YzE3YjE4" alt="iterm2-05.png"></p><h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><p>先可以使用pem文件直接登录下，检查pem文件的权限对不，很多时候会报权限太大的问题，修改一下就行：</p><p><code>sudo chmod 600 yourkey.pem</code></p><p>这样就可以了。</p><p>这么配置，连接就很容易了。</p>]]></content>
      
      
      <categories>
          
          <category> Posts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> # </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac妙控鼠标灵敏度设置</title>
      <link href="/2022/11/15/Mac%E5%A6%99%E6%8E%A7%E9%BC%A0%E6%A0%87%E7%81%B5%E6%95%8F%E5%BA%A6%E8%AE%BE%E7%BD%AE/"/>
      <url>/2022/11/15/Mac%E5%A6%99%E6%8E%A7%E9%BC%A0%E6%A0%87%E7%81%B5%E6%95%8F%E5%BA%A6%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>1，打开终端</p><p>2，输入命令查看：defaults read -g com.apple.mouse.scaling</p><p>（可以看到鼠标当前的速度）</p><p>3，输入命令修改：defaults write -g com.apple.mouse.scaling 7（修改鼠标速度为 7）</p><p>个人建议 7 以下就可以了，我感觉7就已经可以使用了，如果觉得不够，可以输入自己理想的数值。太快的没试过，最高测试到10</p><p>4，重启电脑，重复第一步操作</p><p>5，修改完成，可以试试鼠标的跟踪速度合不合手了。（不合手支持再次修改）</p>]]></content>
      
      
      <categories>
          
          <category> Posts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> # </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React Hook 实现通用选择搜索组件</title>
      <link href="/2022/11/15/React%20Hook%20%E5%AE%9E%E7%8E%B0%E9%80%9A%E7%94%A8%E9%80%89%E6%8B%A9%E6%90%9C%E7%B4%A2%E7%BB%84%E4%BB%B6/"/>
      <url>/2022/11/15/React%20Hook%20%E5%AE%9E%E7%8E%B0%E9%80%9A%E7%94%A8%E9%80%89%E6%8B%A9%E6%90%9C%E7%B4%A2%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>是否在业务中写很多的符合业务的搜索组件。但是其根本就是换个请求的 API 或者是 使用的获取字段，也或者是进行搜索的字段名称不一致。</p><p>react hook 其实很大的好处是把原来的无状态组件，用hook 这一特性勾入需要的状态值。这样在我们组件开发的时候带来的很多的便利性。</p><p>下面我们看下如何去实现这个组件。先上代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Select</span>, <span class="title class_">Spin</span>, <span class="title class_">Empty</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;antd&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> debounce <span class="keyword">from</span> <span class="string">&#x27;lodash/debounce&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useRequest &#125; <span class="keyword">from</span> <span class="string">&#x27;ahooks&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> queryString <span class="keyword">from</span> <span class="string">&#x27;query-string&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> ** 常用的搜索组件参数解释(都是非必须)</span></span><br><span class="line"><span class="comment"> ** 1.searchUrl 搜索url</span></span><br><span class="line"><span class="comment"> ** 2.searchParam 追加在每次请求后的搜索参数</span></span><br><span class="line"><span class="comment"> ** 3.labelRender 可自定义label 的展示</span></span><br><span class="line"><span class="comment"> ** 4.optionLabelProp 可自定义搜索的依据。</span></span><br><span class="line"><span class="comment"> ** 5.querySearch 搜索字段</span></span><br><span class="line"><span class="comment"> ** 6.useDataField 用到接口返回的 data 数据下的某个字段</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (&#123;</span><br><span class="line">  searchParam = &#123;&#125;,</span><br><span class="line">  searchUrl = <span class="string">&#x27;/api/v2/projects/searching&#x27;</span>,</span><br><span class="line">  labelRender,</span><br><span class="line">  querySearch = <span class="string">&#x27;search&#x27;</span>,</span><br><span class="line">  useDataField = <span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">  ...props</span><br><span class="line">&#125;) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [fetching, setFetching] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">const</span> [dataSource, setDataSource] = <span class="title function_">useState</span>([]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123; run &#125; = <span class="title function_">useRequest</span>(</span><br><span class="line">    <span class="function">(<span class="params">params</span>) =&gt;</span> (&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">`<span class="subst">$&#123;searchUrl&#125;</span>?<span class="subst">$&#123;params&#125;</span>`</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">manual</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchSearchData</span>(<span class="params">op</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> param = queryString.<span class="title function_">stringify</span>(</span><br><span class="line">      &#123;</span><br><span class="line">        ...searchParam,</span><br><span class="line">        ...op,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">skipNull</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">skipEmptyString</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">    <span class="title function_">setFetching</span>(<span class="literal">true</span>);</span><br><span class="line">    <span class="title function_">setDataSource</span>([]);</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title function_">run</span>(param);</span><br><span class="line">    <span class="keyword">const</span> mapArr = data[useDataField] || data;</span><br><span class="line">    <span class="keyword">const</span> result = mapArr.<span class="title function_">map</span>(<span class="function">(<span class="params">p</span>) =&gt;</span> (&#123;</span><br><span class="line">      <span class="attr">label</span>: labelRender || p.<span class="property">name</span>,</span><br><span class="line">      <span class="attr">value</span>: p.<span class="property">id</span> || p.<span class="property">name</span>,</span><br><span class="line">      <span class="attr">key</span>: p.<span class="property">id</span> || p.<span class="property">name</span>,</span><br><span class="line">      <span class="attr">name</span>: p.<span class="property">name</span>,</span><br><span class="line">      <span class="comment">// item: p</span></span><br><span class="line">    &#125;));</span><br><span class="line">    <span class="title function_">setFetching</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="title function_">setDataSource</span>(result);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> handleSearch = <span class="title function_">debounce</span>(<span class="function">(<span class="params">name</span>) =&gt;</span> <span class="title function_">fetchSearchData</span>(&#123; [querySearch]: name &#125;), <span class="number">500</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleFocus</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">fetchSearchData</span>(&#123;</span><br><span class="line">      [querySearch]: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Select</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">labelInValue</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">placeholder</span>=<span class="string">&quot;请输入项目名称&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">notFoundContent</span>=<span class="string">&#123;fetching</span> ? &lt;<span class="attr">Spin</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span> /&gt;</span> : <span class="tag">&lt;<span class="name">Empty</span> /&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">      filterOption=&#123;false&#125;</span></span><br><span class="line"><span class="language-xml">      optionLabelProp=&quot;name&quot;</span></span><br><span class="line"><span class="language-xml">      onSearch=&#123;handleSearch&#125;</span></span><br><span class="line"><span class="language-xml">      onFocus=&#123;handleFocus&#125;</span></span><br><span class="line"><span class="language-xml">      showSearch</span></span><br><span class="line"><span class="language-xml">      options=&#123;dataSource&#125;</span></span><br><span class="line"><span class="language-xml">      &#123;...props&#125;</span></span><br><span class="line"><span class="language-xml">    /&gt;</span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面的我都在代码里面有解释，这种自带 debounce ，带有常驻初始化参数，搞定 90% 已上的搜索组件哪里能有。要用的即可直接复制。。</p>]]></content>
      
      
      <categories>
          
          <category> Posts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> # </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise知识及从0实现</title>
      <link href="/2022/11/15/Promise%E7%9F%A5%E8%AF%86%E5%8F%8A%E4%BB%8E0%E5%AE%9E%E7%8E%B0/"/>
      <url>/2022/11/15/Promise%E7%9F%A5%E8%AF%86%E5%8F%8A%E4%BB%8E0%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Promise介绍"><a href="#Promise介绍" class="headerlink" title="Promise介绍"></a>Promise介绍</h1><h2 id="Promise起源与用途"><a href="#Promise起源与用途" class="headerlink" title="Promise起源与用途"></a>Promise起源与用途</h2><p>Promise最早在社区提出和实现，在ES6写入了语言标准。</p><blockquote><p>tip: ES6即ECMA-262第六版，这一版包含了这个规范有史以来最重要的一批增强特性，Javascript是ECMA-262规范的实现</p></blockquote><ul><li>Promise是异步编程的解决方案，比传统的回调函数解决方式更加合理更加强大更加优雅。</li><li>语法上： 使用Promise构造函数对异步操作进行封装以生成Promise实例</li><li>功能上： promise对象用来封装一个异步操作并提供统一的API，使得各种异步操作都可以用同样的方式进行处理</li></ul><h2 id="常见的异步编程场景"><a href="#常见的异步编程场景" class="headerlink" title="常见的异步编程场景"></a>常见的异步编程场景</h2><ul><li><p>fs文件操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">require(&#x27;fs&#x27;).readFile(&#x27;./index.html&#x27;,(err,data)=&gt;&#123;</span><br><span class="line">    // 回调函数</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>Ajax操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$.get(&#x27;/api/getUser&#x27;,(data)=&gt;&#123;</span><br><span class="line">    //handleData();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>定时器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">    console.log(&#x27;timeout&#x27;);</span><br><span class="line">&#125;,1000);</span><br></pre></td></tr></table></figure></li></ul><h2 id="为什么使用Promise"><a href="#为什么使用Promise" class="headerlink" title="为什么使用Promise"></a>为什么使用Promise</h2><ul><li>支持链式调用，将异步操作以同步操作的流程表达出来，可以解决回调地狱问题</li></ul><h3 id="什么是回调地狱？"><a href="#什么是回调地狱？" class="headerlink" title="什么是回调地狱？"></a>什么是回调地狱？</h3><p>回调函数嵌套调用，外部回调函数异步执行结果是嵌套的回调的执行条件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 回调地狱典型场景</span><br><span class="line">asyncFunc1(opt,(...args1) =&gt; &#123;</span><br><span class="line">    asyncFunc2(opt,(...args2) =&gt; &#123;</span><br><span class="line">        asyncFunc3(opt,(...args3) =&gt; &#123;</span><br><span class="line">            asyncFunc4(opt,(...args4) =&gt; &#123;</span><br><span class="line">                //TODO: some opt</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="回调地狱的缺点："><a href="#回调地狱的缺点：" class="headerlink" title="回调地狱的缺点："></a>回调地狱的缺点：</h3><p>不便于阅读，不便于异常处理，不利于身心愉快</p><ul><li>指定回调函数的方式更加灵活</li></ul><p><b>传统方式：</b>  必须在启动异步任务之前指定<br><b>Promise：</b>  可以随时监听异步任务的状态，随时指定回调函数，一个或者多个。</p><ul><li>Promise提供统一的api，使得控制异步操作更加容易。</li></ul><p>提供了哪些api在后续的使用中会详细阐述</p><h1 id="Promise特点"><a href="#Promise特点" class="headerlink" title="Promise特点"></a>Promise特点</h1><h2 id="Promise的特性"><a href="#Promise的特性" class="headerlink" title="Promise的特性"></a>Promise的特性</h2><ul><li>对象状态不受外界影响</li></ul><p>Promise对象代表一个异步操作，有三种状态：pending进行中，fulfilled成功，rejected失败<br>只有异步操作结束才能改变状态，其他任何操作都不能改变。状态存储在Promise对象的[[PromiseState]]属性中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// Promise的两个属性：</span><br><span class="line">let promiseA = new Promise((resolve,reject)=&gt;&#123;resolve();&#125;)</span><br><span class="line">// 状态对应promiseA的[[PromiseState]]字段。</span><br><span class="line">let promiseB = new Promise((resolve,reject)=&gt;&#123;resolve(1111);&#125;)</span><br><span class="line">// [[PromiseResult]]的值为 1111，这个字段用于存储 resolve(val)或者reject(val)的参数[val]</span><br></pre></td></tr></table></figure><blockquote><p>tips: Promise本意是承诺，也是因为此原因，想一想这是多么浪漫的名字。</p></blockquote><ul><li>一旦状态改变，就不会再发生变化</li></ul><p>Promise 对象的状态改变，只有两种可能：从 Pending 变为 Resolved 和从 Pending 变为 Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对 Promise 对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。</p><h2 id="Promise的缺点"><a href="#Promise的缺点" class="headerlink" title="Promise的缺点"></a>Promise的缺点</h2><ul><li>一旦新建，立即执行，无法中途取消</li><li>Promise内部抛出的错误，无法反映到外部</li><li>pending状态时无法知道进展到哪一个阶段</li></ul><h1 id="Promise使用"><a href="#Promise使用" class="headerlink" title="Promise使用"></a>Promise使用</h1><h2 id="Promise实例创建"><a href="#Promise实例创建" class="headerlink" title="Promise实例创建"></a>Promise实例创建</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const promise = new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">  if (/* 异步操作成功 */)&#123;</span><br><span class="line">    resolve(value);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    reject(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Promise构造函数接受一个函数作为参数，该函数的两个参数分别是resolve和reject。它们是两个函数，由 JavaScript 引擎提供，不用自己部署。</p><ul><li>resolve函数：将Promise对象的状态从“未完成”变为“成功”（即从 pending 变为 fulfilled），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去；</li><li>reject函数：将Promise对象的状态从“未完成”变为“失败”（即从 pending 变为 rejected），在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。</li></ul><h2 id="Promise-prototype-then"><a href="#Promise-prototype-then" class="headerlink" title="Promise.prototype.then"></a>Promise.prototype.then</h2><p>Promise实例生成以后，可以用then方法分别指定fulfilled状态和rejected状态的回调函数<br>最终会返回一个新的Promise对象</p><blockquote><p>tip: then中的回调函数是可选的，不一定要提供</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">promise.then(function(value) &#123;</span><br><span class="line">  // fulfilled状态的处理</span><br><span class="line">&#125;, function(error) &#123;</span><br><span class="line">  // rejected状态的处理</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Promise-prototype-catch"><a href="#Promise-prototype-catch" class="headerlink" title="Promise.prototype.catch"></a>Promise.prototype.catch</h2><p>catch用于处理状态为rejected的回调函数<br>最终会返回一个新的Promise对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">promise.catch((err)=&gt;&#123;</span><br><span class="line">    handleReject();</span><br><span class="line">    //</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Promise-resolve"><a href="#Promise-resolve" class="headerlink" title="Promise.resolve"></a>Promise.resolve</h2><p>返回成功或者失败的Promise对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let promiseA = Promise.resolve(1);</span><br><span class="line">// 如果传入的参数为非Promise类型的对象，则返回的结果为成功的Promise对象</span><br><span class="line">let PromiseB = Promise.resolve(new Promise((resolve,reject)=&gt;&#123;</span><br><span class="line">    reject(&#x27;err&#x27;);</span><br><span class="line">&#125;)</span><br><span class="line">// 如果传入的参数为Promise对象，则参数Promise返回的结果就是 Promise.resolve返回的结果</span><br><span class="line">// 比如这时return 一个[[PromiseResult]]的值为err的Promise对象</span><br></pre></td></tr></table></figure><h2 id="Promise-reject"><a href="#Promise-reject" class="headerlink" title="Promise.reject"></a>Promise.reject</h2><p>返回一个失败的Promise对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let PromiseA = Promise.reject(new Promise((resolve,reject)=&gt;&#123;</span><br><span class="line">    resolve(&#x27;err&#x27;);</span><br><span class="line">&#125;)</span><br><span class="line">// 无论传入是啥，就返回一个失败的Promise对象，[[PromiseResult]]的值为 Promise.reject的参数</span><br></pre></td></tr></table></figure><h2 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all"></a>Promise.all</h2><p>接收的参数是由n个Promise对象的数组。</p><blockquote><p>tips: 返回结果是新的promise，只有所有的Promise对象都成功才成功，只要有一个失败了就直接失败</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let promise1 = Promise.resolve(1);</span><br><span class="line">let promise2 = Promise.resolve(2);</span><br><span class="line">let promise3 = Promise.reject(3);</span><br><span class="line">const res = Promise.all([promise1,promise2,promise3]);</span><br><span class="line">//此时输出为 [[PromiseState]]是rejected，[[PromiseResult]]是3的Promise</span><br><span class="line">const res = Promise.all([promise1,promise2]);</span><br><span class="line">//此时输出为 [[PromiseState]]是fulfilled，[[PromiseResult]]是[1,2]的Promise</span><br></pre></td></tr></table></figure><h2 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race"></a>Promise.race</h2><p>接收的参数是由n个Promise对象的数组。</p><blockquote><p>tips: 返回结果是新的promise，第一个完成的promise的结果状态就是最终结果的状态。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let promise1 = Promise.resolve(1);</span><br><span class="line">let promise2 = Promise.resolve(2);</span><br><span class="line">let promise3 = Promise.reject(3);</span><br><span class="line">const res = Promise.race([promise1,promise2,promise3]);</span><br><span class="line">//此时输出为 [[PromiseState]]是fulfilled，[[PromiseResult]]是1的Promise</span><br></pre></td></tr></table></figure><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="如何改变Promise对象的状态"><a href="#如何改变Promise对象的状态" class="headerlink" title="如何改变Promise对象的状态"></a>如何改变Promise对象的状态</h3><ul><li>resolve()  &#x2F;&#x2F; pending &#x3D;&gt; fulfilled</li><li>reject()   &#x2F;&#x2F; pending &#x3D;&gt; rejected</li><li>抛出错误 throw ‘err’ &#x2F;&#x2F; pending &#x3D;&gt; rejected</li></ul><h3 id="promise-then-的返回结果"><a href="#promise-then-的返回结果" class="headerlink" title="promise.then() 的返回结果"></a>promise.then() 的返回结果</h3><ul><li>如果抛出异常，则返回rejected的Promise对象</li><li>如果返回的是非promise类型的任意值，则返回状态为resolved的Promise对象</li><li>如果返回的是一个新的promise，则该promise的结果会成为新的promise结果</li></ul><h2 id="promise为什么可以链式调用"><a href="#promise为什么可以链式调用" class="headerlink" title="promise为什么可以链式调用"></a>promise为什么可以链式调用</h2><p>因为then,catch,all,race等等所有的promise的api的返回值是新的promise对象。<br>所以可以继续打点调用promise的方法，以此种方式将任务串联起来</p><h2 id="promise的异常穿透"><a href="#promise的异常穿透" class="headerlink" title="promise的异常穿透"></a>promise的异常穿透</h2><ul><li>当使用promise的then进行链式调用时，可以在最后指定失败的回调</li><li>前面的任何错误都会在最后传到失败的回调中去处理<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">let p1 = Promise.resolve(1);</span><br><span class="line">p1.then((value)=&gt;&#123;</span><br><span class="line">    console.log(11);</span><br><span class="line">&#125;).then((value)=&gt;&#123;</span><br><span class="line">    throw &#x27;err&#x27;;</span><br><span class="line">&#125;).then((value)=&gt;&#123;</span><br><span class="line">    console.log(22);</span><br><span class="line">&#125;).catch(err=&gt;&#123;</span><br><span class="line">    console.log(err);</span><br><span class="line">&#125;)</span><br><span class="line">//输出： 11  err</span><br></pre></td></tr></table></figure></li></ul><h3 id="中断promise链"><a href="#中断promise链" class="headerlink" title="中断promise链"></a>中断promise链</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">let p1 = Promise.resolve(1);</span><br><span class="line">p1.then((value)=&gt;&#123;</span><br><span class="line">    console.log(11);</span><br><span class="line">&#125;).then((value)=&gt;&#123;</span><br><span class="line">    console.log(22);</span><br><span class="line">&#125;).then((value)=&gt;&#123;</span><br><span class="line">    console.log(33);</span><br><span class="line">&#125;).catch(err=&gt;&#123;</span><br><span class="line">    console.log(err);</span><br><span class="line">&#125;)</span><br><span class="line">//输出：11 22 33</span><br></pre></td></tr></table></figure><p>那我们怎么去中断这个回调函数的联调呢</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">let p1 = Promise.resolve(1);</span><br><span class="line">p1.then((value)=&gt;&#123;</span><br><span class="line">    console.log(11);</span><br><span class="line">&#125;).then((value)=&gt;&#123;</span><br><span class="line">    console.log(22);</span><br><span class="line">    return new Promise(()=&gt;&#123;&#125;);</span><br><span class="line">&#125;).then((value)=&gt;&#123;</span><br><span class="line">    console.log(33);</span><br><span class="line">&#125;).catch(err=&gt;&#123;</span><br><span class="line">    console.log(err);</span><br><span class="line">&#125;)</span><br><span class="line">//输出：11 22</span><br></pre></td></tr></table></figure><p>答案就是返回一个状态为pending的promise对象</p><h1 id="手写Promise"><a href="#手写Promise" class="headerlink" title="手写Promise"></a>手写Promise</h1><p>代码逐步迭代，可以对照着看，我把注释都写得比较清晰了~</p><h2 id="构造函数实现"><a href="#构造函数实现" class="headerlink" title="构造函数实现"></a>构造函数实现</h2><p>我们第一步首先就是完成Promise的构造函数，构造函数我们简单去想，其实就是接收一个执行器函数，执行器函数有两个参数，这个方法阔以改变Promise对象的状态和结果。ok，说干就干！</p><blockquote><p>tips:</p><p>注意！throw err也可以修改Promise的状态与结果!<br>promise的状态只能修改一次，需要做限制</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">// 万里长城第一步</span><br><span class="line">function Promise(executor)&#123;</span><br><span class="line">    this.promiseState = &#x27;pending&#x27;;</span><br><span class="line">    this.promiseResult = null;</span><br><span class="line">    const resolve = val =&gt; &#123;</span><br><span class="line">        // 状态只能修改一次</span><br><span class="line">        if(this.promiseState !== &#x27;pending&#x27;) return;</span><br><span class="line">        // 1. 要去修改Promise对象的状态([[promiseState]]),置为成功fulfilled</span><br><span class="line">        this.promiseState = &#x27;fulfilled&#x27;;</span><br><span class="line">        // 2. 要去修改Promise对象的状态([[promiseResult]])</span><br><span class="line">        this.promiseResult = val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    const reject = err =&gt; &#123;</span><br><span class="line">        // 状态只能修改一次</span><br><span class="line">        if(this.promiseState !== &#x27;pending&#x27;) return;</span><br><span class="line">        // 1. 要去修改Promise对象的状态([[promiseState]]),置为失败rejected</span><br><span class="line">        this.promiseState = &#x27;rejected&#x27;;</span><br><span class="line">        // 2. 要去修改Promise对象的状态([[promiseResult]])</span><br><span class="line">        this.promiseResult = err;</span><br><span class="line">    &#125;</span><br><span class="line">    // 为什么要加try catch 是因为，throw err也相当于调用reject了【前面说过没看过的去补课】</span><br><span class="line">    try&#123;</span><br><span class="line">        /*</span><br><span class="line">        * 同步执行执行器函数</span><br><span class="line">        * 执行器函数接收两个参数，一个是resolve，一个是reject</span><br><span class="line">        */</span><br><span class="line">        executor(resolve,reject);</span><br><span class="line">    &#125; catch(err) &#123;</span><br><span class="line">        reject(err);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="then方法的实现"><a href="#then方法的实现" class="headerlink" title="then方法的实现"></a>then方法的实现</h2><p>首先按照之前说过的，then支持两个参数，分别是成功和失败的回调，而且这两个参数可传可不传。<br>其次，因为异步任务的问题，并且支持多个回调，所以我们需要对回调函数采用数组进行存储，所以引入了新的变量，callbackList<br>而且我们需要注意then的返回结果也是Promise对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">// 万里长城今犹在~</span><br><span class="line">function Promise(executor)&#123;</span><br><span class="line">    //保存promise状态</span><br><span class="line">    this.promiseState = &#x27;pending&#x27;;</span><br><span class="line">    //保存promise结果</span><br><span class="line">    this.promiseResult = null;</span><br><span class="line">    //用于保存异步回调函数列表</span><br><span class="line">    this.callbackList = [];</span><br><span class="line">    const resolve = val =&gt; &#123;</span><br><span class="line">        // 状态只能修改一次</span><br><span class="line">        if(this.promiseState !== &#x27;pending&#x27;) return;</span><br><span class="line">        // 1. 要去修改Promise对象的状态([[promiseState]]),置为成功fulfilled</span><br><span class="line">        this.promiseState = &#x27;fulfilled&#x27;;</span><br><span class="line">        // 2. 要去修改Promise对象的状态([[promiseResult]])</span><br><span class="line">        this.promiseResult = val;</span><br><span class="line">        // 调用成功的回调【callbackList存起来的】</span><br><span class="line">        for(let callback of this.callbackList)&#123;</span><br><span class="line">            callback.onResolved(val);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    const reject = err =&gt; &#123;</span><br><span class="line">        // 状态只能修改一次</span><br><span class="line">        if(this.promiseState !== &#x27;pending&#x27;) return;</span><br><span class="line">        // 1. 要去修改Promise对象的状态([[promiseState]]),置为失败rejected</span><br><span class="line">        this.promiseState = &#x27;rejected&#x27;;</span><br><span class="line">        // 2. 要去修改Promise对象的状态([[promiseResult]])</span><br><span class="line">        this.promiseResult = err;</span><br><span class="line">        // 调用失败的回调【callbackList存起来的】</span><br><span class="line">        for(let callback of this.callbackList)&#123;</span><br><span class="line">            callback.onRejected(err);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // 为什么要加try catch 是因为，throw err也相当于调用reject了【前面说过没看过的去补课】</span><br><span class="line">    try&#123;</span><br><span class="line">        /*</span><br><span class="line">        * 同步执行执行器函数</span><br><span class="line">        * 执行器函数接收两个参数，一个是resolve，一个是reject</span><br><span class="line">        */</span><br><span class="line">        executor(resolve,reject);</span><br><span class="line">    &#125; catch(err) &#123;</span><br><span class="line">        reject(err);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//then方法</span><br><span class="line">Promise.prototype.then = function(onResolved,onRejected)&#123;</span><br><span class="line">    const self = this;</span><br><span class="line"></span><br><span class="line">    // then方法会返回Promise</span><br><span class="line">    return new Promise((resolve,reject) =&gt; &#123;</span><br><span class="line">        // 对返回值的处理进行封装</span><br><span class="line">        const handleCallback = (callback) =&gt; &#123;</span><br><span class="line">            // 如果回调函数中抛出错误，则reject</span><br><span class="line">            try&#123;</span><br><span class="line">                // 需要依据回调的返回结果确定then方法的返回值</span><br><span class="line">                // 现在的this会指向return的promise对象，所以使用self</span><br><span class="line">                const res = callback(self.promiseResult);</span><br><span class="line">                if(res instanceof Promise)&#123;</span><br><span class="line">                    //如果回调返回结果是个Promise</span><br><span class="line">                    res.then(val =&gt; &#123;</span><br><span class="line">                        resolve(val);</span><br><span class="line">                    &#125;,err =&gt; &#123;</span><br><span class="line">                        reject(err);</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    // 返回结果不是Promise</span><br><span class="line">                    resolve(res);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;catch(err)&#123;</span><br><span class="line">                reject(err);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //调用回调函数</span><br><span class="line">        if(this.promiseState === &#x27;fulfilled&#x27;)&#123;</span><br><span class="line">            handleCallback(onResolved);</span><br><span class="line">        &#125;</span><br><span class="line">        if(this.promiseState === &#x27;rejected&#x27;)&#123;</span><br><span class="line">            handleCallback(onRejected);</span><br><span class="line">        &#125;</span><br><span class="line">        /*</span><br><span class="line">        * 如果是pending状态，则异步任务，在改变状态的时候去调用回调函数</span><br><span class="line">        * 所以要保存回调函数</span><br><span class="line">        * 因为promise实例阔以指定多个回调，于是采用数组 </span><br><span class="line">        */</span><br><span class="line">        if(this.promiseState === &#x27;pending&#x27;)&#123;</span><br><span class="line">            this.callbackList.push(&#123;</span><br><span class="line">                onResolved:() =&gt; &#123;</span><br><span class="line">                    handleCallback(onResolved); </span><br><span class="line">                &#125;,</span><br><span class="line">                onRejected:() =&gt; &#123;</span><br><span class="line">                    handleCallback(onRejected);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="catch方法的实现"><a href="#catch方法的实现" class="headerlink" title="catch方法的实现"></a>catch方法的实现</h2><p>我们采用then方法去实现catch方法，但是catch可以处理异常穿透</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">function Promise(executor)&#123;</span><br><span class="line">    //保存promise状态</span><br><span class="line">    this.promiseState = &#x27;pending&#x27;;</span><br><span class="line">    //保存promise结果</span><br><span class="line">    this.promiseResult = null;</span><br><span class="line">    //用于保存异步回调函数列表</span><br><span class="line">    this.callbackList = [];</span><br><span class="line">    const resolve = val =&gt; &#123;</span><br><span class="line">        // 状态只能修改一次</span><br><span class="line">        if(this.promiseState !== &#x27;pending&#x27;) return;</span><br><span class="line">        // 1. 要去修改Promise对象的状态([[promiseState]]),置为成功fulfilled</span><br><span class="line">        this.promiseState = &#x27;fulfilled&#x27;;</span><br><span class="line">        // 2. 要去修改Promise对象的状态([[promiseResult]])</span><br><span class="line">        this.promiseResult = val;</span><br><span class="line">        // 调用成功的回调【callbackList存起来的】</span><br><span class="line">        for(let callback of this.callbackList)&#123;</span><br><span class="line">            callback.onResolved(val);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    const reject = err =&gt; &#123;</span><br><span class="line">        // 状态只能修改一次</span><br><span class="line">        if(this.promiseState !== &#x27;pending&#x27;) return;</span><br><span class="line">        // 1. 要去修改Promise对象的状态([[promiseState]]),置为失败rejected</span><br><span class="line">        this.promiseState = &#x27;rejected&#x27;;</span><br><span class="line">        // 2. 要去修改Promise对象的状态([[promiseResult]])</span><br><span class="line">        this.promiseResult = err;</span><br><span class="line">        // 调用失败的回调【callbackList存起来的】</span><br><span class="line">        for(let callback of this.callbackList)&#123;</span><br><span class="line">            callback.onRejected(err);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // 为什么要加try catch 是因为，throw err也相当于调用reject了【前面说过没看过的去补课】</span><br><span class="line">    try&#123;</span><br><span class="line">        /*</span><br><span class="line">        * 同步执行执行器函数</span><br><span class="line">        * 执行器函数接收两个参数，一个是resolve，一个是reject</span><br><span class="line">        */</span><br><span class="line">        executor(resolve,reject);</span><br><span class="line">    &#125; catch(err) &#123;</span><br><span class="line">        reject(err);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//then方法</span><br><span class="line">Promise.prototype.then = function(onResolved,onRejected)&#123;</span><br><span class="line">    const self = this;</span><br><span class="line">    //处理异常穿透 并且为onResolved，onRejected设置默认值。因为这两个参数可以都不传</span><br><span class="line">    if(typeof onRejected !== &#x27;function&#x27;)&#123;</span><br><span class="line">        onRejected = err =&gt; &#123;</span><br><span class="line">            throw err;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if(typeof onResolved !== &#x27;function&#x27;)&#123;</span><br><span class="line">        onResolved = val =&gt; val;</span><br><span class="line">    &#125;</span><br><span class="line">    // then方法会返回Promise</span><br><span class="line">    return new Promise((resolve,reject) =&gt; &#123;</span><br><span class="line">        // 对返回值的处理进行封装</span><br><span class="line">        const handleCallback = (callback) =&gt; &#123;</span><br><span class="line">            // 如果回调函数中抛出错误，则reject</span><br><span class="line">            try&#123;</span><br><span class="line">                // 需要依据回调的返回结果确定then方法的返回值</span><br><span class="line">                // 现在的this会指向return的promise对象，所以使用self</span><br><span class="line">                const res = callback(self.promiseResult);</span><br><span class="line">                if(res instanceof Promise)&#123;</span><br><span class="line">                    //如果回调返回结果是个Promise</span><br><span class="line">                    res.then(val =&gt; &#123;</span><br><span class="line">                        resolve(val);</span><br><span class="line">                    &#125;,err =&gt; &#123;</span><br><span class="line">                        reject(err);</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    // 返回结果不是Promise</span><br><span class="line">                    resolve(res);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;catch(err)&#123;</span><br><span class="line">                reject(err);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //调用回调函数</span><br><span class="line">        if(this.promiseState === &#x27;fulfilled&#x27;)&#123;</span><br><span class="line">            handleCallback(onResolved);</span><br><span class="line">        &#125;</span><br><span class="line">        if(this.promiseState === &#x27;rejected&#x27;)&#123;</span><br><span class="line">            handleCallback(onRejected);</span><br><span class="line">        &#125;</span><br><span class="line">        /*</span><br><span class="line">        * 如果是pending状态，则异步任务，在改变状态的时候去调用回调函数</span><br><span class="line">        * 所以要保存回调函数</span><br><span class="line">        * 因为promise实例阔以指定多个回调，于是采用数组 </span><br><span class="line">        */</span><br><span class="line">        if(this.promiseState === &#x27;pending&#x27;)&#123;</span><br><span class="line">            this.callbackList.push(&#123;</span><br><span class="line">                onResolved:() =&gt; &#123;</span><br><span class="line">                    handleCallback(onResolved); </span><br><span class="line">                &#125;,</span><br><span class="line">                onRejected:() =&gt; &#123;</span><br><span class="line">                    handleCallback(onRejected);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//catch方法</span><br><span class="line">Promise.prototype.catch = function(onRejected) &#123;</span><br><span class="line">    //  我们可以直接使用then方法实现</span><br><span class="line">    return this.then(undefined,onRejected);</span><br></pre></td></tr></table></figure><h2 id="Promise-resolve方法实现"><a href="#Promise-resolve方法实现" class="headerlink" title="Promise.resolve方法实现"></a>Promise.resolve方法实现</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//resolve方法</span><br><span class="line">Promise.resolve = function(val) &#123;</span><br><span class="line">    //返回值的情况在前文说过，可以在 Promise的使用一章找到</span><br><span class="line">    return new Promise((resolve,reject)=&gt;&#123;</span><br><span class="line">        if(val instanceof Promise)&#123;</span><br><span class="line">            val.then(val =&gt; &#123;</span><br><span class="line">                resolve(val);</span><br><span class="line">            &#125;, err =&gt; &#123;</span><br><span class="line">                reject(err);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            resolve(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Promise-reject方法实现"><a href="#Promise-reject方法实现" class="headerlink" title="Promise.reject方法实现"></a>Promise.reject方法实现</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"> //reject方法</span><br><span class="line">Promise.reject = function(err) &#123;</span><br><span class="line">    //返回值的情况在前文说过，可以在 Promise的使用一章找到</span><br><span class="line">    return new Promise((resolve,reject)=&gt;&#123;</span><br><span class="line">        reject(err);</span><br><span class="line">    &#125;) </span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br><span class="line">Promise.all方法实现</span><br><span class="line">比较简单，回顾之前Promise.all的用法以及返回值，就阔以看懂~</span><br><span class="line">//可以先去回顾一下all方法的用法</span><br><span class="line">//all</span><br><span class="line">Promise.all = function(promiseList) &#123;</span><br><span class="line">    let count = 0;</span><br><span class="line">    let res = [];</span><br><span class="line">    const length = promiseList.length;</span><br><span class="line">    return new Promise((resolve,reject)=&gt;&#123;</span><br><span class="line">        for(let i = 0;i &lt; length; i++)&#123;</span><br><span class="line">            promiseList[i].then(val =&gt; &#123;</span><br><span class="line">                count++;</span><br><span class="line">                res[i] = val;</span><br><span class="line">                if(count === length)&#123;</span><br><span class="line">                    resolve(res);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,err =&gt; &#123;</span><br><span class="line">                reject(err);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Promise-race方法实现"><a href="#Promise-race方法实现" class="headerlink" title="Promise.race方法实现"></a>Promise.race方法实现</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//race</span><br><span class="line">//要结束了！</span><br><span class="line">Promise.race = function(promiseList) &#123;</span><br><span class="line">    const length = promiseList.length;</span><br><span class="line">    //谁先完成谁就决定结果！</span><br><span class="line">    return new Promise((resolve,reject)=&gt;&#123;</span><br><span class="line">        for(let i = 0;i &lt; length; i++)&#123;</span><br><span class="line">            promiseList[i].then(val =&gt; &#123;</span><br><span class="line">                resolve(val);</span><br><span class="line">            &#125;,err =&gt; &#123;</span><br><span class="line">                reject(err);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="完整代码以及细节处理"><a href="#完整代码以及细节处理" class="headerlink" title="完整代码以及细节处理"></a>完整代码以及细节处理</h3><blockquote><p>tips: 细节回调函数是异步的 我们使用setTimeout进行包裹</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line">function Promise(executor)&#123;</span><br><span class="line">    //保存promise状态</span><br><span class="line">    this.promiseState = &#x27;pending&#x27;;</span><br><span class="line">    //保存promise结果</span><br><span class="line">    this.promiseResult = null;</span><br><span class="line">    //用于保存异步回调函数列表</span><br><span class="line">    this.callbackList = [];</span><br><span class="line">    const resolve = val =&gt; &#123;</span><br><span class="line">        // 状态只能修改一次</span><br><span class="line">        if(this.promiseState !== &#x27;pending&#x27;) return;</span><br><span class="line">        // 1. 要去修改Promise对象的状态([[promiseState]]),置为成功fulfilled</span><br><span class="line">        this.promiseState = &#x27;fulfilled&#x27;;</span><br><span class="line">        // 2. 要去修改Promise对象的状态([[promiseResult]])</span><br><span class="line">        this.promiseResult = val;</span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">            // 调用成功的回调【callbackList存起来的】</span><br><span class="line">            for(let callback of this.callbackList)&#123;</span><br><span class="line">                callback.onResolved(val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    const reject = err =&gt; &#123;</span><br><span class="line">        // 状态只能修改一次</span><br><span class="line">        if(this.promiseState !== &#x27;pending&#x27;) return;</span><br><span class="line">        // 1. 要去修改Promise对象的状态([[promiseState]]),置为失败rejected</span><br><span class="line">        this.promiseState = &#x27;rejected&#x27;;</span><br><span class="line">        // 2. 要去修改Promise对象的状态([[promiseResult]])</span><br><span class="line">        this.promiseResult = err;</span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">            // 调用失败的回调【callbackList存起来的】</span><br><span class="line">            for(let callback of this.callbackList)&#123;</span><br><span class="line">                callback.onRejected(err);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    // 为什么要加try catch 是因为，throw err也相当于调用reject了【前面说过没看过的去补课】</span><br><span class="line">    try&#123;</span><br><span class="line">        /*</span><br><span class="line">        * 同步执行执行器函数</span><br><span class="line">        * 执行器函数接收两个参数，一个是resolve，一个是reject</span><br><span class="line">        */</span><br><span class="line">        executor(resolve,reject);</span><br><span class="line">    &#125; catch(err) &#123;</span><br><span class="line">        reject(err);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//then方法</span><br><span class="line">Promise.prototype.then = function(onResolved,onRejected)&#123;</span><br><span class="line">    const self = this;</span><br><span class="line">    //处理异常穿透 并且为onResolved，onRejected设置默认值。因为这两个参数可以都不传</span><br><span class="line">    if(typeof onRejected !== &#x27;function&#x27;)&#123;</span><br><span class="line">        onRejected = err =&gt; &#123;</span><br><span class="line">            throw err;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if(typeof onResolved !== &#x27;function&#x27;)&#123;</span><br><span class="line">        onResolved = val =&gt; val;</span><br><span class="line">    &#125;</span><br><span class="line">    // then方法会返回Promise</span><br><span class="line">    return new Promise((resolve,reject) =&gt; &#123;</span><br><span class="line">        // 对返回值的处理进行封装</span><br><span class="line">        const handleCallback = (callback) =&gt; &#123;</span><br><span class="line">            // 如果回调函数中抛出错误，则reject</span><br><span class="line">            try&#123;</span><br><span class="line">                // 需要依据回调的返回结果确定then方法的返回值</span><br><span class="line">                // 现在的this会指向return的promise对象，所以使用self</span><br><span class="line">                const res = callback(self.promiseResult);</span><br><span class="line">                if(res instanceof Promise)&#123;</span><br><span class="line">                    //如果回调返回结果是个Promise</span><br><span class="line">                    res.then(val =&gt; &#123;</span><br><span class="line">                        resolve(val);</span><br><span class="line">                    &#125;,err =&gt; &#123;</span><br><span class="line">                        reject(err);</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    // 返回结果不是Promise</span><br><span class="line">                    resolve(res);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;catch(err)&#123;</span><br><span class="line">                reject(err);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //调用回调函数</span><br><span class="line">        if(this.promiseState === &#x27;fulfilled&#x27;)&#123;</span><br><span class="line">            setTimeout(()=&gt;&#123;</span><br><span class="line">                handleCallback(onResolved);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        if(this.promiseState === &#x27;rejected&#x27;)&#123;</span><br><span class="line">            setTimeout(()=&gt;&#123;</span><br><span class="line">                handleCallback(onRejected);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        /*</span><br><span class="line">        * 如果是pending状态，则异步任务，在改变状态的时候去调用回调函数</span><br><span class="line">        * 所以要保存回调函数</span><br><span class="line">        * 因为promise实例阔以指定多个回调，于是采用数组 </span><br><span class="line">        */</span><br><span class="line">        if(this.promiseState === &#x27;pending&#x27;)&#123;</span><br><span class="line">            this.callbackList.push(&#123;</span><br><span class="line">                onResolved:() =&gt; &#123;</span><br><span class="line">                    handleCallback(onResolved); </span><br><span class="line">                &#125;,</span><br><span class="line">                onRejected:() =&gt; &#123;</span><br><span class="line">                    handleCallback(onRejected);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">//catch方法</span><br><span class="line">Promise.prototype.catch = function(onRejected) &#123;</span><br><span class="line">    //  我们可以直接使用then方法实现</span><br><span class="line">    return this.then(undefined,onRejected);</span><br><span class="line">&#125;</span><br><span class="line">//resolve方法</span><br><span class="line">Promise.resolve = function(val) &#123;</span><br><span class="line">    //返回值的情况在前文说过，可以在 Promise的使用一章找到</span><br><span class="line">    return new Promise((resolve,reject)=&gt;&#123;</span><br><span class="line">        if(val instanceof Promise)&#123;</span><br><span class="line">            val.then(val =&gt; &#123;</span><br><span class="line">                resolve(val);</span><br><span class="line">            &#125;, err =&gt; &#123;</span><br><span class="line">                reject(err);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            resolve(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;) </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//reject方法</span><br><span class="line">Promise.reject = function(err) &#123;</span><br><span class="line">    //返回值的情况在前文说过，可以在 Promise的使用一章找到</span><br><span class="line">    return new Promise((resolve,reject)=&gt;&#123;</span><br><span class="line">        reject(err);</span><br><span class="line">    &#125;) </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//all</span><br><span class="line">Promise.all = function(promiseList) &#123;</span><br><span class="line">    let count = 0;</span><br><span class="line">    let res = [];</span><br><span class="line">    const length = promiseList.length;</span><br><span class="line">    return new Promise((resolve,reject)=&gt;&#123;</span><br><span class="line">        for(let i = 0;i &lt; length; i++)&#123;</span><br><span class="line">            promiseList[i].then(val =&gt; &#123;</span><br><span class="line">                count++;</span><br><span class="line">                res[i] = val;</span><br><span class="line">                if(count === length)&#123;</span><br><span class="line">                    resolve(res);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,err =&gt; &#123;</span><br><span class="line">                reject(err);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;) </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//race</span><br><span class="line">Promise.race = function(promiseList) &#123;</span><br><span class="line">    const length = promiseList.length;</span><br><span class="line">    //谁先完成谁就决定结果！</span><br><span class="line">    return new Promise((resolve,reject)=&gt;&#123;</span><br><span class="line">        for(let i = 0;i &lt; length; i++)&#123;</span><br><span class="line">            promiseList[i].then(val =&gt; &#123;</span><br><span class="line">                resolve(val);</span><br><span class="line">            &#125;,err =&gt; &#123;</span><br><span class="line">                reject(err);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，手写Promise也就结束了~</p>]]></content>
      
      
      <categories>
          
          <category> Posts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> # </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React高阶组件的那些事</title>
      <link href="/2022/11/15/React%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
      <url>/2022/11/15/React%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>学习 <code>react</code> 已经有一段时间了，期间在阅读官方文档的基础上也看了不少文章，但感觉对很多东西的理解还是不够深刻。在使用 <code>react-redux</code> 的过程中，发现 connect 好像还挺有意思的，也真实感受到了高阶组件所带来的便利，出于自己写项目本身就是为了学习的目的，因此对高阶组件又进行了一番学习。写下这篇文章主要是对高阶组件的知识进行一个梳理与总结。</p><h2 id="初识高阶组件"><a href="#初识高阶组件" class="headerlink" title="初识高阶组件"></a>初识高阶组件</h2><p>要学习高阶组件首先我们要知道的就是高阶组件是什么，解决了什么样的问题。</p><p><code>React</code> 官方文档的对高阶组件的说明是这样的:</p><blockquote><p><code>A higher-order component (HOC) is an advanced technique in React for reusing component logic. HOCs are not part of the React API, perse. They are a pattern that emerges from React’s compositional nature.</code></p></blockquote><p>从上面的说明我们可以看出，<code>react</code> 的高阶组件并不是 <code>react API</code> 的一部分，它源自于 <code>react</code> 的生态。</p><p>简单来说，一个高阶组件就是一个函数，它接受一个组件作为输入，然后会返回一个新的组件作为结果，且所返回的新组件会进行相对增强。值得注意的是，我们在这说的组件并不是组件实例，而是一个组件类或者一个无状态组件的函数。就像这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">removeUserProp</span>(<span class="params">WrappedComponent</span>) &#123;</span><br><span class="line">  <span class="comment">//WrappingComponent这个组件名字并不重要，它至少一个局部变量，继承自React.Component</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">class</span> <span class="title class_">WrappingComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// ES6的语法，可以将一个对象的特定字段过滤掉</span></span><br><span class="line">      <span class="keyword">const</span> &#123; user, ...otherProps &#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">WrappedComponent</span> &#123;<span class="attr">...otherProps</span>&#125; /&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>了解设计模式的大佬们应该发现了，它其实就是的设计模式中的装饰者模式在 <code>react</code> 中的应用，它通过组合的方式从而达到很高的灵活程度和复用。<br>就像上面的代码，我们定义了一个叫做 <code>removeUserProp</code> 的高阶组件，传入一个叫做 <code>WrappedComponent</code> 的参数（代表一个组件类），然后返回一个新的组件 ，新的组件与原组件并没有太大的区别，只是将原组件中的 <code>prop</code> 值 <code>user</code> 给剔除了出来。</p><p>有了上面这个高阶组件的，当我们不希望某个组件接收到 <code>user</code> 时，我们就可以将这个组件作为参数传入 <code>removeUserProp()</code> 函数中，然后使用这个返回的组件就行了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">NewComponent</span> = <span class="title function_">removeUserProp</span>(<span class="title class_">OldComponent</span>);</span><br></pre></td></tr></table></figure><p>这样 <code>NewComponent</code> 组件与 <code>OldComponent</code> 组件拥有完全一样的行为，唯一的区别就在于传入的 <code>name</code> 属性对这个组件没有任何作用，它会自动屏蔽这个属性。也就是说，我们这个高阶组件成功的为传入的组件增加了一个屏蔽某个 <code>prop</code> 的功能。</p><p>那么明白了什么是高阶组件后，我们接下来要做的是，弄清楚高阶组件主要解决的问题，或者说我们为什么需要高阶组件？总结起来主要是以下两个方面：</p><ol><li>代码重用</li></ol><blockquote><p>在很多情况下，<code>react</code> 组件都需要共用同一个逻辑，我们在这个时候就可以把这部分共用的逻辑提取出来，然后利用高阶组件的形式将其组合，从而减少很多重复的组件代码。</p></blockquote><ol start="2"><li>修改 <code>React</code> 组件的行为</li></ol><blockquote><p>很多时候有些现成的 <code>react</code> 组件并不是我们自己撸出来的，而是来自于 <code>GitHub</code> 上的大佬们的开源贡献，而当我们要对这些组件进行复用的时候，我们往往都不想去触碰这些组件的内部逻辑，这时我们就能通过高阶组件产生新的组件满足自身需求，同时也对原组件没有任何损害。</p></blockquote><p>现在我们对高阶组件有了一个较为直观的认识，知道了什么是高阶组件以及高阶组件的主要用途。接下来我们就要具体了解高阶组件的实现方式以及它的具体用途了。</p><h3 id="高阶组件的实现分类"><a href="#高阶组件的实现分类" class="headerlink" title="高阶组件的实现分类"></a>高阶组件的实现分类</h3><p>对于高阶组件的实现方式我们可以根据作为参数传入的组件与返回的新组件的关系将高阶组件的实现方式分为以下两大类：</p><ul><li>代理方式的高阶组件</li><li>继承方式的高阶组件</li></ul><h4 id="代理方式的高阶组件"><a href="#代理方式的高阶组件" class="headerlink" title="代理方式的高阶组件"></a>代理方式的高阶组件</h4><p>从高阶组件的使用频率来讲，我们使用的绝大多数的高阶组件都是代理方式的高阶组件，如 <code>react-redux</code> 中的 <code>connect</code>，还有我们在上面所实现的那个 <code>removeUserProp</code>。这类高阶组件的特点是返回的新组件类直接继承于 <code>React.Component</code> 类。新组建在其中扮演的角色是一个传入参数组件的代理，在新组建的 <code>render</code> 函数中，把被包裹的组件渲染出来。在此过程中，除了高阶组件自己需要做的工作，其他的工作都会交给被包裹的组件去完成。</p><p>代理方式的高阶组件具体而言，应用场景可以分为以下几个：</p><ul><li>操作 <code>prop</code></li><li>通过 <code>ref</code> 获取组件实例</li><li>抽取状态</li><li>包装组件</li></ul><h2 id="控制-prop"><a href="#控制-prop" class="headerlink" title="控制 prop"></a>控制 prop</h2><p>代理类型的高阶组件返回的新组件时，渲染过程也会被新组建的 <code>render</code> 函数所控制，而在此过程中，<code>render</code> 函数相对于一个代理，完全决定该如何使用被包裹在其中的组件。在 <code>render</code> 函数中，<code>this.props</code> 包含了新组件接受到的所有 <code>prop</code>。因此最直观的用法就是接受到 <code>props</code>，然后进行任何读取，增减，修改等控制 <code>props</code> 的自定义操作。<br>就比如我们上面的那个示例，就做到了删除 <code>prop</code> 的功能，当然我们也能实现一个添加 <code>prop</code> 的高阶组件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">addNewProp</span>(<span class="params">WrappedComponent, newProps</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">class</span> <span class="title class_">WrappingComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">WrappedComponent</span> &#123;<span class="attr">...thisProps</span>&#125; &#123;<span class="attr">...newProps</span>&#125; /&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个 <code>addNewProp</code> 高阶组件与我们最开始举例的 <code>removeUserProp</code> 高阶组件在实现上并无太大的区别。唯一区别较大的就是我们传入的参数除了 <code>WrappedComponent</code> 组件类外，还新增了 <code>newProps</code> 参数。这样的高阶组件在复用性方面会跟友好，我们可以利用这样一个高阶组件给不同的组件添加不同的新属性，比如这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">FirstComponent</span> = <span class="title function_">addNewProp</span>(<span class="title class_">OldComponent</span>, &#123; <span class="attr">num</span>: <span class="title class_">First</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">LastComponent</span> = <span class="title function_">addNewProp</span>(<span class="title class_">NewComponent</span>, &#123; <span class="attr">num</span>: <span class="title class_">Last</span> &#125;);</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们实现了让两个完全不同的组件分别通过高阶组件生成了两个完成不同的新的组件，而这其中唯一相同的是都添加了一个属性值，且这个属性还不相同。从上面的代码我们也不难发现，高阶组件可以重用在不同组件上，减少了重复的代码。当需要注意的是，在修改和删除 <code>Props</code> 的时候，除非由特殊的要求，否则最好不要影响到原本传递给普通组件的 <code>Props</code>。</p><h2 id="通过-ref-获取组件实例"><a href="#通过-ref-获取组件实例" class="headerlink" title="通过 ref 获取组件实例"></a>通过 ref 获取组件实例</h2><p>我们可以通过 <code>ref</code> 获取组件实例，但值得注意的是，<code>React</code> 官方不提倡访问 <code>ref</code>，我们只是讨论一下这个技术的可行性。在此我们写一个 <code>refsHOC</code> 的高阶组件，可以获得被包裹组件的 <code>ref</code>，从而根据 <code>ref</code> 直接操纵被包裹组件的实例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">refsHOC</span>(<span class="params">WrappedComponent</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">class</span> <span class="title class_">HOCComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">super</span>(...<span class="variable language_">arguments</span>)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">linkRef</span> = <span class="variable language_">this</span>.<span class="property">linkRef</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">linkRef</span>(<span class="params">wrappedInstance</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_root</span> = wrappedInstance</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> props = &#123;...<span class="variable language_">this</span>.<span class="property">props</span>, <span class="attr">ref</span>: <span class="variable language_">this</span>.<span class="property">linkRef</span>&#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">WrappedComponent</span> &#123;<span class="attr">...props</span>&#125;/&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> refsHOC</span><br></pre></td></tr></table></figure><p>这个 <code>refs</code> 高阶组件的工作原理其实也是增加传递给被包裹组件的 <code>props</code>，不同的是利用了 <code>ref</code> 这个特殊的 <code>prop</code> 而已。我们通过 <code>linkRef</code> 来给被包裹组件传递 <code>ref</code> 值，<code>linkRef</code> 被调用时，我们就可以得到被包裹组件的 <code>DOM</code> 实例。</p><p>这种高阶组件在用途上来讲可以说是无所不能的，因为只要能够获得对被包裹组件的引用，就能通过这个引用任意操纵一个组件的 <code>DOM</code> 元素，贼酸爽。但它从某个角度来讲也是啥也干不了的，因为 <code>react</code> 团队表示：不要过度使用 <code>Refs</code>。且我们也有更好的替代品——控制组件<code>（Controlled Component)</code>来解决相关问题，因此这个坑建议大家还是尽量少踩为好。</p><h2 id="抽取状态"><a href="#抽取状态" class="headerlink" title="抽取状态"></a>抽取状态</h2><p>对于抽取状态，我想大家应该都不会很陌生。<code>react-redux</code> 中的 <code>connect</code> 函数就实现了这种功能，它异常的强大，也成功吸引了我对高阶组件的注意。但在这有一点需要明确的是：<code>connect</code> 函数本身并不是高阶组件，<code>connect</code> 函数执行的结果才是一个高阶组件。让我们来看看 <code>connect</code> 的源码的主要逻辑：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">connect</span>(<span class="params">mapStateToProps, mapDispatchToProps, mergeProps, options = &#123;&#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">wrapWithConnect</span>(<span class="params">WrappedComponent</span>) &#123;</span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Connect</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">            <span class="title function_">constructor</span>(<span class="params">props, context</span>) &#123;</span><br><span class="line">                <span class="comment">//参数获取</span></span><br><span class="line">                <span class="variable language_">super</span>(props, context)</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">store</span> = props.<span class="property">store</span> || context.<span class="property">store</span></span><br><span class="line">                <span class="keyword">const</span> storeState = <span class="variable language_">this</span>.<span class="property">store</span>.<span class="title function_">getState</span>()</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">state</span> = &#123; storeState &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 进行判断，当数据发生改变时，Component重新渲染</span></span><br><span class="line">            <span class="title function_">shouldComponentUpdate</span>(<span class="params">nextProps, nextState</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (propsChanged || mapStateProducedChange || dispatchPropsChanged) &#123;</span><br><span class="line">                 <span class="variable language_">this</span>.<span class="title function_">updateState</span>(nextProps)</span><br><span class="line">                  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">                 &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="comment">// 改变Component中的state</span></span><br><span class="line">            <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">                 <span class="variable language_">this</span>.<span class="property">store</span>.<span class="title function_">subscribe</span>(() = &#123;</span><br><span class="line">                  <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">                   <span class="attr">storeState</span>: <span class="variable language_">this</span>.<span class="property">store</span>.<span class="title function_">getState</span>()</span><br><span class="line">                  &#125;)</span><br><span class="line">                 &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">renderedElement</span> = <span class="title function_">createElement</span>(<span class="title class_">WrappedComponent</span>,</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">mergedProps</span></span><br><span class="line">                )</span><br><span class="line">                <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">renderedElement</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">hoistStatics</span>(<span class="title class_">Connect</span>, <span class="title class_">WrappedComponent</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的代码我们不难看出 <code>connect</code> 模块的返回值 <code>wrapWithConnect</code> 是一个函数，而这个函数才是我们所认知的高阶组件。<code>wrapWithConnect</code> 函数会返回一个 <code>ReactComponent</code> 对象 <code>Connect</code>，<code>Connect</code> 会重新 <code>render</code> 外部传入的原组件 <code>WrappedComponent</code>，并把 <code>connect</code> 中所传入的 <code>mapStateToProps</code>, <code>mapDispatchToProps</code> 和 <code>this.props</code> 合并后结合成一个对象，通过属性的方式传给 <code>WrappedComponent</code>，这才是最终的渲染结果。</p><h2 id="包装组件"><a href="#包装组件" class="headerlink" title="包装组件"></a>包装组件</h2><p>在日常开发中我们所接触到的大多数的高阶组件都是通过修改 props 部分来对输入的组件进行相对增强的。但其实高阶组件还有其他的方式来增强组件，比如我们可以通过在 <code>render</code> 函数中的 <code>JSX</code> 引入其他元素，甚至将多个 <code>react</code> 组件合并起来，来获得更骚气的样式或方法，例如我们可以给组件增加 <code>style</code> 来改变组件样式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">styleHOC</span> = (<span class="params">WrappedComponent, style</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">class</span> <span class="title class_">HOCComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;style&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">WrappedComponent</span> &#123;<span class="attr">...this.props</span>&#125; /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>当我们想改变组件的样式的时候，我们就可以直接调用这个函数，比如这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> style = &#123;</span><br><span class="line">  background-<span class="attr">color</span>: #f1fafa;</span><br><span class="line">  font-<span class="attr">family</span>: <span class="string">&quot;微软雅黑&quot;</span>;</span><br><span class="line">  font-<span class="attr">size</span>: 20px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">BeautifulComponent</span> = <span class="title function_">styleHOC</span>(uglyComponent, style)</span><br></pre></td></tr></table></figure><h2 id="继承方式的高阶组件"><a href="#继承方式的高阶组件" class="headerlink" title="继承方式的高阶组件"></a>继承方式的高阶组件</h2><p>前面我们讨论了代理方式实现的高阶组件以及它们的主要使用方式，现在我们继续来讨论一下以继承方式实现的高阶组件。</p><p>。继承方式的高阶组件通过继承来关联作为参数传入的组件和返回的组件，比如传入的组件参数是 <code>OldComponent</code>,那函数所返回的组件就直接继承于 <code>OldComponemt</code>。</p><p>码界有句老话说的好：组合优于继承。在高阶组件里也不例外。<br>继承方式的高阶组件相对于代理方式的高阶组件有很多不足之处，比如输入的组件与输出的组件共有一个生命周期等，因此通常我们接触到的高阶组件大多是代理方式实现的高阶组件，也推荐大家首先考虑以代理方式来实现高阶组件。但我们还是需要去了解并学习它，毕竟它也是有可取之处的，比如在操作生命周期函数上它还是具有其优越性的。</p><h2 id="操作生命周期函数"><a href="#操作生命周期函数" class="headerlink" title="操作生命周期函数"></a>操作生命周期函数</h2><p>说继承方式的高阶组件在操纵生命周期函数上有其优越性其实不够说明它在这个领域的地位，更准确地表达是：操作生命周期函数是继承方式的高阶组件所特有的功能。这是由于继承方式的高阶组件返回的新组件继承于作为参数传入的组件，两个组件的生命周期是共用的，因此可以重新定义组件的生命周期函数并作用于新组件。而代理方式的高阶组件作为参数输入的组件与输出的组件完全是两个生命周期，因此改变生命周期函数也就无从说起了。</p><p>例如我们可以定义一个让参数组件只有在用户登录时才显示的高阶组件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">shouldLoggedInHOC</span> = (<span class="params">WrappedComponent</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">class</span> <span class="title class_">MyComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">WrappedComponent</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">loggedIn</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">super</span>.<span class="title function_">render</span>();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="操纵-Prop"><a href="#操纵-Prop" class="headerlink" title="操纵 Prop"></a>操纵 Prop</h2><p>除了操作生命周期函数外，继承方式的高阶函数也能对 <code>Prop</code> 进行操作，但总的难说贼麻烦，当然也有简单的方式，比如这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">removeProps</span>(<span class="params">WrappedComponent</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">class</span> <span class="title class_">NewComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">WrappedComponent</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; user, ...otherProps &#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">props</span> = otherProps;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">super</span>.<span class="title function_">render</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然这样看起来很简单，但我们直接修改了 <code>this.props</code>，这不是一个好的实践，可能会产生不可预料的后果，更好的操作办法是这样的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">removeProps</span>(<span class="params">WrappedComponent</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">class</span> <span class="title class_">NewComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">WrappedComponent</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> element = <span class="variable language_">super</span>.<span class="title function_">render</span>();</span><br><span class="line">      <span class="keyword">const</span> &#123; user, ...otherProps &#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">props</span> = otherProps;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">React</span>.<span class="title function_">cloneElement</span>(element, <span class="variable language_">this</span>.<span class="property">props</span>, element.<span class="property">props</span>.<span class="property">children</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以通过 <code>React.cloneElement</code> 来传入新的 <code>props</code>，让这些产生的组件重新渲染一次。但虽然这种方式可以解决直接修改 <code>this.props</code> 所带来的问题，但实现起来贼麻烦，唯一用得上的就是高阶组件需要根据参数组件 <code>WrappedComponent</code> 渲染结果来决定如何修改 <code>props</code> 时用得上，其他的时候显然使用代理模式更便捷清晰。</p><h2 id="高阶组件命名"><a href="#高阶组件命名" class="headerlink" title="高阶组件命名"></a>高阶组件命名</h2><p>用 <code>HOC</code> 包裹了一个组件会使它失去原本 <code>WrappedComponent</code> 的名字，可能会影响开发和 <code>debug</code>。</p><p>因此我们通常会用 <code>WrappedComponent</code> 的名字加上一些 前缀作为 <code>HOC</code> 的名字。我们来看看 <code>React-Redux</code> 是怎么做的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getDisplayName</span>(<span class="params">WrappedComponent</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">WrappedComponent</span>.<span class="property">displayName</span> ||</span><br><span class="line">         <span class="title class_">WrappedComponent</span>.<span class="property">name</span> ||</span><br><span class="line">         ‘<span class="title class_">Component</span>’</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable constant_">HOC</span>.<span class="property">displayName</span> = <span class="string">`HOC(<span class="subst">$&#123;getDisplayName(WrappedComponent)&#125;</span>)`</span></span><br><span class="line"><span class="comment">//或</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HOC</span> <span class="keyword">extends</span> ... &#123;</span><br><span class="line">  <span class="keyword">static</span> displayName = <span class="string">`HOC(<span class="subst">$&#123;getDisplayName(WrappedComponent)&#125;</span>)`</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上我们不用自己来写 <code>getDisplayName</code> 这个函数，<code>recompose</code> 提供了这个函数，我们只要使用即可。</p><h2 id="结尾语"><a href="#结尾语" class="headerlink" title="结尾语"></a>结尾语</h2><p>我们其他要注意的就是官方文档所说的几个约定与相关规范，在此我就不一一赘述了，感兴趣的可以自己去看看。最后很感谢能看到这里的朋友，因为水平有限，如果有错误敬请指正，十分感激！</p>]]></content>
      
      
      <categories>
          
          <category> Posts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> # </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redux源码阅读</title>
      <link href="/2022/11/15/Redux%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
      <url>/2022/11/15/Redux%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>作为 React 全家桶的一份子，<code>MVVM</code>中的<code>VM</code>，<code>Redux</code>为<code>react</code>提供了严谨周密的状态管理。但<code>Redux</code>本身是有点难度的，虽然学习了<code>React</code>也有一段时间了，自我感觉算是入了门，也知道<code>redux</code>的大概流程。但其背后诸如<code>createstore</code>,<code>applymiddleware</code>等<code>API</code>背后到底发生了什么事情，我其实还是不怎么了解的，因此最近花了几天时间阅读了<code>Redux</code>的源码，写下文章纪录一下自己看源码的一些理解。(此文章会随着自己对<code>redux</code>的理解的加深持续更新改进)</p><h2 id="一、源码结构（redux4-0-版本）"><a href="#一、源码结构（redux4-0-版本）" class="headerlink" title="一、源码结构（redux4.0 版本）"></a>一、源码结构（redux4.0 版本）</h2><p><code>Redux</code>是出了名的短小精悍（恩，这个形容很贴切），只有 2kb 大小，且没有任何依赖。它将所有的脏活累活都交给了中间件去处理，自己保持着很好的纯洁性。再加上<code>redux</code>作者在<code>redux</code>的源码上，也附加了大量的注释，因此<code>redux</code>的源码读起来还是不算难的。</p><p>先来看看<code>redux</code>的源码结构，也就是<code>src</code>目录下的代码：</p><p><img src="https://jszyy-pan.oss-cn-shanghai.aliyuncs.com/images-blog/read_redux/img01.png" alt="src目录"></p><p>其中<code>utils</code>是工具函数，主要是作为辅助几个核心<code>API</code>，因此不作讨论。<br>（注：由于篇幅的问题，下面代码很多都删除了官方注释，和较长的 warn）</p><h2 id="二、具体组成"><a href="#二、具体组成" class="headerlink" title="二、具体组成"></a>二、具体组成</h2><p><code>index.js</code>是<code>redux</code>的入口函数具体代码如下：</p><h3 id="2-1-index-js"><a href="#2-1-index-js" class="headerlink" title="2.1 index.js"></a>2.1 index.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> createStore <span class="keyword">from</span> <span class="string">&#x27;./createStore&#x27;</span></span><br><span class="line"><span class="keyword">import</span> combineReducers <span class="keyword">from</span> <span class="string">&#x27;./combineReducers&#x27;</span></span><br><span class="line"><span class="keyword">import</span> bindActionCreators <span class="keyword">from</span> <span class="string">&#x27;./bindActionCreators&#x27;</span></span><br><span class="line"><span class="keyword">import</span> applyMiddleware <span class="keyword">from</span> <span class="string">&#x27;./applyMiddleware&#x27;</span></span><br><span class="line"><span class="keyword">import</span> compose <span class="keyword">from</span> <span class="string">&#x27;./compose&#x27;</span></span><br><span class="line"><span class="keyword">import</span> warning <span class="keyword">from</span> <span class="string">&#x27;./utils/warning&#x27;</span></span><br><span class="line"><span class="keyword">import</span> __DO_NOT_USE__ActionTypes <span class="keyword">from</span> <span class="string">&#x27;./utils/actionTypes&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isCrushed</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">if</span> (</span><br><span class="line">  process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&#x27;production&#x27;</span> &amp;&amp;</span><br><span class="line">  <span class="keyword">typeof</span> isCrushed.<span class="property">name</span> === <span class="string">&#x27;string&#x27;</span> &amp;&amp;</span><br><span class="line">  isCrushed.<span class="property">name</span> !== <span class="string">&#x27;isCrushed&#x27;</span></span><br><span class="line">) &#123;</span><br><span class="line">  <span class="title function_">warning</span>(</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  createStore,</span><br><span class="line">  combineReducers,</span><br><span class="line">  bindActionCreators,</span><br><span class="line">  applyMiddleware,</span><br><span class="line">  compose,</span><br><span class="line">  __DO_NOT_USE__ActionTypes</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">其中isCrushed函数是用于验证在非生产环境下 <span class="title class_">Redux</span> 是否被压缩，如果被压缩就会给开发者一个 warn 的提示。</span><br><span class="line"></span><br><span class="line">在最后index.<span class="property">js</span> 会暴露 createStore, combineReducers, bindActionCreators, applyMiddleware, compose 这几个redux最主要的<span class="variable constant_">API</span>以供大家使用。</span><br></pre></td></tr></table></figure><h3 id="2-2-creatStore"><a href="#2-2-creatStore" class="headerlink" title="2.2 creatStore"></a>2.2 creatStore</h3><p><code>createStore</code>函数接受三个参数：</p><ul><li><code>reducer</code>：是一个函数，返回下一个状态，接受两个参数：当前状态 和 触发的 <code>action</code>；</li><li><code>preloadedState</code>：初始状态对象，可以很随意指定，比如服务端渲染的初始状态，但是如果使用<code>combineReducers</code>来生成 <code>reducer</code>，那必须保持状态对象的 <code>key</code> 和 <code>combineReducers</code> 中的 <code>key</code> 相对应；</li><li><code>enhancer</code>：是<code>store</code>的增强器函数，可以指定为中间件，持久化等，但是这个函数只能用 <code>Redux</code> 提供的 <code>applyMiddleware</code> 函数来进行生成</li></ul><p>下面就是 <code>creactStore</code> 的源码，由于整体源码过长，且 <code>subscribe</code> 和 <code>dispatch</code> 函数也挺长的，所以就将 <code>subscribe</code> 和 <code>dispatch</code> 单独提出来细讲</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> $$observable <span class="keyword">from</span> <span class="string">&#x27;symbol-observable&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ActionTypes</span> <span class="keyword">from</span> <span class="string">&#x27;./utils/actionTypes&#x27;</span></span><br><span class="line"><span class="keyword">import</span> isPlainObject <span class="keyword">from</span> <span class="string">&#x27;./utils/isPlainObject&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">createStore</span>(<span class="params">reducer, preloadedState, enhancer</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> preloadedState === <span class="string">&#x27;function&#x27;</span> &amp;&amp; <span class="keyword">typeof</span> enhancer === <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">    enhancer = preloadedState</span><br><span class="line">    preloadedState = <span class="literal">undefined</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// enhancer应该为一个函数</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> enhancer !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> enhancer !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Expected the enhancer to be a function.&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//enhancer 接受 createStore 作为参数，对  createStore 的能力进行增强，并返回增强后的  createStore 。</span></span><br><span class="line">    <span class="comment">//  然后再将  reducer 和  preloadedState 作为参数传给增强后的  createStore ，最终得到生成的 store</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">enhancer</span>(createStore)(reducer, preloadedState)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// reducer必须是函数</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> reducer !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Expected the reducer to be a function.&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 初始化参数</span></span><br><span class="line">  <span class="keyword">let</span> currentReducer = reducer   <span class="comment">// 当前整个reducer</span></span><br><span class="line">  <span class="keyword">let</span> currentState = preloadedState   <span class="comment">// 当前的state,也就是getState返回的值</span></span><br><span class="line">  <span class="keyword">let</span> currentListeners = []  <span class="comment">// 当前的订阅store的监听器</span></span><br><span class="line">  <span class="keyword">let</span> nextListeners = currentListeners <span class="comment">// 下一次的订阅</span></span><br><span class="line">  <span class="keyword">let</span> isDispatching = <span class="literal">false</span> <span class="comment">// 是否处于 dispatch action 状态中, 默认为false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 这个函数用于确保currentListeners 和 nextListeners 是不同的引用</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">ensureCanMutateNextListeners</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nextListeners === currentListeners) &#123;</span><br><span class="line">      nextListeners = currentListeners.<span class="title function_">slice</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回state</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">getState</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isDispatching) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(</span><br><span class="line">        ......</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> currentState</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 添加订阅</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">subscribe</span>(<span class="params">listener</span>) &#123;</span><br><span class="line">  ......</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 分发action</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">dispatch</span>(<span class="params">action</span>) &#123;</span><br><span class="line">    ......</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//这个函数主要用于 reducer 的热替换，用的少</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">replaceReducer</span>(<span class="params">nextReducer</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> nextReducer !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Expected the nextReducer to be a function.&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 替换reducer</span></span><br><span class="line">    currentReducer = nextReducer</span><br><span class="line">    <span class="comment">// 重新进行初始化</span></span><br><span class="line">    <span class="title function_">dispatch</span>(&#123; <span class="attr">type</span>: <span class="title class_">ActionTypes</span>.<span class="property">REPLACE</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 没有研究，暂且放着，它是不直接暴露给开发者的，提供了给其他一些像观察者模式库的交互操作。</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">observable</span>(<span class="params"></span>) &#123;</span><br><span class="line">    ......</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建一个store时的默认state</span></span><br><span class="line">  <span class="comment">// 用于填充初始的状态树</span></span><br><span class="line">  <span class="title function_">dispatch</span>(&#123; <span class="attr">type</span>: <span class="title class_">ActionTypes</span>.<span class="property">INIT</span> &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    dispatch,</span><br><span class="line">    subscribe,</span><br><span class="line">    getState,</span><br><span class="line">    replaceReducer,</span><br><span class="line">    [$$observable]: observable</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>subscribe</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">subscribe</span>(<span class="params">listener</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> listener !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Expected the listener to be a function.&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isDispatching) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(</span><br><span class="line">        ......</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> isSubscribed = <span class="literal">true</span></span><br><span class="line">    <span class="comment">// 如果 nextListeners 和 currentListeners 是一个引用，重新复制一个新的</span></span><br><span class="line">    <span class="title function_">ensureCanMutateNextListeners</span>()</span><br><span class="line">    nextListeners.<span class="title function_">push</span>(listener)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">unsubscribe</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!isSubscribed) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (isDispatching) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(</span><br><span class="line">          .......</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      isSubscribed = <span class="literal">false</span></span><br><span class="line">      <span class="title function_">ensureCanMutateNextListeners</span>()</span><br><span class="line">      <span class="keyword">const</span> index = nextListeners.<span class="title function_">indexOf</span>(listener)</span><br><span class="line">      <span class="comment">// 从nextListeners里面删除，会在下次dispatch生效</span></span><br><span class="line">      nextListeners.<span class="title function_">splice</span>(index, <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>有时候有些人会觉得 <code>store.subscribe</code> 用的很少,其实不然，是 <code>react-redux</code> 隐式的为我们帮我们完成了这方面的工作。<code>subscribe</code> 函数可以给 <code>store</code> 的状态添加订阅监听，一旦我们调用了 <code>dispatch</code> 来分发 <code>action</code> ，所有的监听函数就会执行。而 <code>nextListeners</code> 就是储存当前监听函数的列表，当调用 <code>subscribe</code>，传入一个函数作为参数时，就会给 <code>nextListeners</code> 列表 <code>push</code> 这个函数。同时调用 <code>subscribe</code> 函数会返回一个 <code>unsubscribe</code> 函数，用来解绑当前传入的函数，同时在 <code>subscribe</code> 函数定义了一个 <code>isSubscribed</code> 标志变量来判断当前的订阅是否已经被解绑，解绑的操作就是从 <code>nextListeners</code> 列表中删除当前的监听函数。</p><p>dispatch</p><p><code>dispatch</code> 是 <code>redux</code> 中一个非常核心的方法，也是我们在日常开发中最常用的方法之一。<code>dispatch</code> 函数是用来触发状态改变的，他接受一个 <code>action</code> 对象作为参数，然后 <code>reducer</code> 就可以根据 <code>action</code> 的属性以及当前 <code>store</code> 的状态，来生成一个新的状态，从而改变 <code>store</code> 的状态；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">dispatch</span>(<span class="params">action</span>) &#123;</span><br><span class="line">    <span class="comment">// action 必须是一个对象</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_">isPlainObject</span>(action)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(</span><br><span class="line">        ......</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// type必须要有属性，不能是undefined</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> action.<span class="property">type</span> === <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(</span><br><span class="line">        ......</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 禁止在reducers中进行dispatch，因为这样做可能导致分发死循环，同时也增加了数据流动的复杂度</span></span><br><span class="line">    <span class="keyword">if</span> (isDispatching) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Reducers may not dispatch actions.&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      isDispatching = <span class="literal">true</span></span><br><span class="line">    <span class="comment">// 将当前的状态和 action 传给当前的reducer，用于生成最新的 state</span></span><br><span class="line">      currentState = <span class="title function_">currentReducer</span>(currentState, action)</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="comment">// 派发完毕</span></span><br><span class="line">      isDispatching = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将nextListeners交给listeners</span></span><br><span class="line">    <span class="keyword">const</span> listeners = (currentListeners = nextListeners)</span><br><span class="line">    <span class="comment">// 在得到新的状态后，依次调用所有的监听器，通知状态的变更</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; listeners.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> listener = listeners[i]</span><br><span class="line">      <span class="title function_">listener</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> action</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-compose-js"><a href="#2-3-compose-js" class="headerlink" title="2.3 compose.js"></a>2.3 compose.js</h3><p><code>compose</code> 可以接受一组函数参数，从右到左来组合多个函数，然后返回一个组合函数。它的源码并不长，但设计的十分巧妙：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">compose</span>(<span class="params">...funcs</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (funcs.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">arg</span>) =&gt;</span> arg;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (funcs.<span class="property">length</span> === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> funcs[<span class="number">0</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> funcs.<span class="title function_">reduce</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> <span class="title function_">a</span>(<span class="title function_">b</span>(...args)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>compose</code> 函数的作用其实其源码的注释里讲的很清楚了，比如下面这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">compose</span>(funcA, funcB, funcC)</span><br></pre></td></tr></table></figure><p>其实它与这样是等价的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">compose</span>(<span class="title function_">funcA</span>(<span class="title function_">funcB</span>(<span class="title function_">funcC</span>())))</span><br></pre></td></tr></table></figure><p><code>compose</code> 做的只是让我们在写深度嵌套的函数时，避免了代码的向右偏移。</p><h3 id="2-4-applyMiddleware"><a href="#2-4-applyMiddleware" class="headerlink" title="2.4 applyMiddleware"></a>2.4 applyMiddleware</h3><p><code>applyMiddleware</code> 也是 <code>redux</code> 中非常重要的一个函数，设计的也非常巧妙，让人叹为观止。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">applyMiddleware</span>(<span class="params">...middlewares</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">createStore</span>) =&gt;</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 利用传入的createStore和reducer和创建一个store</span></span><br><span class="line">    <span class="keyword">const</span> store = <span class="title function_">createStore</span>(...args);</span><br><span class="line">    <span class="keyword">let</span> <span class="title function_">dispatch</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(</span><br><span class="line">        <span class="string">`Dispatching while constructing your middleware is not allowed. `</span> +</span><br><span class="line">          <span class="string">`Other middleware would not be applied to this dispatch.`</span></span><br><span class="line">      );</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> middlewareAPI = &#123;</span><br><span class="line">      <span class="attr">getState</span>: store.<span class="property">getState</span>,</span><br><span class="line">      <span class="attr">dispatch</span>: <span class="function">(<span class="params">...args</span>) =&gt;</span> <span class="title function_">dispatch</span>(...args),</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 让每个 middleware 带着 middlewareAPI 这个参数分别执行一遍</span></span><br><span class="line">    <span class="keyword">const</span> chain = middlewares.<span class="title function_">map</span>(<span class="function">(<span class="params">middleware</span>) =&gt;</span> <span class="title function_">middleware</span>(middlewareAPI));</span><br><span class="line">    dispatch = <span class="title function_">compose</span>(...chain)(store.<span class="property">dispatch</span>);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      ...store,</span><br><span class="line">      dispatch,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上面的代码，我们可以看出 <code>applyMiddleware</code> 是个三级柯里化的函数。它将陆续的获得三个参数：第一个是 <code>middlewares</code> 数组，第二个是 <code>Redux</code> 原生的 <code>createStore</code>，最后一个是 <code>reducer</code>，也就是上面的<code>…args</code>；</p><p><code>applyMiddleware</code> 利用 <code>createStore</code> 和 <code>reducer</code> 创建了一个 <code>store</code>，然后 <code>store</code> 的 <code>getState</code> 方法和 <code>dispatch</code> 方法又分别被直接和间接地赋值给 <code>middlewareAPI</code> 变量。</p><p>其中这一句我感觉是最核心的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dispatch = <span class="title function_">compose</span>(...chain)(store.<span class="property">dispatch</span>)</span><br></pre></td></tr></table></figure><p>我特意将 <code>compose</code> 与 <code>applyMiddleware</code> 放在一块，就是为了解释这段代码。因此上面那段核心代码中，本质上就是这样的(假设<code>…chain</code>有三个函数)：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dispatch = <span class="title function_">f1</span>(<span class="title function_">f2</span>(<span class="title function_">f3</span>(store.<span class="property">dispatch</span>))))</span><br></pre></td></tr></table></figure><h3 id="2-5-combineReducers"><a href="#2-5-combineReducers" class="headerlink" title="2.5 combineReducers"></a>2.5 combineReducers</h3><p><code>combineReducers</code> 这个辅助函数的作用就是，将一个由多个不同 <code>reducer</code> 函数作为 <code>value</code> 的 <code>object</code> 合并成一个最终的 <code>reducer</code> 函数，然后我们就可以对这个 <code>reducer</code> 调用 <code>createStore</code> 方法了。这在 <code>createStore</code> 的源码的注释中也有提到过。</p><p>并且合并后的 <code>reducer</code> 可以调用各个子 <code>reducer</code>，并把它们返回的结果合并成一个 <code>state</code> 对象。 由 <code>combineReducers()</code> 返回的 <code>state</code> 对象，会将传入的每个 <code>reducer</code> 返回的 <code>state</code> 按其传递给 <code>combineReducers()</code> 时对应的 key 进行命名。</p><p>下面我们来看源码，下面的源码删除了一些的检查判断，只保留最主要的源码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">combineReducers</span>(<span class="params">reducers</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> reducerKeys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(reducers)</span><br><span class="line">  <span class="comment">// 有效的 reducer 列表</span></span><br><span class="line">  <span class="keyword">const</span> finalReducers = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; reducerKeys.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> key = reducerKeys[i]</span><br><span class="line">  <span class="keyword">const</span> finalReducerKeys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(finalReducers)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回最终生成的 reducer</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">combination</span>(<span class="params">state = &#123;&#125;, action</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> hasChanged = <span class="literal">false</span></span><br><span class="line">    <span class="comment">//定义新的nextState</span></span><br><span class="line">    <span class="keyword">const</span> nextState = &#123;&#125;</span><br><span class="line">    <span class="comment">// 1，遍历reducers对象中的有效key，</span></span><br><span class="line">    <span class="comment">// 2，执行该key对应的value函数，即子reducer函数，并得到对应的state对象</span></span><br><span class="line">    <span class="comment">// 3，将新的子state挂到新的nextState对象上，而key不变</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; finalReducerKeys.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> key = finalReducerKeys[i]</span><br><span class="line">      <span class="keyword">const</span> reducer = finalReducers[key]</span><br><span class="line">      <span class="keyword">const</span> previousStateForKey = state[key]</span><br><span class="line">      <span class="keyword">const</span> nextStateForKey = <span class="title function_">reducer</span>(previousStateForKey, action)</span><br><span class="line">      nextState[key] = nextStateForKey</span><br><span class="line">      hasChanged = hasChanged || nextStateForKey !== previousStateForKey</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="comment">// 遍历一遍看是否发生改变，发生改变了返回新的state，否则返回原先的state</span></span><br><span class="line">    <span class="keyword">return</span> hasChanged ? nextState : state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-6-bindActionCreators"><a href="#2-6-bindActionCreators" class="headerlink" title="2.6 bindActionCreators"></a>2.6 bindActionCreators</h3><p><code>bindActionCreators</code> 可以把一个 <code>value</code> 为不同 <code>action creator</code> 的对象，转成拥有同名 <code>key</code> 的对象。同时使用 <code>dispatch</code> 对每个 <code>action creator</code> 进行包装，以便可以直接调用它们。<br><code>bindActionCreators</code> 函数并不常用（反正我还没有怎么用过），惟一会使用到 <code>bindActionCreators</code> 的场景就是我们需要把 <code>action creator</code> 往下传到一个组件上，却不想让这个组件觉察到 <code>Redux</code> 的存在，并且不希望把 <code>dispatch</code> 或 <code>Redux store</code> 传给它。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 核心代码，并通过apply将this绑定起来</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bindActionCreator</span>(<span class="params">actionCreator, dispatch</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">dispatch</span>(actionCreator.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这个函数只是把actionCreators这个对象里面包含的每一个actionCreator按照原来的key的方式全部都封装了一遍，核心代码还是上面的</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">bindActionCreators</span>(<span class="params">actionCreators, dispatch</span>) &#123;</span><br><span class="line">  <span class="comment">// 如果actionCreators是一个函数，则说明只有一个actionCreator，就直接调用bindActionCreator</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> actionCreators === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">bindActionCreator</span>(actionCreators, dispatch)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果是actionCreator是对象或者null的话，就会报错</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> actionCreators !== <span class="string">&#x27;object&#x27;</span> || actionCreators === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(</span><br><span class="line">    ... ...</span><br><span class="line">  &#125;</span><br><span class="line"> <span class="comment">// 遍历对象，然后对每个遍历项的 actionCreator 生成函数，将函数按照原来的 key 值放到一个对象中，最后返回这个对象</span></span><br><span class="line">  <span class="keyword">const</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(actionCreators)</span><br><span class="line">  <span class="keyword">const</span> boundActionCreators = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; keys.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> key = keys[i]</span><br><span class="line">    <span class="keyword">const</span> actionCreator = actionCreators[key]</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> actionCreator === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">      boundActionCreators[key] = <span class="title function_">bindActionCreator</span>(actionCreator, dispatch)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> boundActionCreators</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="小节"><a href="#小节" class="headerlink" title="小节"></a>小节</h2><p>看一遍 <code>redux</code>，感觉设计十分巧秒，不愧是大佬的作品。这次看代码只是初看，往后随着自己学习的不断深入，还需多加研究，绝对还能得到更多的体会。</p>]]></content>
      
      
      <categories>
          
          <category> Posts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> # </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode配合ESLint自动修复格式化(React)</title>
      <link href="/2022/11/15/VSCode%E9%85%8D%E5%90%88ESLint%E8%87%AA%E5%8A%A8%E4%BF%AE%E5%A4%8D%E6%A0%BC%E5%BC%8F%E5%8C%96(React)/"/>
      <url>/2022/11/15/VSCode%E9%85%8D%E5%90%88ESLint%E8%87%AA%E5%8A%A8%E4%BF%AE%E5%A4%8D%E6%A0%BC%E5%BC%8F%E5%8C%96(React)/</url>
      
        <content type="html"><![CDATA[<h2 id="Eslint介绍"><a href="#Eslint介绍" class="headerlink" title="Eslint介绍"></a>Eslint介绍</h2><p>Eslint 是一个JavaScript验证工具,有了它可以让你的编辑器像ide一样进行一些静态的错误提示功能.</p><h2 id="安装eslint"><a href="#安装eslint" class="headerlink" title="安装eslint"></a>安装eslint</h2><p><code>$ npm install eslint -g</code></p><p>项目需要安装的插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;babel-eslint&quot;: &quot;^8.0.3&quot;,</span><br><span class="line">&quot;eslint&quot;: &quot;^4.13.1&quot;,</span><br><span class="line">&quot;eslint-plugin-react&quot;: &quot;^7.5.1&quot;,</span><br></pre></td></tr></table></figure><h2 id="配置详情"><a href="#配置详情" class="headerlink" title="配置详情"></a>配置详情</h2><p>下面的配置涵盖了开发者所需要的绝大部分信息，rules中的值0、1、2分别表示不开启检查、警告、错误。你可以看到下面有些是0，如果有需要开启检查，可以自己修改为1或者2。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  &quot;env&quot;: &#123;</span><br><span class="line">    &quot;browser&quot;: true,</span><br><span class="line">    &quot;commonjs&quot;: true,</span><br><span class="line">    &quot;es6&quot;: true</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;extends&quot;: &quot;eslint:recommended&quot;,</span><br><span class="line">  &quot;globals&quot;: &#123;</span><br><span class="line">    &quot;$&quot;: true,</span><br><span class="line">    &quot;process&quot;: true,</span><br><span class="line">    &quot;__dirname&quot;: true</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;parser&quot;: &quot;babel-eslint&quot;,</span><br><span class="line">  &quot;parserOptions&quot;: &#123;</span><br><span class="line">    &quot;ecmaFeatures&quot;: &#123;</span><br><span class="line">      &quot;experimentalObjectRestSpread&quot;: true,</span><br><span class="line">      &quot;jsx&quot;: true</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;sourceType&quot;: &quot;module&quot;,</span><br><span class="line">    &quot;ecmaVersion&quot;: 7</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;plugins&quot;: [</span><br><span class="line">    &quot;react&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;rules&quot;: &#123;</span><br><span class="line">    &quot;quotes&quot;: [2, &quot;single&quot;], //单引号</span><br><span class="line">    &quot;no-console&quot;: 0, //不禁用console</span><br><span class="line">    &quot;no-debugger&quot;: 2, //禁用debugger</span><br><span class="line">    &quot;no-var&quot;: 0, //对var警告</span><br><span class="line">    &quot;semi&quot;: 0, //不强制使用分号</span><br><span class="line">    &quot;no-irregular-whitespace&quot;: 0, //不规则的空白不允许</span><br><span class="line">    &quot;no-trailing-spaces&quot;: 1, //一行结束后面有空格就发出警告</span><br><span class="line">    &quot;eol-last&quot;: 0, //文件以单一的换行符结束</span><br><span class="line">    &quot;no-unused-vars&quot;: [2, &#123;&quot;vars&quot;: &quot;all&quot;, &quot;args&quot;: &quot;after-used&quot;&#125;], //不能有声明后未被使用的变量或参数</span><br><span class="line">    &quot;no-underscore-dangle&quot;: 0, //标识符不能以_开头或结尾</span><br><span class="line">    &quot;no-alert&quot;: 2, //禁止使用alert confirm prompt</span><br><span class="line">    &quot;no-lone-blocks&quot;: 0, //禁止不必要的嵌套块</span><br><span class="line">    &quot;no-class-assign&quot;: 2, //禁止给类赋值</span><br><span class="line">    &quot;no-cond-assign&quot;: 2, //禁止在条件表达式中使用赋值语句</span><br><span class="line">    &quot;no-const-assign&quot;: 2, //禁止修改const声明的变量</span><br><span class="line">    &quot;no-delete-var&quot;: 2, //不能对var声明的变量使用delete操作符</span><br><span class="line">    &quot;no-dupe-keys&quot;: 2, //在创建对象字面量时不允许键重复</span><br><span class="line">    &quot;no-duplicate-case&quot;: 2, //switch中的case标签不能重复</span><br><span class="line">    &quot;no-dupe-args&quot;: 2, //函数参数不能重复</span><br><span class="line">    &quot;no-empty&quot;: 2, //块语句中的内容不能为空</span><br><span class="line">    &quot;no-func-assign&quot;: 2, //禁止重复的函数声明</span><br><span class="line">    &quot;no-invalid-this&quot;: 0, //禁止无效的this，只能用在构造器，类，对象字面量</span><br><span class="line">    &quot;no-redeclare&quot;: 2, //禁止重复声明变量</span><br><span class="line">    &quot;no-spaced-func&quot;: 2, //函数调用时 函数名与()之间不能有空格</span><br><span class="line">    &quot;no-this-before-super&quot;: 0, //在调用super()之前不能使用this或super</span><br><span class="line">    &quot;no-undef&quot;: 2, //不能有未定义的变量</span><br><span class="line">    &quot;no-use-before-define&quot;: 2, //未定义前不能使用</span><br><span class="line">    &quot;camelcase&quot;: 0, //强制驼峰法命名</span><br><span class="line">    &quot;jsx-quotes&quot;: [2, &quot;prefer-double&quot;], //强制在JSX属性（jsx-quotes）中一致使用双引号</span><br><span class="line">    &quot;react/display-name&quot;: 0, //防止在React组件定义中丢失displayName</span><br><span class="line">    &quot;react/forbid-prop-types&quot;: [2, &#123;&quot;forbid&quot;: [&quot;any&quot;]&#125;], //禁止某些propTypes</span><br><span class="line">    &quot;react/jsx-boolean-value&quot;: 2, //在JSX中强制布尔属性符号</span><br><span class="line">    &quot;react/jsx-closing-bracket-location&quot;: 1, //在JSX中验证右括号位置</span><br><span class="line">    &quot;react/jsx-curly-spacing&quot;: [2, &#123;&quot;when&quot;: &quot;never&quot;, &quot;children&quot;: true&#125;], //在JSX属性和表达式中加强或禁止大括号内的空格。</span><br><span class="line">    &quot;react/jsx-indent-props&quot;: [2, 4], //验证JSX中的props缩进</span><br><span class="line">    &quot;react/jsx-key&quot;: 2, //在数组或迭代器中验证JSX具有key属性</span><br><span class="line">    &quot;react/jsx-max-props-per-line&quot;: [1, &#123;&quot;maximum&quot;: 1&#125;], // 限制JSX中单行上的props的最大数量</span><br><span class="line">    &quot;react/jsx-no-bind&quot;: 0, //JSX中不允许使用箭头函数和bind</span><br><span class="line">    &quot;react/jsx-no-duplicate-props&quot;: 2, //防止在JSX中重复的props</span><br><span class="line">    &quot;react/jsx-no-literals&quot;: 0, //防止使用未包装的JSX字符串</span><br><span class="line">    &quot;react/jsx-no-undef&quot;: 1, //在JSX中禁止未声明的变量</span><br><span class="line">    &quot;react/jsx-pascal-case&quot;: 0, //为用户定义的JSX组件强制使用PascalCase</span><br><span class="line">    &quot;react/jsx-sort-props&quot;: 2, //强化props按字母排序</span><br><span class="line">    &quot;react/jsx-uses-react&quot;: 1, //防止反应被错误地标记为未使用</span><br><span class="line">    &quot;react/jsx-uses-vars&quot;: 2, //防止在JSX中使用的变量被错误地标记为未使用</span><br><span class="line">    &quot;react/no-danger&quot;: 0, //防止使用危险的JSX属性</span><br><span class="line">    &quot;react/no-did-mount-set-state&quot;: 0, //防止在componentDidMount中使用setState</span><br><span class="line">    &quot;react/no-did-update-set-state&quot;: 1, //防止在componentDidUpdate中使用setState</span><br><span class="line">    &quot;react/no-direct-mutation-state&quot;: 2, //防止this.state的直接变异</span><br><span class="line">    &quot;react/no-multi-comp&quot;: 2, //防止每个文件有多个组件定义</span><br><span class="line">    &quot;react/no-set-state&quot;: 0, //防止使用setState</span><br><span class="line">    &quot;react/no-unknown-property&quot;: 2, //防止使用未知的DOM属性</span><br><span class="line">    &quot;react/prefer-es6-class&quot;: 2, //为React组件强制执行ES5或ES6类</span><br><span class="line">    &quot;react/prop-types&quot;: 0, //防止在React组件定义中丢失props验证</span><br><span class="line">    &quot;react/react-in-jsx-scope&quot;: 2, //使用JSX时防止丢失React</span><br><span class="line">    &quot;react/self-closing-comp&quot;: 0, //防止没有children的组件的额外结束标签</span><br><span class="line">    &quot;react/sort-comp&quot;: 2, //强制组件方法顺序</span><br><span class="line">    &quot;no-extra-boolean-cast&quot;: 0, //禁止不必要的bool转换</span><br><span class="line">    &quot;react/no-array-index-key&quot;: 0, //防止在数组中遍历中使用数组key做索引</span><br><span class="line">    &quot;react/no-deprecated&quot;: 1, //不使用弃用的方法</span><br><span class="line">    &quot;react/jsx-equals-spacing&quot;: 2, //在JSX属性中强制或禁止等号周围的空格</span><br><span class="line">    &quot;no-unreachable&quot;: 1, //不能有无法执行的代码</span><br><span class="line">    &quot;comma-dangle&quot;: 2, //对象字面量项尾不能有逗号</span><br><span class="line">    &quot;no-mixed-spaces-and-tabs&quot;: 0, //禁止混用tab和空格</span><br><span class="line">    &quot;prefer-arrow-callback&quot;: 0, //比较喜欢箭头回调</span><br><span class="line">    &quot;arrow-parens&quot;: 0, //箭头函数用小括号括起来</span><br><span class="line">    &quot;arrow-spacing&quot;: 0 //=&gt;的前/后括号</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;settings&quot;: &#123;</span><br><span class="line">    &quot;import/ignore&quot;: [</span><br><span class="line">      &quot;node_modules&quot;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如果你还希望看到更多的react检查器，那就去 eslint-plugin-react 的github文档去慢慢翻译吧。</p><h2 id="某些文件关闭eslint检查"><a href="#某些文件关闭eslint检查" class="headerlink" title="某些文件关闭eslint检查"></a>某些文件关闭eslint检查</h2><p>你不总是希望所有的文件都开启eslint检查，那么，给单独的js文件关闭eslint的方式，只需要在该文件的最顶部加上一段注释。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/*eslint-disable*/</span><br><span class="line">function test() &#123;</span><br><span class="line">  return true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>给某一行js代码关闭eslint检查</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// eslint-disable-next-line</span><br><span class="line">alert(&#x27;foo&#x27;)</span><br></pre></td></tr></table></figure><p>eslint配置文件类型<br>eslint配置文件类型不只有js和json，其实包括下面这些：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.eslintrc.js</span><br><span class="line">.eslintrc.yaml</span><br><span class="line">.eslintrc.yml</span><br><span class="line">.eslintrc.json</span><br><span class="line">.eslintrc</span><br><span class="line">package.json</span><br></pre></td></tr></table></figure><h2 id="VSCode安装插件"><a href="#VSCode安装插件" class="headerlink" title="VSCode安装插件"></a>VSCode安装插件</h2><p><a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint">ESLint，VSCode代码中提示错误</a></p><p><a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode">Prettier - Code formatter,代码格式化插件，非常牛，可以自定义格式化的配置</a></p><h2 id="配置VSCode的用户配置"><a href="#配置VSCode的用户配置" class="headerlink" title="配置VSCode的用户配置"></a>配置VSCode的用户配置</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;eslint.validate&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;javascript&quot;</span>,</span><br><span class="line">    <span class="string">&quot;javascriptreact&quot;</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;language&quot;</span>: <span class="string">&quot;html&quot;</span>,</span><br><span class="line">      <span class="string">&quot;autoFix&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;language&quot;</span>: <span class="string">&quot;vue&quot;</span>,</span><br><span class="line">      <span class="string">&quot;autoFix&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// 保存自动修复</span></span><br><span class="line">  <span class="string">&quot;eslint.autoFixOnSave&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// jsx自动修复有问题，取消js的format</span></span><br><span class="line">  <span class="string">&quot;editor.formatOnSave&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// Enable/disable default JavaScript formatter (For Prettier)</span></span><br><span class="line">  <span class="string">&quot;javascript.format.enable&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">&quot;prettier.singleQuote&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 点击保存时，根据 eslint 规则自定修复，同时集成 prettier 到 eslint 中</span></span><br><span class="line">  <span class="string">&quot;prettier.eslintIntegration&quot;</span>: <span class="literal">true</span>,</span><br></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>如果需要启动ESLint的自动修复，需要在项目根目录下，或者package.json文件中配置ESLint的配置。</p><p>React项目的ESLint的校验规则：</p><h3 id="需要安装的插件"><a href="#需要安装的插件" class="headerlink" title="需要安装的插件"></a>需要安装的插件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D eslint eslint-plugin-flowtype eslint-plugin-<span class="keyword">import</span> eslint-plugin-jsx-a11y eslint-plugin-react babel-eslint prettier eslint-config-prettier eslint-config-react-app eslint-plugin-prettier</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .eslintrc.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">root</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">parserOptions</span>: &#123;</span><br><span class="line">    <span class="comment">// 检查 ES6 语法</span></span><br><span class="line">    <span class="attr">parser</span>: <span class="string">&#x27;babel-eslint&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">env</span>: &#123;</span><br><span class="line">    <span class="attr">browser</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// extending airbnb config and config derived from eslint-config-prettier</span></span><br><span class="line">  <span class="comment">// 这里是 vue</span></span><br><span class="line">  <span class="attr">extends</span>: [<span class="string">&#x27;react-app&#x27;</span>, <span class="string">&#x27;prettier&#x27;</span>],</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 选择 eslint 插件</span></span><br><span class="line">  <span class="attr">plugins</span>: [<span class="string">&quot;react&quot;</span>, <span class="string">&quot;jsx-a11y&quot;</span>, <span class="string">&quot;import&quot;</span>, <span class="string">&#x27;prettier&#x27;</span>],</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// react</span></span><br><span class="line">  <span class="comment">// extends: [&#x27;airbnb-base&#x27;, &#x27;prettier&#x27;],</span></span><br><span class="line">  <span class="comment">// plugins: [&#x27;prettier&#x27;, &#x27;react&#x27;],</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 不需要框架</span></span><br><span class="line">  <span class="comment">// extends: [&#x27;airbnb-base&#x27;, &#x27;prettier&#x27;],</span></span><br><span class="line">  <span class="comment">// plugins: [&#x27;prettier&#x27;],</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 自定义 eslint 检查规则</span></span><br><span class="line">  <span class="attr">rules</span>: &#123;</span><br><span class="line">    <span class="comment">// 自定义 prettier 规则 (实际上，可配置项非常有限)</span></span><br><span class="line">    <span class="string">&#x27;prettier/prettier&#x27;</span>: [</span><br><span class="line">      <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">singleQuote</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">trailingComma</span>: <span class="string">&#x27;all&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">camelcase</span>: <span class="string">&#x27;off&#x27;</span>, <span class="comment">// 强制驼峰法命名</span></span><br><span class="line">    <span class="string">&#x27;no-new&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="comment">// 禁止在使用new构造一个实例后不赋值</span></span><br><span class="line">    <span class="string">&#x27;space-before-function-paren&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="comment">// 函数定义时括号前面不要有空格</span></span><br><span class="line">    <span class="string">&#x27;no-plusplus&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="comment">// 禁止使用 ++， ——</span></span><br><span class="line">    <span class="string">&#x27;max-len&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="comment">// 字符串最大长度</span></span><br><span class="line">    <span class="string">&#x27;func-names&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="comment">// 函数表达式必须有名字</span></span><br><span class="line">    <span class="string">&#x27;no-param-reassign&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="comment">// 不准给函数入参赋值</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">// react 如果在项目中文件名后缀是 .js 而不是 .jsx 避免报错</span></span><br><span class="line">    <span class="comment">// &quot;react/jsx-filename-extension&quot;: [1, &#123; &quot;extensions&quot;: [&quot;.js&quot;, &quot;.jsx&quot;] &#125;],</span></span><br><span class="line">    <span class="comment">// react props validation 错误</span></span><br><span class="line">    <span class="comment">// &quot;react/prop-types&quot;: 0,</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Posts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> # </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>code-review之前端代码优化</title>
      <link href="/2022/11/15/code-review%E4%B9%8B%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96/"/>
      <url>/2022/11/15/code-review%E4%B9%8B%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>在以往团队 code-review 中发现，不同时期不同开发人员写的代码可谓五花八门。因此总结出了一些代码方面的相关规范，主要针对一些 JavaScript 进行优化，使之更加健壮，可读性更强，更以维护。</p><h2 id="if-判断的优化"><a href="#if-判断的优化" class="headerlink" title="if 判断的优化"></a>if 判断的优化</h2><p>JavaScript 条件语句在我们平时的开发中是不可避免要用到的，但是很多时候我们的代码写的并不好，一连串的 if-else 或者多重嵌套判断都会使得代码很臃肿，下面举例进行优化。</p><p>需求：现在有 4 个产品，分别是手机、电脑、电视机、游戏机，当然每个产品显示的价格不一样。</p><h5 id="1、最简单的方法：if-判断"><a href="#1、最简单的方法：if-判断" class="headerlink" title="1、最简单的方法：if 判断"></a>1、最简单的方法：if 判断</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> commodity = &#123;</span><br><span class="line">  <span class="attr">phone</span>: <span class="string">&#x27;手机&#x27;</span>,</span><br><span class="line">  <span class="attr">computer</span>: <span class="string">&#x27;电脑&#x27;</span>,</span><br><span class="line">  <span class="attr">television</span>: <span class="string">&#x27;电视&#x27;</span>,</span><br><span class="line">  <span class="attr">gameBoy</span>: <span class="string">&#x27;游戏机&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">price</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (name === commodity.<span class="property">phone</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1999</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (name === commodity.<span class="property">computer</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">9999</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (name === commodity.<span class="property">television</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2999</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (name === commodity.<span class="property">gameBoy</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3999</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">price</span>(<span class="string">&#x27;手机&#x27;</span>) <span class="comment">// 9999</span></span><br></pre></td></tr></table></figure><p>缺点：代码太长了,维护和阅读都很不友好;</p><h5 id="2、Switch"><a href="#2、Switch" class="headerlink" title="2、Switch"></a>2、Switch</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> commodity = &#123;</span><br><span class="line">  <span class="attr">phone</span>: <span class="string">&#x27;手机&#x27;</span>,</span><br><span class="line">  <span class="attr">computer</span>: <span class="string">&#x27;电脑&#x27;</span>,</span><br><span class="line">  <span class="attr">television</span>: <span class="string">&#x27;电视&#x27;</span>,</span><br><span class="line">  <span class="attr">gameBoy</span>: <span class="string">&#x27;游戏机&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">price</span> = (<span class="params">name</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">switch</span> (name) &#123;</span><br><span class="line">    <span class="keyword">case</span> commodity.<span class="property">phone</span>:</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1999</span>)</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> commodity.<span class="property">computer</span>:</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">9999</span>)</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> commodity.<span class="property">television</span>:</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2999</span>)</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> commodity.<span class="property">gameBoy</span>:</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3999</span>)</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">price</span>(<span class="string">&#x27;手机&#x27;</span>) <span class="comment">// 9999</span></span><br></pre></td></tr></table></figure><h5 id="3、策略模式"><a href="#3、策略模式" class="headerlink" title="3、策略模式"></a>3、策略模式</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> commodity = <span class="keyword">new</span> <span class="title class_">Map</span>([</span><br><span class="line">  [<span class="string">&#x27;phone&#x27;</span>, <span class="number">1999</span>],</span><br><span class="line">  [<span class="string">&#x27;computer&#x27;</span>, <span class="number">9999</span>],</span><br><span class="line">  [<span class="string">&#x27;television&#x27;</span>, <span class="number">2999</span>],</span><br><span class="line">  [<span class="string">&#x27;gameBoy&#x27;</span>, <span class="number">3999</span>],</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">price</span> = (<span class="params">name</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> commodity.<span class="title function_">get</span>(name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">price</span>(<span class="string">&#x27;phone&#x27;</span>) <span class="comment">// 1999</span></span><br></pre></td></tr></table></figure><h2 id="includes-的优化"><a href="#includes-的优化" class="headerlink" title="includes 的优化"></a>includes 的优化</h2><p>includes 是 ES7 新增的 API，与 indexOf 不同的是 includes 直接返回的是 Boolean 值，indexOf 则 返回的索引值, 数组和字符串都有 includes 方法。</p><p>需求：我们来实现一个身份认证方法，通过传入身份 Id 返回对应的验证结果</p><h5 id="传统方法"><a href="#传统方法" class="headerlink" title="传统方法"></a>传统方法</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">verifyIdentity</span>(<span class="params">identityId</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (identityId == <span class="number">1</span> || identityId == <span class="number">2</span> || identityId == <span class="number">3</span> || identityId == <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;你的身份合法，请通行！&#x27;</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;你的身份不合法&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="includes-优化"><a href="#includes-优化" class="headerlink" title="includes 优化"></a>includes 优化</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">verifyIdentity</span>(<span class="params">identityId</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> ([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].<span class="title function_">includes</span>(identityId)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;你的身份合法，请通行！&#x27;</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;你的身份不合法&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h2><p>在 JavaScript 中，我们可以使用 for()， while()， for(in)，for(in)几种循环，事实上，这三种循环中 for(in) 的效率极差，因为他需要查询散列键，所以应该尽量少用。</p><p>for 循环是最传统的语句，它以变量 i 作为索引，以跟踪访问的位置，对数组进行操作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[i]) <span class="comment">//结果依次a,b,c</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上的方法有一个问题：就是当数组的长度到达百万级时，arr.length 就要计算一百万次，这是相当耗性能的。所以可以采用以下方法就行改良。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, length = arr.<span class="property">length</span>; i &lt; length; i++) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[i]) <span class="comment">//结果依次a,b,c</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时 arr.length 只需要计算一次，优化了性能。</p><p>for-in 一般用来来遍历对象的属性的，不过属性需要 enumerable（可枚举）才能被读取到。同时 for-in 也可以遍历数组，遍历数组的时候遍历的是数组的下标值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="number">0</span>: <span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>: <span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;c&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key) <span class="comment">//结果为依次为0，1，2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> a) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key) <span class="comment">//结果为依次为0，1，2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>for-of 语句看着有点像 for-in 语句，但是和 for-of 语句不同的是它不可以循环对象，只能循环数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> value <span class="keyword">of</span> arr) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value) <span class="comment">// 结果依次为a,b,c</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>for-of 比 for-in 循环遍历数组更好。for-of 只要具有 Iterator 接口的数据结构，都可以使用它迭代成员。它直接读取的是键值。for-in 需要穷举对象的所有属性，包括自定义的添加的属性也能遍历到。且 for-in 的 key 是 String 类型，有转换过程，开销比较大。</p><p>所以在开发过程中循环数组尽量避免使用 for-in。</p><h2 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h2><p>数组去重是实际开发处理数据中经常遇到的，方法有很多，这里就不一一例举了。</p><h5 id="1、利用数组的-indexOf-下标属性来查询。"><a href="#1、利用数组的-indexOf-下标属性来查询。" class="headerlink" title="1、利用数组的 indexOf 下标属性来查询。"></a>1、利用数组的 indexOf 下标属性来查询。</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique4</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> newArr = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (newArr.<span class="title function_">indexOf</span>(arr[i]) === -<span class="number">1</span>) &#123;</span><br><span class="line">      newArr.<span class="title function_">push</span>(arr[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newArr</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique4</span>([<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">4</span>]))</span><br><span class="line"><span class="comment">// [1, 2, 3, 5, 6, 7, 4]</span></span><br></pre></td></tr></table></figure><h5 id="2、利用-ES6-的-Set-方法。"><a href="#2、利用-ES6-的-Set-方法。" class="headerlink" title="2、利用 ES6 的 Set 方法。"></a>2、利用 ES6 的 Set 方法。</h5><p>Set 本身是一个构造函数，用来生成 Set 数据结构。Set 函数可以接受一个数组（或者具有 iterable 接口的其他数据结构）作为参数，用来初始化。Set 对象允许你存储任何类型的值，无论是原始值或者是对象引用。它类似于数组，但是成员的值都是唯一的，没有重复的值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique4</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="keyword">new</span> <span class="title class_">Set</span>(arr)) <span class="comment">// 利用Array.from将Set结构转换成数组</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique4</span>([<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">4</span>]))</span><br><span class="line"><span class="comment">// [1, 2, 3, 5, 6, 7, 4]</span></span><br></pre></td></tr></table></figure><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><p>箭头函数表达式的语法比函数表达式更简洁。所以在开发中更推荐使用箭头函数。特别是在 vue 项目中，使用箭头函数不需要在更 this 重新赋一个变量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用functions</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">5</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">1</span>]</span><br><span class="line"><span class="keyword">var</span> arrFunc = arr.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x * x</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arrFunc)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用箭头函数</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">5</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">1</span>]</span><br><span class="line"><span class="keyword">var</span> arrFunc = arr.<span class="title function_">map</span>(<span class="function">(<span class="params">x</span>) =&gt;</span> x * x)</span><br></pre></td></tr></table></figure><p>要注意的是，箭头函数不绑定 arguments，取而代之用 rest 参数…解决。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不能使用 arguments</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">fun1</span> = (<span class="params">b</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fun1</span>(<span class="number">2</span>, <span class="number">92</span>, <span class="number">32</span>, <span class="number">32</span>) <span class="comment">// Uncaught ReferenceError: arguments is not defined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用rest 参数</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">fun2</span> = (<span class="params">...c</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fun2</span>(<span class="number">3</span>, <span class="number">82</span>, <span class="number">32</span>, <span class="number">11323</span>) <span class="comment">// [3, 82, 32, 11323]</span></span><br></pre></td></tr></table></figure><h2 id="Dom-的创建"><a href="#Dom-的创建" class="headerlink" title="Dom 的创建"></a>Dom 的创建</h2><p>创建多个 dom 元素时，先将元素 append 到 DocumentFragment 中，最后统一将 DocumentFragment 添加到页面。</p><p>常规方法；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> el = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;p&#x27;</span>)</span><br><span class="line">  el.<span class="property">innerHTML</span> = i</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(el)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 DocumentFragment 优化多次 append</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> frag = <span class="variable language_">document</span>.<span class="title function_">createDocumentFragment</span>()</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> el = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;p&#x27;</span>)</span><br><span class="line">  el.<span class="property">innerHTML</span> = i</span><br><span class="line">  frag.<span class="title function_">appendChild</span>(el)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(frag)</span><br></pre></td></tr></table></figure><p>更优的方法:使用一次 innerHTML 赋值代替构建 dom 元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> html = []</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">  html.<span class="title function_">push</span>(<span class="string">&#x27;&lt;p&gt;&#x27;</span> + i + <span class="string">&#x27;&lt;/p&gt;&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">innerHTML</span> = html.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h2><p>系统进程不再用到的内存，没有及时释放，就叫做内存泄漏（memory leak）。当内存占用越来越高，轻则影响系统性能，重则导致进程崩溃。</p><p>引起内存泄漏的原因</p><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><h4 id="未声明变量或者使用-this-创建的变量-this-的指向是-window-都会引起内存泄漏"><a href="#未声明变量或者使用-this-创建的变量-this-的指向是-window-都会引起内存泄漏" class="headerlink" title="未声明变量或者使用 this 创建的变量(this 的指向是 window)都会引起内存泄漏"></a>未声明变量或者使用 this 创建的变量(this 的指向是 window)都会引起内存泄漏</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  a = <span class="string">&quot;Actually, I&#x27;m a global variable&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">a</span> = <span class="string">&quot;Actually, I&#x27;m a global variable&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure><p>解决方法：</p><ul><li>避免创建全局变量</li><li>使用严格模式,在 JavaScript 文件头部或者函数的顶部加上 use strict。</li></ul><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>闭包引起的内存泄漏原因：闭包可以维持函数内局部变量，使其得不到释放。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="string">&quot;I&#x27;m a&quot;</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决：将事件处理函数定义在外部，解除闭包,或者在定义事件处理函数的外部函数中，删除对 dom 的引用。</p><h3 id="定时器或事件监听"><a href="#定时器或事件监听" class="headerlink" title="定时器或事件监听"></a>定时器或事件监听</h3><p>由于项目中有些页面难免会碰到需要定时器或者事件监听。但是在离开当前页面的时候，定时器如果不及时合理地清除，会造成业务逻辑混乱甚至应用卡死的情况，这个时就需要清除定时器事件监听，即在页面卸载（关闭）的生命周期函数里，清除定时器。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">  resizeFun () &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">tableHeight</span> = <span class="variable language_">window</span>.<span class="property">innerHeight</span> - <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;table&#x27;</span>).<span class="property">offsetTop</span> - <span class="number">128</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">setTimer</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">timer</span> = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123; &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">clearTimer</span>(<span class="params"></span>) &#123;<span class="comment">//清除定时器</span></span><br><span class="line">        <span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">timer</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">timer</span> = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">setTimer</span>()</span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, <span class="variable language_">this</span>.<span class="property">resizeFun</span>)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">beforeDestroy</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, <span class="variable language_">this</span>.<span class="property">resizeFun</span>)</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">clearTimer</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="防抖与节流"><a href="#防抖与节流" class="headerlink" title="防抖与节流"></a>防抖与节流</h2><p>在前端开发的过程中，我们经常会需要绑定一些持续触发的事件，如 resize、scroll、mousemove 等等，但有些时候我们并不希望在事件持续触发的过程中那么频繁地去执行函数。这时候就用到防抖与节流。</p><p>案例 1：远程搜索时需要通过接口动态的获取数据，若是每次用户输入都接口请求，是浪费带宽和性能的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Select</span> :remote-method=<span class="string">&quot;remoteMethod&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Option</span> <span class="attr">v-for</span>=<span class="string">&quot;item in temoteList&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;item.value&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span>&#123;&#123;item.label&#125;&#125;<span class="tag">&lt;/<span class="name">Option</span>&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">Select</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn, wait</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timeout = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (timeout !== <span class="literal">null</span>) <span class="built_in">clearTimeout</span>(timeout)</span><br><span class="line">    timeout = <span class="built_in">setTimeout</span>(fn, wait)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  methods：&#123;</span><br><span class="line">    remoteMethod：<span class="title function_">debounce</span>(<span class="keyword">function</span> (<span class="params">query</span>) &#123;</span><br><span class="line">        <span class="comment">// to do ...</span></span><br><span class="line">    &#125;, <span class="number">200</span>),</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;script&gt;</span><br></pre></td></tr></table></figure><p>案例 2：持续触发 scroll 事件时，并不立即执行 handle 函数，当 1000 毫秒内没有触发 scroll 事件时，才会延时触发一次 handle 函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn, wait</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timeout = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (timeout !== <span class="literal">null</span>) <span class="built_in">clearTimeout</span>(timeout)</span><br><span class="line">    timeout = <span class="built_in">setTimeout</span>(fn, wait)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handle</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>())</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, <span class="title function_">debounce</span>(handle, <span class="number">1000</span>))</span><br></pre></td></tr></table></figure><h2 id="异步加载-js"><a href="#异步加载-js" class="headerlink" title="异步加载 js"></a>异步加载 js</h2><p>默认情况下，浏览器是同步加载 js 脚本，解析 html 过程中，遇到 <code>&lt;script&gt; </code>标签就会停下来，等脚本下载、解析、执行完后，再继续向下解析渲染。</p><p>如果 js 文件体积比较大，下载时间就会很长，容易造成浏览器堵塞，浏览器页面会呈现出“白屏”效果，用户会感觉浏览器“卡死了”，没有响应。此时，我们可以让 js 脚本异步加载、执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;path/to/home.js&quot;</span> defer&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;path/to/home.js&quot;</span> <span class="attr">async</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>&lt;script&gt;</code> 标签分别有 defer 和 async 属性，浏览器识别到这 2 个属性时 js 就会异步加载。也就是说，浏览器不会等待这个脚本下载、执行完毕后再向后执行，而是直接继续向后执行</p><p>defer 与 async 区别:</p><p>defer：DOM 结构完全生成，以及其他脚本执行完成，才会执行（渲染完再执行）。有多个 defer 脚本时，会按照页面出现的顺序依次加载、执行。<br>async：一旦下载完成，渲染引擎就会中断渲染，执行这个脚本以后，再继续渲染（下载完就执行）。有多个 async 脚本时，不能保证按照页面出现顺序加载、执行。</p>]]></content>
      
      
      <categories>
          
          <category> Posts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> # </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web前端安全之iframe</title>
      <link href="/2022/11/15/Web%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8%E4%B9%8Biframe/"/>
      <url>/2022/11/15/Web%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8%E4%B9%8Biframe/</url>
      
        <content type="html"><![CDATA[<h2 id="防嵌套网页"><a href="#防嵌套网页" class="headerlink" title="防嵌套网页"></a>防嵌套网页</h2><p>比如，最出名的clickhacking就是使用iframe来 拦截click事件。因为iframe享有着click的最优先权，当有人在伪造的主页中进行点击的话，如果点在iframe上，则会默认是在操作iframe的页面。 所以，钓鱼网站就是使用这个技术，通过诱导用户进行点击，比如，设计一个”妹妹寂寞了”等之类的网页，诱导用户点击，但实际结果，你看到的不是”妹妹”,而是被恶意微博吸粉。</p><p>所以，为了防止网站被钓鱼，可以使用window.top来防止你的网页被iframe.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//iframe2.html</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable language_">window</span> != <span class="variable language_">window</span>.<span class="property">top</span>)&#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">top</span>.<span class="property">location</span>.<span class="property">href</span> = correctURL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码的主要用途是限定你的网页不能嵌套在任意网页内。如果你想引用同域的框架的话，可以判断域名。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (top.<span class="property">location</span>.<span class="property">host</span> != <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">host</span>) &#123;</span><br><span class="line">　　top.<span class="property">location</span>.<span class="property">href</span> = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，如果你网页不同域名的话，上述就会报错。<br>所以，这里可以使用try…catch…进行错误捕获。如果发生错误，则说明不同域，表示你的页面被盗用了。可能有些浏览器这样写是不会报错，所以需要降级处理。<br>这时候再进行跳转即可.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">　　top.<span class="property">location</span>.<span class="property">hostname</span>;  <span class="comment">//检测是否出错</span></span><br><span class="line">　　<span class="comment">//如果没有出错，则降级处理</span></span><br><span class="line">　　<span class="keyword">if</span> (top.<span class="property">location</span>.<span class="property">hostname</span> != <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">hostname</span>) &#123; </span><br><span class="line">　　　　top.<span class="property">location</span>.<span class="property">href</span> =<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>;</span><br><span class="line">　　&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(e)&#123;</span><br><span class="line">　　top.<span class="property">location</span>.<span class="property">href</span> = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这只是浏览器端，对iframe页面的权限做出相关的设置。 我们还可以在服务器上，对使用iframe的权限进行设置.</p><h2 id="X-Frame-Options"><a href="#X-Frame-Options" class="headerlink" title="X-Frame-Options"></a>X-Frame-Options</h2><p>X-Frame-Options是一个相应头，主要是描述服务器的网页资源的iframe权限。目前的支持度是IE8+(已经很好了啊喂)有3个选项:</p><blockquote><p>DENY：当前页面不能被嵌套iframe里，即便是在相同域名的页面中嵌套也不允许,也不允许网页中有嵌套iframe;</p></blockquote><blockquote><p>SAMEORIGIN：iframe页面的地址只能为同源域名下的页面</p></blockquote><blockquote><p>ALLOW-FROM：可以在指定的origin url的iframe中加载</p></blockquote><ol><li>X-Frame-Options: DENY</li><li>拒绝任何iframe的嵌套请求</li><li>X-Frame-Options: SAMEORIGIN</li><li>只允许同源请求，例如网页为 foo.com&#x2F;123.php，則 foo.com 底下的所有网页可以嵌入此网页，但是 foo.com 以外的网页不能嵌入</li><li>X-Frame-Options: ALLOW-FROM <a href="http://s3131212.com/">http://s3131212.com</a></li><li>只允许指定网页的iframe请求，不过兼容性较差Chrome不支持</li></ol><p>X-Frame-Options其实就是将前端js对iframe的把控交给服务器来进行处理。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//js</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable language_">window</span> != <span class="variable language_">window</span>.<span class="property">top</span>)&#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">top</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line">X-<span class="title class_">Frame</span>-<span class="title class_">Options</span>: <span class="variable constant_">DENY</span></span><br><span class="line"><span class="comment">//js</span></span><br><span class="line"><span class="keyword">if</span> (top.<span class="property">location</span>.<span class="property">hostname</span> != <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">hostname</span>) &#123; </span><br><span class="line">　　　　top.<span class="property">location</span>.<span class="property">href</span> =<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line">X-<span class="title class_">Frame</span>-<span class="title class_">Options</span>: <span class="variable constant_">SAMEORIGIN</span></span><br></pre></td></tr></table></figure><p>该属性是对页面的iframe进行一个主要限制，不过，涉及iframe的header可不止这一个，另外还有一个Content Security Policy, 他同样也可以对iframe进行限制，而且，他应该是以后网页安全防护的主流。</p><h2 id="CSP之页面防护"><a href="#CSP之页面防护" class="headerlink" title="CSP之页面防护"></a>CSP之页面防护</h2><p>和X-Frames-Options一样，都需要在服务器端设置好相关的Header. CSP 的作用， 真的是太大了，他能够极大的防止你的页面被XSS攻击，而且可以制定js,css,img等相关资源的origin，防止被恶意注入。不过他的兼容性，也是渣的一逼。目前支持Edge12+ 以及 IE10+。<br>而且目前市面上，流行的是3种CSP头，以及各种浏览器的兼容性</p><p>使用主要是在后端服务器上配置，在前端，我们可以观察Response Header 里是否有这样的一个Header: <code>Content-Security-Policy: default-src &#39;self&#39;</code>, 这就表明，你的网页是启用CSP的。通常我们可以在CSP后配置各种指定资源路径，有</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">default-src,</span><br><span class="line">script-src,</span><br><span class="line">style-src,</span><br><span class="line">img-src,</span><br><span class="line">connect-src,</span><br><span class="line">font-src,</span><br><span class="line">object-src,</span><br><span class="line">media-src,</span><br><span class="line">sandbox,</span><br><span class="line">child-src,</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>如果你未指定的话，则是使用default-src规定的加载策略.<br>默认配置就是同域: default-src “self”.<br>这里和iframe有一点瓜葛的就是 child-src 和 sandbox.</p><p>child-src就是用来指定iframe的有效加载路径。其实和X-Frame-Options中配置allow-origin是一个道理。不过,allow-origin 没有得到厂商们的支持。<br>而，sandbox其实就和iframe的sandbox属性（下文介绍）,是一样一样的，他可以规定来源能够带有什么权限.<br>来个demo:</p><p><code>Content-Security-Policy: child-src &#39;self&#39; http://example.com; sandbox allow-forms allow-same-origin</code></p><p>此时，iframe的src就只能加载同域和example.com页面。 最后再补充一点: 使用CSP 能够很好的防止XSS攻击，原理就是CSP会默认escape掉内联样式和脚本，以及eval执行。但是，你可以使用srcipt-src进行降低限制.</p><p><code>Content-Security-Policy: script-src &#39;unsafe-inline&#39;</code></p><p>如果想更深入的了解CSP,可以参阅:CSP,中文CSP,H5rock之CSP<br>ok, 上面基本上就是防止自己页面被嵌套而做的一些安全防护工作。 当然，我们面临的安全问题还有一个，就是当iframe别人的页面时，我们需要对其进行安全设限，虽然，跨域时iframe的安全性会大很多，但是，互联网是没有安全的地方。在以前，我们会进行各种trick来防止自己的页面被污染，现在h5提供的一个新属性sandbox可以很好的解决这个问题。</p><h2 id="sandbox"><a href="#sandbox" class="headerlink" title="sandbox"></a>sandbox</h2><p>sandbox就是用来给指定iframe设置一个沙盒模型限制iframe的更多权限.<br>sandbox是h5的一个新属性,IE10+支持(md~).<br>启用方式就是使用sandbox属性:</p><p><code>&lt;iframe sandbox src=&quot;...&quot;&gt;&lt;/iframe&gt;</code></p><p>这样会对iframe页面进行一系列的限制:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">. script脚本不能执行</span><br><span class="line">. 不能发送ajax请求</span><br><span class="line">. 不能使用本地存储，即localStorage,cookie等</span><br><span class="line">. 不能创建新的弹窗和window</span><br><span class="line">. 不能发送表单</span><br><span class="line">. 不能加载额外插件比如flash等</span><br></pre></td></tr></table></figure><p>看到这里，我也是醉了。 好好的一个iframe，你这样是不是有点过分了。 不过，你可以放宽一点权限。在sandbox里面进行一些简单设置</p><p><code>&lt;iframe sandbox=&quot;allow-same-origin&quot; src=&quot;...&quot;&gt;&lt;/iframe&gt;</code></p><p>常用的配置项有:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">allow-forms允许进行提交表单</span><br><span class="line">allow-scripts运行执行脚本</span><br><span class="line">allow-same-origin允许同域请求,比如ajax,storage</span><br><span class="line">allow-top-navigation允许iframe能够主导window.top进行页面跳转</span><br><span class="line">allow-popups允许iframe中弹出新窗口,比如,window.open,target=&quot;_blank&quot;</span><br><span class="line">allow-pointer-lock在iframe中可以锁定鼠标，主要和鼠标锁定有关</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以通过在sandbox里，添加允许进行的权限.</p><p><code>&lt;iframe sandbox=&quot;allow-forms allow-same-origin allow-scripts&quot; src=&quot;...&quot;&gt;&lt;/iframe&gt;</code></p><p>这样，就可以保证js脚本的执行，但是禁止iframe里的javascript执行top.location &#x3D; self.location。<br>哎，其实，iframe的安全问题还是超级有的。比如location劫持，Refers检查等。 不过目前而言，知道怎么简单的做一些安全措施就over了，白帽子们会帮我们测试的。</p><h2 id="resolve-iframe跨域"><a href="#resolve-iframe跨域" class="headerlink" title="resolve iframe跨域"></a>resolve iframe跨域</h2><p>iframe就是一个隔离沙盒，相当于我们在一个页面内可以操控很多个标签页一样。如果踩坑的童鞋应该知道，iframe的解决跨域也是很有套套的。<br>首先我们需要明确什么是跨域。<br>浏览器判断你跨没跨域，主要根据两个点。 一个是你网页的协议(protocol)，一个就是你的host是否相同，即，就是url的首部:</p><p><code>window.location.protocol +window.location.host</code></p><p>需要强调的是，url首部必须一样，比如:二级域名或者IP地址，都算是跨域.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//域名和域名对应ip, 跨域</span><br><span class="line">http://www.a.com/a.js</span><br><span class="line">http://70.32.92.74/b.js</span><br><span class="line">//统一域名，不同二级域名。 跨域</span><br><span class="line">http://www.a.com/a.js</span><br><span class="line">http://a.com/b.js</span><br></pre></td></tr></table></figure><p>对于第二种方式的跨域（主域相同而子域不同）,可以使用iframe进行解决。<br>在两个不同子域下(某一方使用iframe嵌套在另一方)，<br>即:<br>http: &#x2F;&#x2F;<a href="http://www.foo.com/a.html%E5%92%8Chttp">www.foo.com/a.html和http</a>: &#x2F;&#x2F;script.foo.com&#x2F;b.html<br>两个文件中分别加上document.domain &#x3D; ‘foo.com’,指定相同的主域，然后,两个文档就可以进行交互。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//b.html是以iframe的形式嵌套在a.html中</span><br><span class="line">//www.foo.com上的a.html</span><br><span class="line">document.domain = &#x27;foo.com&#x27;;</span><br><span class="line">var ifr = document.createElement(&#x27;iframe&#x27;);</span><br><span class="line">ifr.src = &#x27;http://script.foo.com/b.html&#x27;;</span><br><span class="line">ifr.style.display = &#x27;none&#x27;;</span><br><span class="line">document.body.appendChild(ifr);</span><br><span class="line">ifr.onload = function()&#123;</span><br><span class="line">    var doc = ifr.contentDocument || ifr.contentWindow.document;</span><br><span class="line">    // 在这里操纵b.html</span><br><span class="line">    alert(doc.getElementsByTagName(&quot;h1&quot;)[0].childNodes[0].nodeValue);</span><br><span class="line">&#125;;</span><br><span class="line">//script.foo.com上的b.html</span><br><span class="line">document.domain = &#x27;foo.com&#x27;;</span><br></pre></td></tr></table></figure><p>默认情况下document.domain 是指window.location.hostname. 你可以手动更改，但是最多只能设置为主域名。 通常，主域名就是指不带www的hostname, 比如: foo.com , baidu.com 。 如果，带上www或者其他的前缀，就是二级域名或者多级域名。通过上述设置，相同的domain之后，就可以进行同域的相关操作。另外还可以使用iframe和location.hash，不过由于技术out了，这里就不做介绍了。</p>]]></content>
      
      
      <categories>
          
          <category> Posts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> # </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>create-react-app 搭建 typeScript 应用</title>
      <link href="/2022/11/15/create-react-app%20%E6%90%AD%E5%BB%BA%20typeScript%20%E5%BA%94%E7%94%A8/"/>
      <url>/2022/11/15/create-react-app%20%E6%90%AD%E5%BB%BA%20typeScript%20%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="一、创建项目基础"><a href="#一、创建项目基础" class="headerlink" title="一、创建项目基础"></a>一、创建项目基础</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx create-react-app frontend --template typescript</span><br></pre></td></tr></table></figure><h2 id="二、抽离配置文件"><a href="#二、抽离配置文件" class="headerlink" title="二、抽离配置文件"></a>二、抽离配置文件</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run eject</span><br></pre></td></tr></table></figure><p>注意：该行为是不可逆的，如果碰到如下错误，是因为代码还未提交存到仓库（本地仓库)；</p><p>如果此时报错，请检查是否有未提交文件，如有请丢弃或提交；</p><h2 id="三、设置路径别名"><a href="#三、设置路径别名" class="headerlink" title="三、设置路径别名"></a>三、设置路径别名</h2><p>有两种配置方式</p><h3 id="3-1-直接在config文件夹里面的-webpack-config-js-中配置"><a href="#3-1-直接在config文件夹里面的-webpack-config-js-中配置" class="headerlink" title="3.1 直接在config文件夹里面的 webpack.config.js 中配置"></a>3.1 直接在config文件夹里面的 <code>webpack.config.js</code> 中配置</h3><h4 id="3-1-1-打开webpack-config-js，搜索alias"><a href="#3-1-1-打开webpack-config-js，搜索alias" class="headerlink" title="3.1.1 打开webpack.config.js，搜索alias"></a>3.1.1 打开<code>webpack.config.js</code>，搜索<code>alias</code></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">alias</span>: &#123;</span><br><span class="line">    <span class="comment">// Support React Native Web</span></span><br><span class="line">    <span class="comment">// https://www.smashingmagazine.com/2016/08/a-glimpse-into-the-future-with-react-native-for-web/</span></span><br><span class="line">    <span class="string">&#x27;react-native&#x27;</span>: <span class="string">&#x27;react-native-web&#x27;</span>,</span><br><span class="line">    <span class="comment">// Allows for better profiling with ReactDevTools</span></span><br><span class="line">    ...(isEnvProductionProfile &amp;&amp; &#123;</span><br><span class="line">        <span class="string">&#x27;react-dom$&#x27;</span>: <span class="string">&#x27;react-dom/profiling&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;scheduler/tracing&#x27;</span>: <span class="string">&#x27;scheduler/tracing-profiling&#x27;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">    ...(modules.<span class="property">webpackAliases</span> || &#123;&#125;),</span><br><span class="line">    <span class="comment">// 文件别名路径配置</span></span><br><span class="line">    <span class="string">&quot;@&quot;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;../src&#x27;</span>)</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><h4 id="3-2-在config文件夹里面的paths文件结合webpack-config文件配置"><a href="#3-2-在config文件夹里面的paths文件结合webpack-config文件配置" class="headerlink" title="3.2 在config文件夹里面的paths文件结合webpack.config文件配置"></a>3.2 在config文件夹里面的paths文件结合webpack.config文件配置</h4><p>首先打开<code>paths.js</code>文件<br>找到模块导出位置<br>写入自定义导出模块的名字以及配置其路径。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config after eject: we&#x27;re in ./config/</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">dotenv</span>: <span class="title function_">resolveApp</span>(<span class="string">&#x27;.env&#x27;</span>),</span><br><span class="line">  <span class="attr">appPath</span>: <span class="title function_">resolveApp</span>(<span class="string">&#x27;.&#x27;</span>),</span><br><span class="line">  <span class="attr">appBuild</span>: <span class="title function_">resolveApp</span>(buildPath),</span><br><span class="line">  <span class="attr">appPublic</span>: <span class="title function_">resolveApp</span>(<span class="string">&#x27;public&#x27;</span>),</span><br><span class="line">  <span class="attr">appHtml</span>: <span class="title function_">resolveApp</span>(<span class="string">&#x27;public/index.html&#x27;</span>),</span><br><span class="line">  <span class="attr">appIndexJs</span>: <span class="title function_">resolveModule</span>(resolveApp, <span class="string">&#x27;src/index&#x27;</span>),</span><br><span class="line">  <span class="attr">appPackageJson</span>: <span class="title function_">resolveApp</span>(<span class="string">&#x27;package.json&#x27;</span>),</span><br><span class="line">  <span class="attr">appSrc</span>: <span class="title function_">resolveApp</span>(<span class="string">&#x27;src&#x27;</span>),</span><br><span class="line">  <span class="attr">appTsConfig</span>: <span class="title function_">resolveApp</span>(<span class="string">&#x27;tsconfig.json&#x27;</span>),</span><br><span class="line">  <span class="attr">appJsConfig</span>: <span class="title function_">resolveApp</span>(<span class="string">&#x27;jsconfig.json&#x27;</span>),</span><br><span class="line">  <span class="attr">yarnLockFile</span>: <span class="title function_">resolveApp</span>(<span class="string">&#x27;yarn.lock&#x27;</span>),</span><br><span class="line">  <span class="attr">testsSetup</span>: <span class="title function_">resolveModule</span>(resolveApp, <span class="string">&#x27;src/setupTests&#x27;</span>),</span><br><span class="line">  <span class="attr">proxySetup</span>: <span class="title function_">resolveApp</span>(<span class="string">&#x27;src/setupProxy.js&#x27;</span>),</span><br><span class="line">  <span class="attr">appNodeModules</span>: <span class="title function_">resolveApp</span>(<span class="string">&#x27;node_modules&#x27;</span>),</span><br><span class="line">  <span class="attr">swSrc</span>: <span class="title function_">resolveModule</span>(resolveApp, <span class="string">&#x27;src/service-worker&#x27;</span>),</span><br><span class="line">  publicUrlOrPath,</span><br><span class="line">  <span class="attr">src</span>: <span class="title function_">resolveApp</span>(<span class="string">&#x27;src&#x27;</span>),</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后在webpack.config.js中引入该模块</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">alias</span>: &#123;</span><br><span class="line">        <span class="comment">// Support React Native Web</span></span><br><span class="line">        <span class="comment">// https://www.smashingmagazine.com/2016/08/a-glimpse-into-the-future-with-react-native-for-web/</span></span><br><span class="line">        <span class="string">&#x27;react-native&#x27;</span>: <span class="string">&#x27;react-native-web&#x27;</span>,</span><br><span class="line">        <span class="comment">// Allows for better profiling with ReactDevTools</span></span><br><span class="line">        ...(isEnvProductionProfile &amp;&amp; &#123;</span><br><span class="line">          <span class="string">&#x27;react-dom$&#x27;</span>: <span class="string">&#x27;react-dom/profiling&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;scheduler/tracing&#x27;</span>: <span class="string">&#x27;scheduler/tracing-profiling&#x27;</span>,</span><br><span class="line">        &#125;),</span><br><span class="line">        ...(modules.<span class="property">webpackAliases</span> || &#123;&#125;),</span><br><span class="line">        <span class="comment">// 文件别名路径配置</span></span><br><span class="line">        <span class="string">&#x27;@&#x27;</span>: paths.<span class="property">src</span></span><br><span class="line">      &#125;,</span><br></pre></td></tr></table></figure><h4 id="3-1-3-配置-tsconfig"><a href="#3-1-3-配置-tsconfig" class="headerlink" title="3.1.3 配置 tsconfig"></a>3.1.3 配置 tsconfig</h4><p>tsconfig中负责别名配置的是两个字段：baseUrl 和 paths；<br>其中baseUrl用来描述计算相对路径时的根目录，paths用来描述路径别名。注意：如果配置了paths，就一定要配置baseUrl，否则后面会遇到问题。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;baseUrl&quot;</span>: <span class="string">&quot;./&quot;</span>,</span><br><span class="line">    <span class="string">&quot;paths&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;@/*&quot;</span>: [<span class="string">&quot;./src/*&quot;</span>]</span><br><span class="line">    &#125; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-在需要的文件中使用别名"><a href="#3-2-在需要的文件中使用别名" class="headerlink" title="3.2 在需要的文件中使用别名"></a>3.2 在需要的文件中使用别名</h3><p>如果此时使用仍然报错，关闭 vscode 重新打开项目就可以解决</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;@/App&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="四、配置-less-及-less-loader"><a href="#四、配置-less-及-less-loader" class="headerlink" title="四、配置 less 及 less-loader"></a>四、配置 less 及 less-loader</h2><h3 id="4-1-安装依赖"><a href="#4-1-安装依赖" class="headerlink" title="4.1 安装依赖"></a>4.1 安装依赖</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install less@<span class="number">4.1</span><span class="number">.1</span></span><br><span class="line"></span><br><span class="line">npm install less-loader@<span class="number">5.0</span><span class="number">.0</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">注意：如果 less-loader 版本过高会出错。</span><br><span class="line"><span class="title class_">TypeError</span>: <span class="variable language_">this</span>.<span class="property">getOptions</span> is not a <span class="keyword">function</span></span><br></pre></td></tr></table></figure><h3 id="4-2-打开config-x2F-webpack-config-js-文件进行配置"><a href="#4-2-打开config-x2F-webpack-config-js-文件进行配置" class="headerlink" title="4.2 打开config&#x2F;webpack.config.js 文件进行配置"></a>4.2 打开config&#x2F;webpack.config.js 文件进行配置</h3><p>修改style files regexes（样式文件正则）<br>参照 sass 配置 less 的样式文件正则</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// style files regexes</span></span><br><span class="line"><span class="keyword">const</span> cssRegex = <span class="regexp">/\.css$/</span>;</span><br><span class="line"><span class="keyword">const</span> cssModuleRegex = <span class="regexp">/\.module\.css$/</span>;</span><br><span class="line"><span class="keyword">const</span> sassRegex = <span class="regexp">/\.(scss|sass)$/</span>;</span><br><span class="line"><span class="keyword">const</span> sassModuleRegex = <span class="regexp">/\.module\.(scss|sass)$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> lessRegex = <span class="regexp">/\.less$/</span>;</span><br><span class="line"><span class="keyword">const</span> lessModuleRegex = <span class="regexp">/\.module\.less$/</span>;</span><br></pre></td></tr></table></figure><h3 id="4-3-修改getStyleLoaders函数，并添加如下代码"><a href="#4-3-修改getStyleLoaders函数，并添加如下代码" class="headerlink" title="4.3 修改getStyleLoaders函数，并添加如下代码"></a>4.3 修改getStyleLoaders函数，并添加如下代码</h3><p>同样，参照css-loader节点，添加less-loader节点</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">const</span> loaders = [</span><br><span class="line">    isEnvDevelopment &amp;&amp; <span class="built_in">require</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;style-loader&#x27;</span>),</span><br><span class="line">    isEnvProduction &amp;&amp; &#123;</span><br><span class="line">      <span class="attr">loader</span>: <span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>,</span><br><span class="line">      <span class="comment">// css is located in `static/css`, use &#x27;../../&#x27; to locate index.html folder</span></span><br><span class="line">      <span class="comment">// in production `paths.publicUrlOrPath` can be a relative path</span></span><br><span class="line">      <span class="attr">options</span>: paths.<span class="property">publicUrlOrPath</span>.<span class="title function_">startsWith</span>(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        ? &#123; <span class="attr">publicPath</span>: <span class="string">&#x27;../../&#x27;</span> &#125;</span><br><span class="line">        : &#123;&#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">loader</span>: <span class="built_in">require</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;css-loader&#x27;</span>),</span><br><span class="line">      <span class="attr">options</span>: cssOptions,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">loader</span>: <span class="built_in">require</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;less-loader&#x27;</span>),</span><br><span class="line">      <span class="attr">options</span>: lessOptions,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="4-4-模仿代码中提供的sassRegex代码，添加如下代码"><a href="#4-4-模仿代码中提供的sassRegex代码，添加如下代码" class="headerlink" title="4.4 模仿代码中提供的sassRegex代码，添加如下代码"></a>4.4 模仿代码中提供的sassRegex代码，添加如下代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Adds support for LESS Modules, but using LESS </span></span><br><span class="line"><span class="comment">// less start</span></span><br><span class="line"> &#123;</span><br><span class="line">   <span class="attr">test</span>: lessRegex,</span><br><span class="line">   <span class="attr">exclude</span>: cssModuleRegex,</span><br><span class="line">   <span class="attr">use</span>: <span class="title function_">getStyleLoaders</span>(&#123;</span><br><span class="line">       <span class="attr">importLoaders</span>: <span class="number">1</span>,</span><br><span class="line">       <span class="attr">sourceMap</span>: isEnvProduction &amp;&amp; shouldUseSourceMap,</span><br><span class="line">     &#125;),</span><br><span class="line">   <span class="attr">sideEffects</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line"> &#123;</span><br><span class="line">   <span class="attr">test</span>: lessModuleRegex,</span><br><span class="line">   <span class="attr">use</span>: <span class="title function_">getStyleLoaders</span>(&#123;</span><br><span class="line">   <span class="attr">importLoaders</span>: <span class="number">1</span>,</span><br><span class="line">   <span class="attr">sourceMap</span>: isEnvProduction &amp;&amp; shouldUseSourceMap,</span><br><span class="line">     <span class="attr">modules</span>: <span class="literal">true</span>,</span><br><span class="line">     <span class="attr">getLocalIdent</span>: getCSSModuleLocalIdent,</span><br><span class="line">     &#125;),</span><br><span class="line"> &#125;, <span class="comment">// less end;</span></span><br></pre></td></tr></table></figure><h2 id="五、整合-Eslint-和-Prettier"><a href="#五、整合-Eslint-和-Prettier" class="headerlink" title="五、整合 Eslint 和 Prettier"></a>五、整合 Eslint 和 Prettier</h2><p>Eslint 是一个可以检验代码，并给出报告的工具。它的目标是保证代码的一致性，避免错误。Eslint 为我们提供了 ECMAScript&#x2F;JavaScript 规范的代码校验，我们可以根据个人&#x2F;团队的代码风格进行配置，也可以使用开源的配置方案，本文会采用 eslint-config-airbnb 来配置。</p><p>Eslint 的强大得益于它活跃的开源社区，以及灵活的插件机制。本文中，我们需要去配置一个 React 项目，就可以去选择一些开源社区合适的插件，来帮助我们完成目标。</p><ul><li>eslint-plugin-import：此插件主要为了校验 import&#x2F;export 语法，防止错误拼写文件路径以及导出名称的问题</li><li>eslint-plugin-jsx-a11y：提供 jsx 元素可访问性校验</li><li>eslint-plugin-react：校验 React</li><li>eslint-plugin-react-hooks：根据 Hooks API 校验 Hooks 的使用</li></ul><h3 id="5-1-Eslint"><a href="#5-1-Eslint" class="headerlink" title="5.1 Eslint"></a>5.1 Eslint</h3><h4 id="5-1-1安装依赖"><a href="#5-1-1安装依赖" class="headerlink" title="5.1.1安装依赖"></a>5.1.1安装依赖</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm i -D eslint eslint-config-airbnb eslint-plugin-<span class="keyword">import</span> eslint-plugin-jsx-a11y eslint-plugin-react eslint-plugin-react-hooks</span><br><span class="line"></span><br><span class="line">npm install eslint-plugin-react-hooks --save-dev</span><br></pre></td></tr></table></figure><h3 id="5-1-2-修改配置文件"><a href="#5-1-2-修改配置文件" class="headerlink" title="5.1.2 修改配置文件"></a>5.1.2 修改配置文件</h3><p>下面，让我们需要根据 Eslint 的文档来配置这些插件。在控制台运行下面命令：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./node_modules/.<span class="property">bin</span>/eslint --init</span><br></pre></td></tr></table></figure><ul><li>执行后选择会有一些选项，根据喜好合项目结构配置适合自己的模式即可。</li></ul><p>我们可以根据项目的需求，来选则相应的配置。执行完毕之后可以看到项目的根目录多了一个 .eslintrc.js 文件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 为我们提供运行环境，一个环境定义了一组预定义的全局变量</span></span><br><span class="line">  <span class="attr">env</span>: &#123;</span><br><span class="line">    <span class="attr">browser</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">es2021</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 一个配置文件可以被基础配置中的已启用的规则继承。</span></span><br><span class="line">  <span class="attr">extends</span>: [</span><br><span class="line">    <span class="string">&#x27;eslint:recommended&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;plugin:react/recommended&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;plugin:@typescript-eslint/recommended&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;plugin:prettier/recommended&#x27;</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// 自定义全局变量</span></span><br><span class="line">  <span class="attr">globals</span>: &#123;</span><br><span class="line">    <span class="title class_">Atomics</span>: <span class="string">&#x27;readonly&#x27;</span>,</span><br><span class="line">    <span class="title class_">SharedArrayBuffer</span>: <span class="string">&#x27;readonly&#x27;</span>,</span><br><span class="line">    <span class="attr">_</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">$</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">__dirname</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">process</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">module</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ESLint 默认使用Espree作为其解析器，你可以在配置文件中指定一个不同的解析器</span></span><br><span class="line">  <span class="comment">// &quot;parser&quot;: &quot;@typescript-eslint/parser&quot;,</span></span><br><span class="line">  <span class="comment">// 配置解析器支持的语法</span></span><br><span class="line">  <span class="attr">parser</span>: <span class="string">&#x27;@typescript-eslint/parser&#x27;</span>,</span><br><span class="line">  <span class="attr">parserOptions</span>: &#123;</span><br><span class="line">    <span class="attr">ecmaFeatures</span>: &#123;</span><br><span class="line">      <span class="attr">jsx</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">ecmaVersion</span>: <span class="number">12</span>,</span><br><span class="line">    <span class="attr">sourceType</span>: <span class="string">&#x27;module&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ESLint 支持使用第三方插件。在使用插件之前，你必须使用 npm 安装它。</span></span><br><span class="line">  <span class="comment">// 在配置文件里配置插件时，可以使用 plugins 关键字来存放插件名字的列表。插件名称可以省略 eslint-plugin- 前缀。</span></span><br><span class="line">  <span class="attr">plugins</span>: [<span class="string">&#x27;react&#x27;</span>, <span class="string">&#x27;react-hooks&#x27;</span>, <span class="string">&#x27;@typescript-eslint&#x27;</span>],</span><br><span class="line">  <span class="comment">// ESLint 附带有大量的规则。你可以使用注释或配置文件修改你项目中要使用的规则。要改变一个规则设置，你必须将规则 ID 设置为下列值之一：</span></span><br><span class="line">  <span class="comment">// &quot;off&quot; 或 0 - 关闭规则</span></span><br><span class="line">  <span class="comment">// &quot;warn&quot; 或 1 - 开启规则，使用警告级别的错误：warn (不会导致程序退出)</span></span><br><span class="line">  <span class="comment">// &quot;error&quot; 或 2 - 开启规则，使用错误级别的错误：error (当被触发的时候，程序会退出)</span></span><br><span class="line">  <span class="attr">rules</span>: &#123;</span><br><span class="line">    <span class="attr">quotes</span>: [<span class="number">2</span>, <span class="string">&#x27;single&#x27;</span>], <span class="comment">//单引号</span></span><br><span class="line">    <span class="string">&#x27;no-console&#x27;</span>: <span class="number">1</span>, <span class="comment">//不禁用console</span></span><br><span class="line">    <span class="string">&#x27;no-debugger&#x27;</span>: <span class="number">2</span>, <span class="comment">//禁用debugger</span></span><br><span class="line">    <span class="string">&#x27;no-var&#x27;</span>: <span class="number">2</span>, <span class="comment">//对var警告</span></span><br><span class="line">    <span class="attr">semi</span>: <span class="number">2</span>, <span class="comment">//不强制使用分号</span></span><br><span class="line">    <span class="string">&#x27;no-irregular-whitespace&#x27;</span>: <span class="number">1</span>, <span class="comment">//不规则的空白不允许</span></span><br><span class="line">    <span class="string">&#x27;no-trailing-spaces&#x27;</span>: <span class="number">1</span>, <span class="comment">//一行结束后面有空格就发出警告</span></span><br><span class="line">    <span class="string">&#x27;eol-last&#x27;</span>: <span class="number">0</span>, <span class="comment">//文件以单一的换行符结束</span></span><br><span class="line">    <span class="string">&#x27;no-unused-vars&#x27;</span>: [<span class="number">2</span>, &#123; <span class="attr">vars</span>: <span class="string">&#x27;all&#x27;</span>, <span class="attr">args</span>: <span class="string">&#x27;after-used&#x27;</span> &#125;], <span class="comment">//不能有声明后未被使用的变量或参数</span></span><br><span class="line">    <span class="string">&#x27;no-underscore-dangle&#x27;</span>: <span class="number">0</span>, <span class="comment">//标识符不能以_开头或结尾</span></span><br><span class="line">    <span class="string">&#x27;no-alert&#x27;</span>: <span class="number">2</span>, <span class="comment">//禁止使用alert confirm prompt</span></span><br><span class="line">    <span class="string">&#x27;no-lone-blocks&#x27;</span>: <span class="number">1</span>, <span class="comment">//禁止不必要的嵌套块</span></span><br><span class="line">    <span class="string">&#x27;no-class-assign&#x27;</span>: <span class="number">2</span>, <span class="comment">//禁止给类赋值</span></span><br><span class="line">    <span class="string">&#x27;no-cond-assign&#x27;</span>: <span class="number">2</span>, <span class="comment">//禁止在条件表达式中使用赋值语句</span></span><br><span class="line">    <span class="string">&#x27;no-const-assign&#x27;</span>: <span class="number">2</span>, <span class="comment">//禁止修改const声明的变量</span></span><br><span class="line">    <span class="string">&#x27;no-delete-var&#x27;</span>: <span class="number">2</span>, <span class="comment">//不能对var声明的变量使用delete操作符</span></span><br><span class="line">    <span class="string">&#x27;no-dupe-keys&#x27;</span>: <span class="number">2</span>, <span class="comment">//在创建对象字面量时不允许键重复</span></span><br><span class="line">    <span class="string">&#x27;no-duplicate-case&#x27;</span>: <span class="number">2</span>, <span class="comment">//switch中的case标签不能重复</span></span><br><span class="line">    <span class="string">&#x27;no-dupe-args&#x27;</span>: <span class="number">2</span>, <span class="comment">//函数参数不能重复</span></span><br><span class="line">    <span class="string">&#x27;no-empty&#x27;</span>: <span class="number">2</span>, <span class="comment">//块语句中的内容不能为空</span></span><br><span class="line">    <span class="string">&#x27;no-func-assign&#x27;</span>: <span class="number">2</span>, <span class="comment">//禁止重复的函数声明</span></span><br><span class="line">    <span class="string">&#x27;no-invalid-this&#x27;</span>: <span class="number">2</span>, <span class="comment">//禁止无效的this，只能用在构造器，类，对象字面量</span></span><br><span class="line">    <span class="string">&#x27;no-redeclare&#x27;</span>: <span class="number">2</span>, <span class="comment">//禁止重复声明变量</span></span><br><span class="line">    <span class="string">&#x27;no-spaced-func&#x27;</span>: <span class="number">2</span>, <span class="comment">//函数调用时 函数名与()之间不能有空格</span></span><br><span class="line">    <span class="string">&#x27;no-this-before-super&#x27;</span>: <span class="number">2</span>, <span class="comment">//在调用super()之前不能使用this或super</span></span><br><span class="line">    <span class="string">&#x27;no-undef&#x27;</span>: <span class="number">2</span>, <span class="comment">//不能有未定义的变量</span></span><br><span class="line">    <span class="string">&#x27;no-use-before-define&#x27;</span>: <span class="number">0</span>, <span class="comment">//未定义前不能使用</span></span><br><span class="line">    <span class="attr">camelcase</span>: <span class="number">2</span>, <span class="comment">//强制驼峰法命名</span></span><br><span class="line">    <span class="string">&#x27;jsx-quotes&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;prefer-double&#x27;</span>], <span class="comment">//强制在JSX属性（jsx-quotes）中一致使用双引号</span></span><br><span class="line">    <span class="string">&#x27;react/display-name&#x27;</span>: <span class="number">0</span>, <span class="comment">//防止在React组件定义中丢失displayName</span></span><br><span class="line">    <span class="string">&#x27;react/forbid-prop-types&#x27;</span>: [<span class="number">2</span>, &#123; <span class="attr">forbid</span>: [<span class="string">&#x27;any&#x27;</span>] &#125;], <span class="comment">//禁止某些propTypes</span></span><br><span class="line">    <span class="string">&#x27;react/jsx-boolean-value&#x27;</span>: <span class="number">2</span>, <span class="comment">//在JSX中强制布尔属性符号</span></span><br><span class="line">    <span class="string">&#x27;react/jsx-closing-bracket-location&#x27;</span>: <span class="number">1</span>, <span class="comment">//在JSX中验证右括号位置</span></span><br><span class="line">    <span class="string">&#x27;react/jsx-curly-spacing&#x27;</span>: [<span class="number">2</span>, &#123; <span class="attr">when</span>: <span class="string">&#x27;never&#x27;</span>, <span class="attr">children</span>: <span class="literal">true</span> &#125;], <span class="comment">//在JSX属性和表达式中加强或禁止大括号内的空格。</span></span><br><span class="line">    <span class="string">&#x27;react/jsx-indent-props&#x27;</span>: [<span class="number">2</span>, <span class="number">4</span>], <span class="comment">//验证JSX中的props缩进</span></span><br><span class="line">    <span class="string">&#x27;react/jsx-key&#x27;</span>: <span class="number">2</span>, <span class="comment">//在数组或迭代器中验证JSX具有key属性</span></span><br><span class="line">    <span class="string">&#x27;react/jsx-max-props-per-line&#x27;</span>: [<span class="number">1</span>, &#123; <span class="attr">maximum</span>: <span class="number">1</span> &#125;], <span class="comment">// 限制JSX中单行上的props的最大数量</span></span><br><span class="line">    <span class="string">&#x27;react/jsx-no-bind&#x27;</span>: <span class="number">0</span>, <span class="comment">//JSX中不允许使用箭头函数和bind</span></span><br><span class="line">    <span class="string">&#x27;react/jsx-no-duplicate-props&#x27;</span>: <span class="number">2</span>, <span class="comment">//防止在JSX中重复的props</span></span><br><span class="line">    <span class="string">&#x27;react/jsx-no-literals&#x27;</span>: <span class="number">0</span>, <span class="comment">//防止使用未包装的JSX字符串</span></span><br><span class="line">    <span class="string">&#x27;react/jsx-no-undef&#x27;</span>: <span class="number">1</span>, <span class="comment">//在JSX中禁止未声明的变量</span></span><br><span class="line">    <span class="string">&#x27;react/jsx-pascal-case&#x27;</span>: <span class="number">0</span>, <span class="comment">//为用户定义的JSX组件强制使用PascalCase</span></span><br><span class="line">    <span class="string">&#x27;react/jsx-sort-props&#x27;</span>: <span class="number">2</span>, <span class="comment">//强化props按字母排序</span></span><br><span class="line">    <span class="string">&#x27;react/jsx-uses-react&#x27;</span>: <span class="number">1</span>, <span class="comment">//防止反应被错误地标记为未使用</span></span><br><span class="line">    <span class="string">&#x27;react/jsx-uses-vars&#x27;</span>: <span class="number">2</span>, <span class="comment">//防止在JSX中使用的变量被错误地标记为未使用</span></span><br><span class="line">    <span class="string">&#x27;react/no-danger&#x27;</span>: <span class="number">0</span>, <span class="comment">//防止使用危险的JSX属性</span></span><br><span class="line">    <span class="string">&#x27;react/no-did-mount-set-state&#x27;</span>: <span class="number">0</span>, <span class="comment">//防止在componentDidMount中使用setState</span></span><br><span class="line">    <span class="string">&#x27;react/no-did-update-set-state&#x27;</span>: <span class="number">1</span>, <span class="comment">//防止在componentDidUpdate中使用setState</span></span><br><span class="line">    <span class="string">&#x27;react/no-direct-mutation-state&#x27;</span>: <span class="number">2</span>, <span class="comment">//防止this.state的直接变异</span></span><br><span class="line">    <span class="string">&#x27;react/no-multi-comp&#x27;</span>: <span class="number">0</span>, <span class="comment">//防止每个文件有多个组件定义</span></span><br><span class="line">    <span class="string">&#x27;react/no-set-state&#x27;</span>: <span class="number">0</span>, <span class="comment">//防止使用setState</span></span><br><span class="line">    <span class="string">&#x27;react/no-unknown-property&#x27;</span>: <span class="number">2</span>, <span class="comment">//防止使用未知的DOM属性</span></span><br><span class="line">    <span class="string">&#x27;react/prefer-es6-class&#x27;</span>: <span class="number">2</span>, <span class="comment">//为React组件强制执行ES5或ES6类</span></span><br><span class="line">    <span class="string">&#x27;react/prop-types&#x27;</span>: <span class="number">0</span>, <span class="comment">//防止在React组件定义中丢失props验证</span></span><br><span class="line">    <span class="string">&#x27;react/react-in-jsx-scope&#x27;</span>: <span class="number">2</span>, <span class="comment">//使用JSX时防止丢失React</span></span><br><span class="line">    <span class="string">&#x27;react/self-closing-comp&#x27;</span>: <span class="number">0</span>, <span class="comment">//防止没有children的组件的额外结束标签</span></span><br><span class="line">    <span class="string">&#x27;react/sort-comp&#x27;</span>: <span class="number">2</span>, <span class="comment">//强制组件方法顺序</span></span><br><span class="line">    <span class="string">&#x27;no-extra-boolean-cast&#x27;</span>: <span class="number">0</span>, <span class="comment">//禁止不必要的bool转换</span></span><br><span class="line">    <span class="string">&#x27;react/no-array-index-key&#x27;</span>: <span class="number">1</span>, <span class="comment">//防止在数组中遍历中使用数组key做索引</span></span><br><span class="line">    <span class="string">&#x27;react/no-deprecated&#x27;</span>: <span class="number">1</span>, <span class="comment">//不使用弃用的方法</span></span><br><span class="line">    <span class="string">&#x27;react/jsx-equals-spacing&#x27;</span>: <span class="number">2</span>, <span class="comment">//在JSX属性中强制或禁止等号周围的空格</span></span><br><span class="line">    <span class="string">&#x27;no-unreachable&#x27;</span>: <span class="number">2</span>, <span class="comment">//不能有无法执行的代码</span></span><br><span class="line">    <span class="string">&#x27;comma-dangle&#x27;</span>: <span class="number">0</span>, <span class="comment">//对象字面量项尾不能有逗号</span></span><br><span class="line">    <span class="string">&#x27;no-mixed-spaces-and-tabs&#x27;</span>: <span class="number">1</span>, <span class="comment">//禁止混用tab和空格</span></span><br><span class="line">    <span class="string">&#x27;prefer-arrow-callback&#x27;</span>: <span class="number">0</span>, <span class="comment">//比较喜欢箭头回调</span></span><br><span class="line">    <span class="string">&#x27;arrow-parens&#x27;</span>: <span class="number">0</span>, <span class="comment">//箭头函数用小括号括起来</span></span><br><span class="line">    <span class="string">&#x27;arrow-spacing&#x27;</span>: <span class="number">1</span>, <span class="comment">//=&gt;的前/后括号</span></span><br><span class="line">    <span class="string">&#x27;react-hooks/rules-of-hooks&#x27;</span>: <span class="string">&#x27;error&#x27;</span>, <span class="comment">// 检查 hook 的规则</span></span><br><span class="line">    <span class="string">&#x27;react-hooks/exhaustive-deps&#x27;</span>: <span class="string">&#x27;warn&#x27;</span>, <span class="comment">// 检查 effect 的依赖</span></span><br><span class="line">    <span class="string">&#x27;multiline-ternary&#x27;</span>: [<span class="string">&#x27;error&#x27;</span>, <span class="string">&#x27;always-multiline&#x27;</span>], <span class="comment">// 三木运算符换行</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-2-Prettier"><a href="#5-2-Prettier" class="headerlink" title="5.2 Prettier"></a>5.2 Prettier</h3><p>我们可以借助 Eslint 来提高我们编码的质量，但是却无法保证统一代码风格。一个统一的代码风格对于团队来说是很有价值的，所以为了达到目的，我们可以选择使用 Prettier 在保存和提交代码的时候，将代码修改成统一的风格。这样做同时也降低了 Code Review 的成本。它不会代替 Eslint，所以需要和 Eslint 搭配使用。</p><h4 id="5-2-1-安装依赖"><a href="#5-2-1-安装依赖" class="headerlink" title="5.2.1 安装依赖"></a>5.2.1 安装依赖</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D prettier eslint-config-prettier eslint-plugin-prettier</span><br></pre></td></tr></table></figure><h4 id="5-2-2-修改-Eslint-配置"><a href="#5-2-2-修改-Eslint-配置" class="headerlink" title="5.2.2  修改 Eslint 配置"></a>5.2.2  修改 Eslint 配置</h4><p>打开 .eslintrc.js 文件，在扩展中增加 “plugin:prettier&#x2F;recommended” ：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;extends&quot;</span>: [</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">&quot;plugin:prettier/recommended&quot;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="5-2-3-增加-prettier-配置文件"><a href="#5-2-3-增加-prettier-配置文件" class="headerlink" title="5.2.3 增加 prettier 配置文件"></a>5.2.3 增加 prettier 配置文件</h4><p>在根目录创建 .prettierrc.js ：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="string">&quot;singleQuote&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&quot;trailingComma&quot;</span>: <span class="string">&#x27;all&#x27;</span>,</span><br><span class="line">  <span class="string">&quot;printWidth&quot;</span>: <span class="number">120</span>, <span class="comment">//一行的字符数，如果超过会进行换行，默认为80</span></span><br><span class="line">  <span class="string">&quot;tabWidth&quot;</span>: <span class="number">2</span>, <span class="comment">//一个tab代表几个空格数，默认为2</span></span><br><span class="line">  <span class="string">&quot;overrides&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">files</span>: <span class="string">&quot;.prettierrc&quot;</span>,</span><br><span class="line">      <span class="attr">option</span>: &#123; <span class="string">&quot;parser&quot;</span>: <span class="string">&quot;json&quot;</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-提交时校验"><a href="#5-3-提交时校验" class="headerlink" title="5.3 提交时校验"></a>5.3 提交时校验</h3><p>如果，我们想要使用 git 提交代码时，通过 prettier 来优化代码，还需要借助一些工具来完成。</p><ul><li>husky：一个方便用来处理 pre-commit 、 pre-push 等 githooks 的工具</li><li>lint-staged：对 git 暂存区的代码，运行 linters 的工具</li></ul><h4 id="5-3-1-安装依赖"><a href="#5-3-1-安装依赖" class="headerlink" title="5.3.1 安装依赖"></a>5.3.1 安装依赖</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i lint-staged husky -D</span><br></pre></td></tr></table></figure><h4 id="5-3-2-增加配置"><a href="#5-3-2-增加配置" class="headerlink" title="5.3.2 增加配置"></a>5.3.2 增加配置</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="string">&quot;husky&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;hooks&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;pre-commit&quot;</span>: <span class="string">&quot;lint-staged&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;lint-staged&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;src/*.&#123;js,jsx,mjs,ts,tsx&#125;&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;node_modules/.bin/prettier --single-quote --write&quot;</span>,</span><br><span class="line">      <span class="string">&quot;node_modules/.bin/eslint --cache --fix&quot;</span>,</span><br><span class="line">      <span class="string">&quot;git add&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;src/*.&#123;css,scss,less,json,html,md,markdown&#125;&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;node_modules/.bin/prettier --single-quote --write&quot;</span>,</span><br><span class="line">      <span class="string">&quot;git add&quot;</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-3-3-测试-commit-命令"><a href="#5-3-3-测试-commit-命令" class="headerlink" title="5.3.3 测试 commit 命令"></a>5.3.3 测试 commit 命令</h4><h3 id="5-4-配置-VS-Code-编辑器"><a href="#5-4-配置-VS-Code-编辑器" class="headerlink" title="5.4 配置 VS Code 编辑器"></a>5.4 配置 VS Code 编辑器</h3><h4 id="5-4-1-在-VS-Code-商店中寻找并安装插件-ESlint，Prettier"><a href="#5-4-1-在-VS-Code-商店中寻找并安装插件-ESlint，Prettier" class="headerlink" title="5.4.1 在 VS Code 商店中寻找并安装插件 ESlint，Prettier"></a>5.4.1 在 VS Code 商店中寻找并安装插件 ESlint，Prettier</h4><h4 id="5-4-2-编辑-settings-json"><a href="#5-4-2-编辑-settings-json" class="headerlink" title="5.4.2  编辑 settings.json"></a>5.4.2  编辑 settings.json</h4><h5 id="5-4-2-1-当前项目配置"><a href="#5-4-2-1-当前项目配置" class="headerlink" title="5.4.2.1 当前项目配置"></a>5.4.2.1 当前项目配置</h5><ul><li>项目根目录创建 .vscode 文件夹</li><li>新建 setting.json</li><li>写入配置</li></ul><p>通过下面路径，可以找到相应的配置文件：</p><ul><li>Windows %APPDATA%\Code\User\settings.json</li><li>macOS $HOME&#x2F;Library&#x2F;Application Support&#x2F;Code&#x2F;User&#x2F;settings.json</li><li>Linux $HOME&#x2F;.config&#x2F;Code&#x2F;User&#x2F;settings.json</li></ul><p>然后增加如下参数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// tab 大小为2个空格</span></span><br><span class="line">  <span class="string">&quot;editor.tabSize&quot;</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="comment">// 编辑器换行</span></span><br><span class="line">  <span class="string">&quot;editor.wordWrap&quot;</span>: <span class="string">&quot;off&quot;</span>,</span><br><span class="line">  <span class="comment">// 保存时格式化</span></span><br><span class="line">  <span class="string">&quot;editor.formatOnSave&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 开启 vscode 文件路径导航</span></span><br><span class="line">  <span class="string">&quot;breadcrumbs.enabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// prettier 设置语句末尾不加分号</span></span><br><span class="line">  <span class="string">&quot;prettier.semi&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// prettier 设置强制单引号</span></span><br><span class="line">  <span class="string">&quot;prettier.singleQuote&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&quot;eslint.validata&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;javascript&quot;</span>,</span><br><span class="line">    <span class="string">&quot;javascriptreact&quot;</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;language&quot;</span>: <span class="string">&quot;typescript&quot;</span>,</span><br><span class="line">      <span class="string">&quot;autoFix&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;language&quot;</span>: <span class="string">&quot;typescriptreact&quot;</span>,</span><br><span class="line">      <span class="string">&quot;autoFix&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;[typescript]&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;[typescriptreact]&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;[json]&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;[javascript]&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;[html]&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;editor.codeActionsOnSave&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;source.fixAll.eslint&quot;</span>: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F; 未完待续</p>]]></content>
      
      
      <categories>
          
          <category> Posts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> # </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xxx/node_modules/.bin/dotenv: Permission denied</title>
      <link href="/2022/11/15/dotenv:%20Permission%20denied&#39;/"/>
      <url>/2022/11/15/dotenv:%20Permission%20denied&#39;/</url>
      
        <content type="html"><![CDATA[<h2 id="xxx-x2F-node-modules-x2F-bin-x2F-dotenv-Permission-denied"><a href="#xxx-x2F-node-modules-x2F-bin-x2F-dotenv-Permission-denied" class="headerlink" title="xxx&#x2F;node_modules&#x2F;.bin&#x2F;dotenv: Permission denied"></a>xxx&#x2F;node_modules&#x2F;.bin&#x2F;dotenv: Permission denied</h2><p>今天在 <code>Nginx</code> 部署时发现 <code>webpack</code> 打包报错了，从报错信息来看应该是前端依赖脚本被禁止了。</p><h2 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h2><p>这个错误是因为 <code>react-script</code> 脚本，在执行过程中读取不到依赖的相关脚本，从而抛出错误，手动修改一下读写权限就没问题了。</p><h2 id="赋予-node-modules-文件夹读写权限解决问题"><a href="#赋予-node-modules-文件夹读写权限解决问题" class="headerlink" title="赋予 node_modules 文件夹读写权限解决问题"></a>赋予 node_modules 文件夹读写权限解决问题</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">项目文件夹根目录下执行：</span><br><span class="line">  chmod -R 777 node_modules</span><br></pre></td></tr></table></figure><h2 id="chmod-命令简述"><a href="#chmod-命令简述" class="headerlink" title="chmod 命令简述"></a>chmod 命令简述</h2><p><code>chmod</code> 能改变权限，<code>-R</code> 是当前目录下所有文件，<code>777</code> 就是高权限（读、写、执行）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">示例：</span><br><span class="line">  chmod -R  777 /code/demo</span><br><span class="line">  运行命令后，demo文件夹（目录）的权限就被修改为777（可读可写可执行）。</span><br><span class="line"></span><br><span class="line">  chmod -R 777 * </span><br><span class="line">  * 代表通配符，会将当前目录下所有文件都给予777权限</span><br></pre></td></tr></table></figure><p>注意：在服务器中，有些进程是指定特殊权限（如755、700…）才能正常运行，切记不要再服务器根目录或敏感位置使用此命令，以免造成系统出错。</p>]]></content>
      
      
      <categories>
          
          <category> Posts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> # </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>eggjs 链接本地 MySql 时报错：Client does not support authentication protocol requested by server;</title>
      <link href="/2022/11/15/eggjs%20%E9%93%BE%E6%8E%A5%E6%9C%AC%E5%9C%B0%20MySql%20%E6%97%B6%E6%8A%A5%E9%94%99%EF%BC%9AClient%20does%20not%20support%20authentication%20protocol%20requested%20by%20server;/"/>
      <url>/2022/11/15/eggjs%20%E9%93%BE%E6%8E%A5%E6%9C%AC%E5%9C%B0%20MySql%20%E6%97%B6%E6%8A%A5%E9%94%99%EF%BC%9AClient%20does%20not%20support%20authentication%20protocol%20requested%20by%20server;/</url>
      
        <content type="html"><![CDATA[<h3 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h3><p>客户端使用<code>navicat for mysql</code>。本地安装了<code>mysql 8.0</code>。但是在启动<code>Eggjs</code>链接本地Mysql数据库的时候提示：<code>Client does not support authentication protocol requested by server;</code></p><p><img src="https://static.zhangyuyin.com/xTHLFt.png" alt="报错提示"></p><h3 id="二、原因查找"><a href="#二、原因查找" class="headerlink" title="二、原因查找"></a>二、原因查找</h3><p>通过查看网上别人遇到的相关问题，发现是由<code>navicat</code>版本的问题，出现连接失败的原因：<code>mysql8</code>之前的版本中加密规则是 <code>mysql_native_password</code>，而在<code>mysql 8</code>之后，加密规则是<code>caching_sha2_password</code>。并提供了两种解决方案</p><p>1、升级<code>navicat</code>，由于这个软件是收费的，升级会比较麻烦。</p><p>2、把用户密码登录的加密规则还原成<code>mysql_native_password</code>这种加密方式，下面就介绍第二种解决方案。</p><h3 id="三、问题排查"><a href="#三、问题排查" class="headerlink" title="三、问题排查"></a>三、问题排查</h3><p>查看用户信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select host,user,plugin,authentication_string from mysql.user;</span><br><span class="line"></span><br><span class="line">备注：</span><br><span class="line">host为 % 表示不限制ip</span><br><span class="line">localhost表示本机使用</span><br><span class="line">plugin非mysql_native_password 则需要修改密码</span><br></pre></td></tr></table></figure><p><img src="https://static.zhangyuyin.com/W1SNOs.png" alt="查看用户信息"></p><p>可以看到<code>root</code>用户使用的<code>plugin</code>是<code>caching_sha2_password</code>，<code>mysql</code>官方网站有如下说明：</p><p><img src="https://static.zhangyuyin.com/mvdbDc.jpg" alt="官网说明"></p><p>意思是说<code>caching_sha2_password</code>是8.0版本默认的认证插件，必须使用支持此插件的客户端版本。</p><p><code>plugin</code>的作用之一就是处理后的密码格式和长度是不一样的，类似于使用<code>MD5加密</code>和使用<code>base64加密</code>一样，对于同一个密码处理后的格式是不一样的。</p><p>四：问题解决</p><p>我不希望更新本地的客户端版本，想直接使用原来的环境来链接。</p><p>解决方法是将<code>root</code>的<code>plugin</code>改成<code>mysql_native_password</code>(相当于降了一级)。</p><p><code>mysql</code>官方网站提供了从<code>mysql_old_password</code>升级到<code>mysql_native_password</code>，我们可以仿照这个。官方原文如下：</p><p><img src="https://static.zhangyuyin.com/7Tqapp.jpg" alt="官方解释案例"></p><p>这里改成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;root&#x27;;</span><br></pre></td></tr></table></figure><p><img src="https://static.zhangyuyin.com/vHvWAY.png" alt="修改"></p><p>这行代码有两层含义，</p><ul><li><p>第一：修改<code>root</code>的密码为<code>&#39;root&#39;</code>，摒弃原来的旧密码。</p></li><li><p>第二：使用<code>mysql_native_password</code>对新密码进行编码。</p></li></ul><p>修改完成后再用启动登陆就可以成功了</p><h3 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h3><p>如果在修改插件的时候出现错误，可现将插件改为<code>mysql_old_password</code>，然后再升级成<code>mysql_native_password</code>，方法：</p><p><img src="https://static.zhangyuyin.com/kegbmu.jpg" alt="补充方法"></p>]]></content>
      
      
      <categories>
          
          <category> Posts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> # </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ksend—使用命令行推送个人文档到kindle。</title>
      <link href="/2022/11/15/ksend%E2%80%94%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%8E%A8%E9%80%81%E4%B8%AA%E4%BA%BA%E6%96%87%E6%A1%A3%E5%88%B0kindle%E3%80%82/"/>
      <url>/2022/11/15/ksend%E2%80%94%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%8E%A8%E9%80%81%E4%B8%AA%E4%BA%BA%E6%96%87%E6%A1%A3%E5%88%B0kindle%E3%80%82/</url>
      
        <content type="html"><![CDATA[<h1 id="…"><a href="#…" class="headerlink" title="…"></a>…</h1><h2 id="使用指南"><a href="#使用指南" class="headerlink" title="使用指南"></a>使用指南</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g ksend</span><br></pre></td></tr></table></figure><h3 id="设置默认发送邮箱，格式-邮箱地址-密码"><a href="#设置默认发送邮箱，格式-邮箱地址-密码" class="headerlink" title="设置默认发送邮箱，格式: 邮箱地址:密码"></a>设置默认发送邮箱，格式: 邮箱地址:密码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ksend --<span class="keyword">from</span> yourname@qq.<span class="property">com</span>:yourpassword</span><br></pre></td></tr></table></figure><h3 id="推送"><a href="#推送" class="headerlink" title="推送"></a>推送</h3><p>如下示例，推送 test.pdf 至 <a href="mailto:&#121;&#111;&#117;&#114;&#x6b;&#105;&#110;&#100;&#108;&#101;&#110;&#97;&#109;&#x65;&#64;&#107;&#x69;&#110;&#100;&#x6c;&#x65;&#46;&#x63;&#x6e;">&#121;&#111;&#117;&#114;&#x6b;&#105;&#110;&#100;&#108;&#101;&#110;&#97;&#109;&#x65;&#64;&#107;&#x69;&#110;&#100;&#x6c;&#x65;&#46;&#x63;&#x6e;</a> 这个kindle接收邮箱：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ksend -m yourkindlename@kindle.<span class="property">cn</span> test.<span class="property">pdf</span></span><br></pre></td></tr></table></figure><p>以上命令，参数 -m 表示接收邮箱。自此，完成推送。</p><h2 id="设置默认接收邮箱"><a href="#设置默认接收邮箱" class="headerlink" title="设置默认接收邮箱"></a>设置默认接收邮箱</h2><p>如果脚得每次都要敲 -m 接收邮箱 麻烦，可以设置默认接收邮箱：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ksend --to hanan@kindle.<span class="property">cn</span></span><br></pre></td></tr></table></figure><p>这样，以后只需要如下命令即可推送：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ksend a.<span class="property">pdf</span></span><br></pre></td></tr></table></figure><p>也可以同时推送多个文档：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ksend a.<span class="property">pdf</span> b.<span class="property">pdf</span> ../img/photo.<span class="property">jpg</span> /<span class="title class_">Users</span>/hanan/book/ooxx.<span class="property">txt</span></span><br></pre></td></tr></table></figure><h2 id="查看帮助："><a href="#查看帮助：" class="headerlink" title="查看帮助："></a>查看帮助：</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ksend --help</span><br></pre></td></tr></table></figure><p><b>ps: 记得把发送邮箱添加到您的kindle已认可的发件人电子邮箱列表哦</b></p>]]></content>
      
      
      <categories>
          
          <category> Posts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> # </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux服务器磁盘满了的处理方法</title>
      <link href="/2022/11/15/linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%A3%81%E7%9B%98%E6%BB%A1%E4%BA%86%E7%9A%84%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95/"/>
      <url>/2022/11/15/linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%A3%81%E7%9B%98%E6%BB%A1%E4%BA%86%E7%9A%84%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>今天连接 aliyun mysql 数据库报错，重启数据库显示磁盘满了，记录一下我的处理方法：</p><ul><li>df -h命令：通过df -h命令查看硬盘的使用情况：发现磁盘已经基本满了</li><li>知道了是硬盘满了的问题，那么下一步就是开始查找服务器中的大文件，从根目录开始查找，通过 <code>du -h --max-depth=1</code> 命令，找到占用磁盘最大的文件夹</li><li>然后通过 <code>du -h --max-depth=1</code> 命令依次往下查找，知道定位到罪魁祸首所在目录下</li><li>一般这种情况都是因为 log 日志导致的，通过 <code>rm -rf *</code> 删除即可</li><li>也有可能一个目录下面有上千上万个日志文件，通过通配符*匹配删除，会碰到<code>-[Argument list too long]</code>错误。</li><li>通过变通方法删除即可:<code>find ./ -name &quot;*.log&quot; -delete</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> Posts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> # </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>macOS 中使用vscode提示，EACCES: permission denied</title>
      <link href="/2022/11/15/macOS%20%E4%B8%AD%E4%BD%BF%E7%94%A8vscode%E6%8F%90%E7%A4%BA%EF%BC%8CEACCES:%20permission%20denied/"/>
      <url>/2022/11/15/macOS%20%E4%B8%AD%E4%BD%BF%E7%94%A8vscode%E6%8F%90%E7%A4%BA%EF%BC%8CEACCES:%20permission%20denied/</url>
      
        <content type="html"><![CDATA[<p><code>EACCES: permission denied, mkdir &#39;/Desktop/code/blog/fr-new/node_modules/.cache&#39;</code></p><p>项目启动时提示缺少权限，<code>sudo npm start</code> 后编译还是失败了。</p><p>解决： <code>sudo chown -R &lt;user-name&gt; &lt;directory-name&gt;</code></p><p>不需要重启vscode，此时再编译就已经ok了。</p>]]></content>
      
      
      <categories>
          
          <category> Posts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> # </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx: [error] open() &quot;/usr/local/nginx/logs/nginx.pid&quot; failed (2: No such file or directory)</title>
      <link href="/2022/11/15/nginx.pid%22%20failed%20(2:%20No%20such%20file%20or%20directory)/"/>
      <url>/2022/11/15/nginx.pid%22%20failed%20(2:%20No%20such%20file%20or%20directory)/</url>
      
        <content type="html"><![CDATA[<p>启动Nginx时候报错：nginx: [error] open() “&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs&#x2F;nginx.pid” failed (2: No such file or directory)</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>每次遇到还都不一样，这里我遇到了两种，在此分享</p><h4 id="情况一：nginx-conf的nginx-pid被注释了"><a href="#情况一：nginx-conf的nginx-pid被注释了" class="headerlink" title="情况一：nginx.conf的nginx.pid被注释了"></a>情况一：nginx.conf的nginx.pid被注释了</h4><p>进入nginx.conf目录编辑</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /usr/local/nginx/conf/nginx.conf</span><br><span class="line"></span><br><span class="line">// 这一行注释打开</span><br><span class="line">pid        logs/nginx.pid;</span><br><span class="line"></span><br><span class="line">// 重启 nginx 就 ok 了</span><br><span class="line">sudo nginx -s reload </span><br></pre></td></tr></table></figure><h4 id="情况二：没有指定配置目录"><a href="#情况二：没有指定配置目录" class="headerlink" title="情况二：没有指定配置目录"></a>情况二：没有指定配置目录</h4><p>输入来使用指定nginx.conf文件的方式重启nginx（首先保证上面第一种情况的pid没有被注释，否则可能前两次能打开，但是以后还是会报错的）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.<span class="property">conf</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Posts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> # </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pm2 启动 eggjs 项目</title>
      <link href="/2022/11/15/pm2%20%E5%90%AF%E5%8A%A8%20eggjs%20%E9%A1%B9%E7%9B%AE/"/>
      <url>/2022/11/15/pm2%20%E5%90%AF%E5%8A%A8%20eggjs%20%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 start npm --name eggjs -- run start</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Posts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> # </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tar包和tar.gz包有什么区别</title>
      <link href="/2022/11/15/tar%E5%8C%85%E5%92%8Ctar.gz%E5%8C%85%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/"/>
      <url>/2022/11/15/tar%E5%8C%85%E5%92%8Ctar.gz%E5%8C%85%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>.tar只是将文件打包，文件的大小没什么变化，一般用tar -cvf filename.tar filename格式；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">解压</span><br><span class="line">tar -xvf filename.tar</span><br></pre></td></tr></table></figure><p>.tar.gz是加入了gzip的压缩命令，会将文件压缩存放，可以有效压缩文件的大小，以便于缩短传输时间或者释放磁盘空间，一般用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">压缩</span><br><span class="line">tar -czvf filename.tar.gz filename</span><br><span class="line"></span><br><span class="line">解压</span><br><span class="line">tar -xzvf filename.tar.gz</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Posts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> # </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个人走得快，一群人走得远</title>
      <link href="/2022/11/15/%E4%B8%80%E4%B8%AA%E4%BA%BA%E8%B5%B0%E5%BE%97%E5%BF%AB%EF%BC%8C%E4%B8%80%E7%BE%A4%E4%BA%BA%E8%B5%B0%E5%BE%97%E8%BF%9C/"/>
      <url>/2022/11/15/%E4%B8%80%E4%B8%AA%E4%BA%BA%E8%B5%B0%E5%BE%97%E5%BF%AB%EF%BC%8C%E4%B8%80%E7%BE%A4%E4%BA%BA%E8%B5%B0%E5%BE%97%E8%BF%9C/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这个世界既不黑也不白，而是一道精致的灰。世界不存在绝对的黑或白，就像事情无绝对的对与错，很多事情是没办法完全用对错来决定的，有时候必须要从不同角度看问题，从不同角度看会发现不一样的看法和观点，所以大概可以这么说，我们看到的世界是经过自我加工或是他人加工呈现的世界模样，我们看到的永远不会是最真实的，全面的，所以被称作精致的灰吧</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Posts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> # </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一道阿里笔试题</title>
      <link href="/2022/11/15/%E4%B8%80%E9%81%93%E9%98%BF%E9%87%8C%E7%AC%94%E8%AF%95%E9%A2%98/"/>
      <url>/2022/11/15/%E4%B8%80%E9%81%93%E9%98%BF%E9%87%8C%E7%AC%94%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> menu = [</span><br><span class="line">    &#123; <span class="string">&quot;Id&quot;</span>: <span class="number">1</span>, <span class="string">&quot;ParentId&quot;</span>: <span class="literal">null</span>, <span class="string">&quot;Sort&quot;</span>: <span class="number">0</span>, <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;菜单1&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="string">&quot;Id&quot;</span>: <span class="number">2</span>, <span class="string">&quot;ParentId&quot;</span>: <span class="number">1</span>, <span class="string">&quot;Sort&quot;</span>: <span class="number">0</span>, <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;菜单1-1&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="string">&quot;Id&quot;</span>: <span class="number">3</span>, <span class="string">&quot;ParentId&quot;</span>: <span class="number">1</span>, <span class="string">&quot;Sort&quot;</span>: <span class="number">1</span>, <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;菜单1-2&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="string">&quot;Id&quot;</span>: <span class="number">4</span>, <span class="string">&quot;ParentId&quot;</span>: <span class="number">2</span>, <span class="string">&quot;Sort&quot;</span>: <span class="number">2</span>, <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;菜单1-1-2&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="string">&quot;Id&quot;</span>: <span class="number">5</span>, <span class="string">&quot;ParentId&quot;</span>: <span class="number">2</span>, <span class="string">&quot;Sort&quot;</span>: <span class="number">1</span>, <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;菜单1-1-1&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="string">&quot;Id&quot;</span>: <span class="number">6</span>, <span class="string">&quot;ParentId&quot;</span>: <span class="literal">null</span>, <span class="string">&quot;Sort&quot;</span>: <span class="number">1</span>, <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;菜单2&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="string">&quot;Id&quot;</span>: <span class="number">7</span>, <span class="string">&quot;ParentId&quot;</span>: <span class="number">6</span>, <span class="string">&quot;Sort&quot;</span>: <span class="number">0</span>, <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;菜单2-1&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="string">&quot;Id&quot;</span>: <span class="number">8</span>, <span class="string">&quot;ParentId&quot;</span>: <span class="number">6</span>, <span class="string">&quot;Sort&quot;</span>: <span class="number">1</span>, <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;菜单2-2&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="string">&quot;Id&quot;</span>: <span class="number">9</span>, <span class="string">&quot;ParentId&quot;</span>: <span class="number">8</span>, <span class="string">&quot;Sort&quot;</span>: <span class="number">2</span>, <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;菜单2-2-2&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="string">&quot;Id&quot;</span>: <span class="number">10</span>, <span class="string">&quot;ParentId&quot;</span>: <span class="number">8</span>, <span class="string">&quot;Sort&quot;</span>: <span class="number">1</span>, <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;菜单2-2-1&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="string">&quot;Id&quot;</span>: <span class="number">11</span>, <span class="string">&quot;ParentId&quot;</span>: <span class="number">10</span>, <span class="string">&quot;Sort&quot;</span>: <span class="number">0</span>, <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;菜单2-2-1-1&quot;</span> &#125;</span><br><span class="line">]</span><br><span class="line">将上面的数据结果转成</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">a</span>&gt;</span>菜单1-1-1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">a</span>&gt;</span>菜单1-1-2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">a</span>&gt;</span>菜单1-1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">a</span>&gt;</span>菜单1-2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">a</span>&gt;</span>菜单1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">这种格式</span><br></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>这道题考察的只要是递归的用法，首先得把数据结构转化下，转成如下格式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;Id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;ParentId&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&quot;Sort&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;菜单1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;children&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&quot;Id&quot;</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="string">&quot;ParentId&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">&quot;Sort&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;菜单1-1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;children&quot;</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="string">&quot;Id&quot;</span>: <span class="number">5</span>,</span><br><span class="line">            <span class="string">&quot;ParentId&quot;</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="string">&quot;Sort&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;菜单1-1-1&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="string">&quot;Id&quot;</span>: <span class="number">4</span>,</span><br><span class="line">            <span class="string">&quot;ParentId&quot;</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="string">&quot;Sort&quot;</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;菜单1-1-2&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&quot;Id&quot;</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="string">&quot;ParentId&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">&quot;Sort&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;菜单1-2&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>主要用到了递归的思想，具体方法如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">digui</span>(<span class="params">total, item</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!total || total.<span class="property">children</span> === <span class="number">0</span>) <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> obj <span class="keyword">of</span> total) &#123;</span><br><span class="line">        <span class="keyword">if</span> (obj.<span class="property">Id</span> === item.<span class="property">ParentId</span>) &#123;</span><br><span class="line">            obj.<span class="property">children</span> = obj.<span class="property">children</span> || []</span><br><span class="line">            <span class="comment">// 这里根据Id和ParentId生成children数据</span></span><br><span class="line">            obj.<span class="property">children</span>.<span class="title function_">push</span>(item)</span><br><span class="line">            obj.<span class="property">children</span>.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.<span class="property">Sort</span> - b.<span class="property">Sort</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">digui</span>(obj.<span class="property">children</span>, item)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">genData</span>(<span class="params">menu</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> menu.<span class="title function_">reduce</span>(<span class="function">(<span class="params">total, item, index</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (item.<span class="property">ParentId</span>) &#123;</span><br><span class="line">            <span class="title function_">digui</span>(total, item)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            total.<span class="title function_">push</span>(item)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> total</span><br><span class="line">    &#125;, [])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数据转好了，然后转好的数据生成字符串，同样也是用到了递归的方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">genHtml</span>(<span class="params">item</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;ul&gt;</span></span><br><span class="line"><span class="string">            &lt;li&gt;</span></span><br><span class="line"><span class="string">                &lt;a&gt;<span class="subst">$&#123;item.Name&#125;</span>&lt;/a&gt;</span></span><br><span class="line"><span class="string">                <span class="subst">$&#123;(item.children ? item.children.map(_item =&gt; genHtml(_item)).join(<span class="string">&#x27;&#x27;</span>) : <span class="string">&#x27;&#x27;</span>)&#125;</span></span></span><br><span class="line"><span class="string">            &lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;/ul&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后获取结果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">genData</span>(menu).<span class="title function_">map</span>(genHtml).<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Posts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> # </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么要自建图床以及怎么做</title>
      <link href="/2022/11/15/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E8%87%AA%E5%BB%BA%E5%9B%BE%E5%BA%8A%E4%BB%A5%E5%8F%8A%E6%80%8E%E4%B9%88%E5%81%9A/"/>
      <url>/2022/11/15/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E8%87%AA%E5%BB%BA%E5%9B%BE%E5%BA%8A%E4%BB%A5%E5%8F%8A%E6%80%8E%E4%B9%88%E5%81%9A/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>我的博客从2020年年中至今，经历了一些变化的同时，抛弃了静态构建的开发方式。此前我的博客很长一段时间是使用第三方服务作为图床，但是由于第三方提供的服务并不可靠，导致博客文章很多配图丢失了。我意识到我需要一个稳定可靠的图床，所以开始用阿里云自建一个我自己的图床，目前已经稳定使用了大半年。</p><p>我起初以为很难，而且费用不低。但是在这半年，我每个月的 CDN 费用不高（当然这也因为访问量不高）。我自诩自己的博客虽不”强壮”，但也不至于荒废或者没什么人访问，所以拥有一个可控、稳定、便捷的图床工具意义重大。</p><p>当然，虽然我用的是阿里云，但用到其它云服务都是一样的，你可以读完后价比三家再作选择。</p><blockquote><p>声明：本文和阿里云没有任何利益关系。</p></blockquote><h2 id="云服务做图床的原理"><a href="#云服务做图床的原理" class="headerlink" title="云服务做图床的原理"></a>云服务做图床的原理</h2><p><img src="https://static.zhangyuyin.com/mpDScy.jpg" alt="图床工作原理(来自网络)"></p><p>云服务产品有很多，搭建图床只需要关注 OSS 和 CDN。 OSS 是对象存储服务，通俗来说就是用来存文件的。OSS 都有对应的域名，文件保存在 OSS 后，可以通过 URL 访问或下载。</p><p>但是直接通过 OSS 下载的成本很高，价格十分昂贵，所以我们需要 CDN 来分发，节约成本。在阿里云，可以把 CDN 绑定到 OSS，通过 CDN 去访问这个文件时，如果是首次访问，CDN 会从 OSS 取得这个文件，这个过程叫「回源」。之后再访问会直接从 CDN 读取。</p><h2 id="步骤详解"><a href="#步骤详解" class="headerlink" title="步骤详解"></a>步骤详解</h2><p>因为我自己用的是阿里云，所以以阿里云为例（此时默认你已经注册好帐号）。</p><h3 id="创建一个-OSS-Bucket"><a href="#创建一个-OSS-Bucket" class="headerlink" title="创建一个 OSS Bucket"></a>创建一个 OSS Bucket</h3><p>一个 Bucket 相当于 OSS 中的一个存储空间，在 OSS 控制台 点击创建 Bucket：</p><p>  <img src="https://static.zhangyuyin.com/Refsb2.png" alt="创建Bucket"></p><p>填好 Bucket 名称和区域，其它选项按照默认即可。</p><p>创建成功后，在 Bucket 的文件管理可以上传文件：</p><p>  <img src="https://static.zhangyuyin.com/KC9Pgh.png" alt="上传文件到Bucket"></p><p>查看上传文件的信息，你可以看到文件有 URL, 但由于在创建 Bucket 的时候，为了防止盗用，我们选的 Bucket 权限为私有，所以从 URL 其实无法访问这个文件：</p><p><img src="https://static.zhangyuyin.com/pDQshU.png" alt="查看上传的文件"></p><h3 id="创建-CDN-配置"><a href="#创建-CDN-配置" class="headerlink" title="创建 CDN 配置"></a>创建 CDN 配置</h3><p>在 CDN 控制台 进入域名管理，就可以开始配置 CDN 域名。</p><p>所以，在创建 CDN 前，你需要买一个域名。这个域名可以随便买个便宜的不主流的，因为没人在意一个图床的域名。</p><p>创建域名后，有一个要注意的地方，就是如果你需要国内加速，你的域名必须备案。备案其实是整个自建图床成本最高的一个环节。如果你的博客或者网站域名已经备案，那么可以直接用这个域名分配一个二级域名给 CDN 用。省去再备案的麻烦。</p><p><img src="https://static.zhangyuyin.com/wsDwlP.png" alt="添加域名"></p><p>比如我的域名是 yourname.com, 那么你的加速域名可以是 static.yourname.com。</p><p>源站信息选「OSS域名」，选中之后会出现一个下拉选择，可以选中刚刚创建的 Bucket 源站：</p><p><img src="https://static.zhangyuyin.com/V2hvh6.png" alt="oss源站信息"></p><p>如果你的网站用 https, 端口选 443.</p><p>如果你域名已经备案，就选全球或中国大陆。</p><h3 id="设置域名的-CNAME"><a href="#设置域名的-CNAME" class="headerlink" title="设置域名的 CNAME"></a>设置域名的 CNAME</h3><p>创建完后，你需要把你域名的 CNAME 指定为提供的值。如果你域名解析也是用阿里云，可以查看<a href="https://help.aliyun.com/document_detail/27144.html?spm=5176.11785003.0.0.6402142fn9IEPG">这篇文档</a>。</p><p><img src="https://static.zhangyuyin.com/Gof2MZ.png" alt="CNAME"></p><h3 id="开启-HTTPS"><a href="#开启-HTTPS" class="headerlink" title="开启 HTTPS"></a>开启 HTTPS</h3><p><img src="https://static.zhangyuyin.com/tctkkf.png" alt="开启 HTTPS"></p><h3 id="开启私有-Bucket-回源"><a href="#开启私有-Bucket-回源" class="headerlink" title="开启私有 Bucket 回源"></a>开启私有 Bucket 回源</h3><p>因为前面在创建 Bucket 的时候权限设置为私有，所以需要给 CDN 开启私有 Bucket 回源的权限。</p><p><img src="https://static.zhangyuyin.com/puOy7M.png" alt="开启私有 Bucket 回源"></p><h3 id="配置-Refer-防盗链"><a href="#配置-Refer-防盗链" class="headerlink" title="配置 Refer 防盗链"></a>配置 Refer 防盗链</h3><p>CDN 防盗是有必要的，如果你的图片被别处盗用，会增加不必要的流量。所以推荐设置 Refer 防盗白名单，只对允许指定的域名访问：</p><p><img src="https://static.zhangyuyin.com/DpmF31.png" alt="防盗链"></p><h3 id="使用-uPic-方便上传图片"><a href="#使用-uPic-方便上传图片" class="headerlink" title="使用 uPic 方便上传图片"></a>使用 uPic 方便上传图片</h3><p>以上的准备都做完后，你已经拥有了一个图床。现在就需要一个方便的工具把图片上传到图床。如果你用 macOS, 我推荐开源的 <a href="https://github.com/gee1k/uPic">uPic</a></p><p><img src="https://static.zhangyuyin.com/zbZgaQ.jpg" alt="uPic演示"></p><h4 id="配置-uPic"><a href="#配置-uPic" class="headerlink" title="配置 uPic"></a>配置 uPic</h4><p>添加阿里云 OSS 配置：</p><p><img src="https://static.zhangyuyin.com/7XhxRh.png" alt="阿里云 OSS 配置"></p><p>这里需要填 AccessKey 和 SecretKey：</p><p><img src="https://static.zhangyuyin.com/FPoNZI.png" alt="这里需要填 AccessKey 和 SecretKey"></p><p>你可以在 <a href="https://ram.console.aliyun.com/users">RAM 控制台</a> 创建一个用户，然后创建 AccessKey.</p><p>创建后给这个 AccessKey 授 AliyunOSSFullAccess 这个权限：</p><p><img src="https://static.zhangyuyin.com/yEmkPV.png" alt="添加权限"></p><h2 id="操作演示"><a href="#操作演示" class="headerlink" title="操作演示"></a>操作演示</h2><p>有了图床 + uPic 后，截图上传只需要一步就能搞定，使用也是极其方便：</p><p><img src="https://static.zhangyuyin.com/UpicTest.gif" alt="演示效果"></p>]]></content>
      
      
      <categories>
          
          <category> Posts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> # </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是内卷</title>
      <link href="/2022/11/15/%E4%BB%80%E4%B9%88%E6%98%AF%E5%86%85%E5%8D%B7/"/>
      <url>/2022/11/15/%E4%BB%80%E4%B9%88%E6%98%AF%E5%86%85%E5%8D%B7/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是内卷"><a href="#什么是内卷" class="headerlink" title="什么是内卷"></a>什么是内卷</h3><ul><li><p>追女生，为了更好地表示心意，一个男人钻石恒永远一颗永流传了，其他人不得不跟着钻石永久传，所有人都花了更多的钱，只有卖钻石的赚了。</p></li><li><p>抢火车票，一个人先用抢票软件，逼得其他人也用抢票软件，因为票没有变多，最后大家都回到了起跑线，但是开发抢票软件的赚了。</p></li><li><p>孩子上学，一个孩子上辅导班，逼得大家都去上辅导班，最后排名还是没变，但开辅导班的赚了。</p></li><li><p>本来大家都是工作8小时，有人开始加班，最后逼得所有人都加班，所有人挣得还是那点钱，但是老板的3系换5系了。</p></li></ul><p><strong>内卷是啥，就是大家都损失了，只有一小撮人赚了。</strong></p><p><strong>内卷就是人口过剩。内卷就是无法带来质变的量变。</strong></p><h3 id="如何走出内卷"><a href="#如何走出内卷" class="headerlink" title="如何走出内卷"></a>如何走出内卷</h3><h4 id="1"><a href="#1" class="headerlink" title="1"></a>1</h4><blockquote><p>“华盛顿不是一个生活的地方。这里房租高，这里吃的差，这里的灰尘令人作呕，这里的道德令人厌恶。<br>去西部吧，年轻人。去西部，并和国家一起成长。”——纽约论坛报，1865年。</p></blockquote><h4 id="2"><a href="#2" class="headerlink" title="2"></a>2</h4><blockquote><p>“现在则相反，除粮食外，每天每人只有五分的油盐柴菜钱，还是难乎为继。<br>仅仅发油盐柴菜钱，每月也需现洋万元以上，全靠打土豪供给。现在全军五千人的冬衣，有了棉花，还缺少布。<br>这样冷了，许多士兵还是穿两层单衣。好在苦惯了，而且什么人都是一样苦，从军长到伙夫，除粮食外一律吃五分钱的伙食。发零用钱，两角即一律两角，四角即一律四角。因此士兵也不怨恨什么人。”<br>——毛选《井冈山的斗争》</p></blockquote><p>So，要么多一点，要么均一点，其实就这么简单。</p>]]></content>
      
      
      <categories>
          
          <category> Posts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> # </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从0开始，阿里云部署web应用</title>
      <link href="/2022/11/15/%E4%BB%8E0%E5%BC%80%E5%A7%8B%EF%BC%8C%E9%98%BF%E9%87%8C%E4%BA%91%E9%83%A8%E7%BD%B2web%E5%BA%94%E7%94%A8/"/>
      <url>/2022/11/15/%E4%BB%8E0%E5%BC%80%E5%A7%8B%EF%BC%8C%E9%98%BF%E9%87%8C%E4%BA%91%E9%83%A8%E7%BD%B2web%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="域名注册"><a href="#域名注册" class="headerlink" title="域名注册"></a>域名注册</h2><p>没有域名的话可以去万网进行购买，操作简单，流程便捷。</p><p><img src="http://lc-4ltdklta.cn-n1.lcfile.com/98d94bf9e0fe8dd57b2b.png/image.png" alt="域名注册"></p><p>购买时需要实名认证（填写消息模板），然后付款购买，你就拥有了属于自己的域名了。</p><p><img src="http://lc-4ltdklta.cn-n1.lcfile.com/b9121cd73a893161d1e8.png/image%20%281%29.png" alt="域名"></p><h2 id="注册SSL证书"><a href="#注册SSL证书" class="headerlink" title="注册SSL证书"></a>注册SSL证书</h2><p><img src="http://lc-4ltdklta.cn-n1.lcfile.com/755fd69b15c328d0e446.png/image%20%282%29.png" alt="购买证书"><br>我选择的是免费版，申请证书并签发之后就可以进行SLB负载均衡部署操作了；</p><h2 id="创建实例"><a href="#创建实例" class="headerlink" title="创建实例"></a>创建实例</h2><h3 id="购买esc实例"><a href="#购买esc实例" class="headerlink" title="购买esc实例"></a>购买esc实例</h3><p>ecs实例购买地址：<a href="https://ecs-buy.aliyun.com/simple/#/simple">https://ecs-buy.aliyun.com/simple/#/simple</a></p><p>我购买的参数配置<img src="http://lc-4ltdklta.cn-n1.lcfile.com/95785dbe10e72cae6da1.png/image%20%283%29.png" alt="参数配置"></p><p>注意镜像版本，会影响后续nginx安装版本的选择；</p><h3 id="esc控制台配置安全组"><a href="#esc控制台配置安全组" class="headerlink" title="esc控制台配置安全组"></a>esc控制台配置安全组</h3><p><img src="http://lc-4ltdklta.cn-n1.lcfile.com/d5119d7e48c8eae77c2e.png/image%20%284%29.png" alt="安全组"><br>实例启动后需要进行安全组配置：进入详情</p><h3 id="手动添加80端口"><a href="#手动添加80端口" class="headerlink" title="手动添加80端口"></a>手动添加80端口</h3><p>手动添加如下配置（必须配置80端口安全组，因为阿里云域名解析默认指向的是80端口）：<img src="http://lc-4ltdklta.cn-n1.lcfile.com/53dbf894e1a584a0d800.png/image%20%285%29.png" alt="80端口"></p><h2 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h2><h3 id="进入域名解析配置"><a href="#进入域名解析配置" class="headerlink" title="进入域名解析配置"></a>进入域名解析配置</h3><p><img src="http://lc-4ltdklta.cn-n1.lcfile.com/7d5c76dffb919ab9a411.png/image%20%286%29.png" alt="域名解析"></p><h3 id="添加记录"><a href="#添加记录" class="headerlink" title="添加记录"></a>添加记录</h3><p><img src="http://lc-4ltdklta.cn-n1.lcfile.com/d57d8e0ead17e7a0347c.png/image%20%287%29.png" alt="添加记录"><br>记录值就是实例的公网IP，可以在实例列表查看</p><h2 id="配置服务器"><a href="#配置服务器" class="headerlink" title="配置服务器"></a>配置服务器</h2><h3 id="修改实例登陆密码"><a href="#修改实例登陆密码" class="headerlink" title="修改实例登陆密码"></a>修改实例登陆密码</h3><p><img src="http://lc-4ltdklta.cn-n1.lcfile.com/449304af1764b0ba28aa.png/image%20%288%29.png" alt="修改密码"><br>然后重启实例，等待重启完成</p><h3 id="远程连接"><a href="#远程连接" class="headerlink" title="远程连接"></a>远程连接</h3><p><img src="http://lc-4ltdklta.cn-n1.lcfile.com/345966b703e86afffa70.png/image%20%289%29.png" alt="远程连接"><br>第一次远程连接会给你一个密码，不过后续可以修改掉；<br>出现这个message就代表远程连接成功了<br><img src="http://lc-4ltdklta.cn-n1.lcfile.com/b49ea2d6ae83dbfe851b.png/image%20%2810%29.png" alt="登陆成功"></p><h3 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h3><p>你可以选择使用阿里云提供的shell，windows下也可以使用Xshell和Xftp，我的环境是macOS，下面演示使用的是阿里云shell和‘终端’；</p><p>windows Xshell和Xftp下载地址：<a href="https://www.netsarang.com/en/free-for-home-school/">https://www.netsarang.com/en/free-for-home-school/</a>   填写邮箱等信息之后会自动发送到你的邮箱；</p><p>安装nginx之前需要先安装一些以来库：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">yum install -y pcre pcre-devel</span><br><span class="line">yum install -y zlib zlib-devel</span><br><span class="line"><span class="comment">// 如有需要：</span></span><br><span class="line">yum install gcc-c++</span><br><span class="line">yum install -y openssl openssl-devel</span><br><span class="line"><span class="comment">// 然后安装nginx，这里版本需要注意是1.18.0，否则会报错</span></span><br><span class="line">wget -c <span class="attr">https</span>:<span class="comment">//nginx.org/download/nginx-1.18.0.tar.gz</span></span><br><span class="line"><span class="comment">// 解压并进入</span></span><br><span class="line">tar -zxvf nginx-<span class="number">1.18</span><span class="number">.0</span>.<span class="property">tar</span>.<span class="property">gz</span></span><br><span class="line">cd nginx-<span class="number">1.18</span><span class="number">.0</span></span><br><span class="line"><span class="comment">// 使用默认配置</span></span><br><span class="line">./configure</span><br><span class="line"><span class="comment">// 编译，安装</span></span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"><span class="comment">// 查找安装路径</span></span><br><span class="line">whereis nginx</span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"><span class="comment">// [root@实例名 nginx-1.18.0]# whereis nginx</span></span><br><span class="line"><span class="comment">// nginx: /usr/local/nginx</span></span><br><span class="line"><span class="comment">// 默认安装路径是在 /usr/local/nginx，默认在这个目录下，有一个sbin目录，它下面有个nginx文件，这个nginx是个可执行文件，</span></span><br><span class="line"><span class="comment">// 执行启动</span></span><br><span class="line">/usr/local/nginx/sbin/nginx</span><br><span class="line"><span class="comment">// 浏览器输入你的实例IP成功后会看到 Welcome to nginx!</span></span><br></pre></td></tr></table></figure><p>此时服务已经运行成功了！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">查看运行状态</span><br><span class="line"><span class="comment">// 查看运行状态</span></span><br><span class="line">ps -ef | grep nginx</span><br><span class="line"><span class="comment">// 停止服务</span></span><br><span class="line">kill <span class="number">56106</span></span><br><span class="line"><span class="comment">// 重启服务</span></span><br><span class="line">/usr/local/nginx/sbin/nginx -s reopen</span><br></pre></td></tr></table></figure><h2 id="上传本地资源至服务器"><a href="#上传本地资源至服务器" class="headerlink" title="上传本地资源至服务器"></a>上传本地资源至服务器</h2><p>windows下使用Xftp可以进行可视化操作，比较方便。macOS下就需要通过命令行来实现；<br><img src="http://lc-4ltdklta.cn-n1.lcfile.com/1737424cce92d5724d4c.png/image%20%2811%29.png" alt="xftp"></p><h3 id="打开shell，新建远程连接，安全文件传输"><a href="#打开shell，新建远程连接，安全文件传输" class="headerlink" title="打开shell，新建远程连接，安全文件传输"></a>打开shell，新建远程连接，安全文件传输</h3><p>更详细操作看这里：<a href="https://www.jianshu.com/p/1afd25e7459d">https://www.jianshu.com/p/1afd25e7459d</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">scp -r 远程登录服务器用户名@远程服务器ip地址:/下载文件夹的目录 本地目录</span><br><span class="line">下载文件</span><br><span class="line">scp 远程登录服务器用户名@远程服务器ip地址:/下载文件的目录 本地目录</span><br><span class="line">上传文件夹</span><br><span class="line">scp  -r  本地目录 远程登录服务器用户名@远程服务器ip地址:/下载文件夹的目录 </span><br><span class="line">上传文件</span><br><span class="line">scp 本地目录  远程登录服务器用户名@远程服务器ip地址:/下载文件的目录 </span><br></pre></td></tr></table></figure><h3 id="重新配置nginx"><a href="#重新配置nginx" class="headerlink" title="重新配置nginx"></a>重新配置nginx</h3><p>现在服务器上有了html资源，如果想要服务器上放置你想被访问的文件，还需要修改nginx服务器配置；</p><h3 id="编辑nginx配置文件"><a href="#编辑nginx配置文件" class="headerlink" title="编辑nginx配置文件"></a>编辑nginx配置文件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/nginx/conf/nginx.<span class="property">conf</span></span><br></pre></td></tr></table></figure><p>敲击 i 键进入编写模式，将用户改为当前用户root，并将root目录指向进行修改；</p><p>因为我的静态资源存放在来&#x2F;usr&#x2F;local&#x2F;blog 目录下：<br><img src="http://lc-4ltdklta.cn-n1.lcfile.com/9465e558178acbda2d9a.png/image%20%2812%29.png" alt="资源"><br>修改完成之后敲击 Esc 退出编写模式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">:q 退出</span><br><span class="line">:q! 强制退出</span><br><span class="line">:wq 保存并退出</span><br></pre></td></tr></table></figure><h3 id="重启服务"><a href="#重启服务" class="headerlink" title="重启服务"></a>重启服务</h3><p>&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -s reload</p><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查看配置</span></span><br><span class="line">vi /usr/local/nginx/conf/nginx.<span class="property">conf</span></span><br><span class="line"><span class="comment">// 编辑配置</span></span><br><span class="line">vim /usr/local/nginx/conf/nginx.<span class="property">conf</span></span><br><span class="line"><span class="comment">// 重新加载配置</span></span><br><span class="line">/usr/local/nginx/sbin/nginx -s reload</span><br><span class="line"><span class="comment">// 重启服务</span></span><br><span class="line">/usr/local/nginx/sbin/nginx -s reopen</span><br></pre></td></tr></table></figure><h2 id="备案"><a href="#备案" class="headerlink" title="备案"></a>备案</h2><p><img src="http://lc-4ltdklta.cn-n1.lcfile.com/2dbb2fe5a48992923a67.png/image%20%2813%29.png" alt="备案"></p><h2 id="踩过的坑"><a href="#踩过的坑" class="headerlink" title="踩过的坑"></a>踩过的坑</h2><p><a href="https://www.cnblogs.com/houss/p/11291629.html">nginx: [error] open() “&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs&#x2F;nginx.pid” failed (2: No such file or directory)</a><br><br><a href="https://blog.csdn.net/lwei_998/article/details/6637912">Linux No such file or directory</a><br><br><a href="https://blog.csdn.net/rodulf/article/details/53557278">nginx: [emerg] invalid number of arguments in “root” directive in &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf:46</a></p>]]></content>
      
      
      <categories>
          
          <category> Posts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> # </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于 typescript 定时器 setInterval() 的坑：不能将类型“Timeout”分配给类型“number</title>
      <link href="/2022/11/15/%E5%85%B3%E4%BA%8E%20typescript%20%E5%AE%9A%E6%97%B6%E5%99%A8%20setInterval()%20%E7%9A%84%E5%9D%91%EF%BC%9A%E4%B8%8D%E8%83%BD%E5%B0%86%E7%B1%BB%E5%9E%8B%E2%80%9CTimeout%E2%80%9D%E5%88%86%E9%85%8D%E7%BB%99%E7%B1%BB%E5%9E%8B%E2%80%9Cnumber/"/>
      <url>/2022/11/15/%E5%85%B3%E4%BA%8E%20typescript%20%E5%AE%9A%E6%97%B6%E5%99%A8%20setInterval()%20%E7%9A%84%E5%9D%91%EF%BC%9A%E4%B8%8D%E8%83%BD%E5%B0%86%E7%B1%BB%E5%9E%8B%E2%80%9CTimeout%E2%80%9D%E5%88%86%E9%85%8D%E7%BB%99%E7%B1%BB%E5%9E%8B%E2%80%9Cnumber/</url>
      
        <content type="html"><![CDATA[<h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Index</span> &#123;</span><br><span class="line">  <span class="attr">timer</span>: number;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">timer</span> = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title class_">Test</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// (property) Index.timer: number</span></span><br><span class="line">    <span class="comment">// 不能将类型“Timeout”分配给类型“number”。</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">timer</span> = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (i &lt; <span class="number">60</span>) &#123;</span><br><span class="line">        i = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">timer</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      i++;</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Index</span>;</span><br></pre></td></tr></table></figure><p>当我为类型 <code>number</code> 的 <code>timer</code> 赋值时，出现了警告：<code>不能将类型“Timeout”分配给类型“number”</code>，这是为什么？</p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>首先 <code>TypeScript</code> 是运行在 Nodejs 环境下的，TS 编译之后的代码是运行在浏览器环境下的，Nodejs 和浏览器中的 <code>window</code> 他们各自实现了一套自己的 <code>setInterval</code> 。</p><p>原来代码是 <code>this.timer = setInterval( ... ) </code>, 这里的 <code>setInterval</code> 是 Nodejs 定义的， 所以代码应该修改成：<code>this.timer = window.setInterval( ... )</code> </p><p>更优的方式是使用 <code>createRef</code> 或 <code>useRef</code> 来创建，让 <code>timer.current = window.setInterval( ... )</code>，这样其他地方也可以方便获取到 <code>timer</code> 并使用</p>]]></content>
      
      
      <categories>
          
          <category> Posts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> # </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>做这个世界的生产者</title>
      <link href="/2022/11/15/%E5%81%9A%E8%BF%99%E4%B8%AA%E4%B8%96%E7%95%8C%E7%9A%84%E7%94%9F%E4%BA%A7%E8%80%85/"/>
      <url>/2022/11/15/%E5%81%9A%E8%BF%99%E4%B8%AA%E4%B8%96%E7%95%8C%E7%9A%84%E7%94%9F%E4%BA%A7%E8%80%85/</url>
      
        <content type="html"><![CDATA[<p>偶尔看到这篇名叫 <a href="https://blog.tjcx.me/p/consume-less-create-more">Consume less, create more </a>的文章，是作者从「消费者」转变为「生产者」的心路历程。他每天在巴士上面用 iPhone 写点什么，最终写出了这篇文章。</p><p>我从懂事开始就一直觉得自己在这个世界上与众不同，觉得自己的出生一定是背负了某个特殊的使命。后来发现原来每个人年轻的时候都是这么想的，随着年纪渐长，大多数人开始接受自己只是个普通人的事实。我也不例外。</p><p>但唯一没有变过的是我没有因为意识到了自己的平凡而停止了试图变得不平凡。其中的一个表现就是我希望在这个世界上，我是作为一个生产者存在的，而不只是一个消费者。</p><p>写博客、编程都是我的生产，即使我写的博客没有让我成为几十万粉丝的 KOL，我写的代码没有几万的 star，唱的歌的观看数只是几百，我还是保持生产，因为对于这个世界，能让我有那么一点与众不同的是我的生产，而不是我的消费。</p><p>我讨厌抖音，不是因为它的内容，是因为它默默地把人驯化成了贪婪的信息消费者。如果我什么都不创造，那么我每天看论坛、新闻和别人每天刷抖音没有任何区别。</p><p>这个世界的每个人都是消费者，但不是每个人都是生产者。如果你也希望为这个世界留下点什么，就去创造，别担心你创造的是不是垃圾，只要创造了，是一定会有收获的。</p>]]></content>
      
      
      <categories>
          
          <category> Posts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> # </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>农村的葬礼有必要搞的那么复杂吗...</title>
      <link href="/2022/11/15/%E5%86%9C%E6%9D%91%E7%9A%84%E8%91%AC%E7%A4%BC%E6%9C%89%E5%BF%85%E8%A6%81%E6%90%9E%E7%9A%84%E9%82%A3%E4%B9%88%E5%A4%8D%E6%9D%82%E5%90%97.../"/>
      <url>/2022/11/15/%E5%86%9C%E6%9D%91%E7%9A%84%E8%91%AC%E7%A4%BC%E6%9C%89%E5%BF%85%E8%A6%81%E6%90%9E%E7%9A%84%E9%82%A3%E4%B9%88%E5%A4%8D%E6%9D%82%E5%90%97.../</url>
      
        <content type="html"><![CDATA[<p>任何事情都有涉及到利益的互换，在农村，就是人力财力的交换。每个人都会在心中盘算一番支出收益，力求收支平衡。</p><p>喜事可以多次举办，如果获利超过支出，主人天然有多办的倾向。这时候，客人就会倾向于不去，必须主人三请四接，方才不情不愿的去，即使去了，虽然嘴上说着沾了喜气，心里也是不大开心的。</p><p>而丧事就不同了，丧事一个人一般情况下就只会举办一次，这一次就是把死者生前的利益债务进行清算。每个人都必然有一次，而且伴随着巨大的利益转移。这时候，每个听到消息的家族都必须派人去。因为无论恩怨情仇，人已经去了，如果你不去，那就是代表你要把这种反面情绪传递到下一代，而参加葬礼，就代表这些负面的东西已经随着别人的离去而消失了。</p><p>由于丧事的唯一性，就天然保证了丧事的公平性。</p><p>所有能去的人就必须去还体现在丧事对人力的大量需求。因为农村丧礼是非常浪费人力的，挖墓葬室，挪动棺材都必须精壮劳动力。尤其是上杠抬棺人，必须村中最精壮劳动力，而且身材相仿之人，凑够八个是很不容易的。要保证人力资源，帮闲的人就越多越好，出于互换心理，都必须闻声而至。</p><p>有趣的是，葬礼是基于人力的互换，但财力互换是基于和喜事一样原则，如果你之前和对方没有利益来往，或者不欠人情，那就是可以不用送礼上人情的。</p><p>同样的道理，丧事你只要不在那几个关键场合凑到主人面前笑出声来，其他时候客人干什么是无所谓的，因为都是来进行人力互换的，没有直接的人情关系。主人是不大能从人情世故上指责客人破坏气氛的，更何况开心也有冲喜之意。但这时候主人要求办事，是不能随便拒绝的，因为这就是不拿工资的打工人，主人事实上已经支付了隐形的报酬，就必须拿出干活的态度来。</p>]]></content>
      
      
      <categories>
          
          <category> Posts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> # </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识事件循环机制</title>
      <link href="/2022/11/15/%E5%88%9D%E8%AF%86%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E6%9C%BA%E5%88%B6/"/>
      <url>/2022/11/15/%E5%88%9D%E8%AF%86%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="一、事件循环基础"><a href="#一、事件循环基础" class="headerlink" title="一、事件循环基础"></a>一、事件循环基础</h2><p>由于JavaScript是一种单线程的编程语言，因此JavaScript中的所有任务都需要排队依次完成。但这样的设计明显会有很大的一个问题，那就是如果碰到一个需要耗费很多的时间完成的事件时，很有可能会造成线程的阻塞问题。因此，JavaScript的开发者就将所有的任务分为两种来解决这种问题：</p><ul><li>同步任务（在主线程中只有前面的代码执行完毕后，后面的才能执行）</li><li>异步任务（从主线程提出，进入任务队列执行，等执行完毕后通知主线程，这个异步任务可以执行了，才会进入主线程执行）</li></ul><p>如图所示：<br><img src="https://jszyy-pan.oss-cn-shanghai.aliyuncs.com/images-blog/Event_cycle_mechanism/img01.jpg" alt="img01"></p><p>因此总的来说，JavaScript的执行机制主要是以下三步：</p><p>所有同步任务都在主线程上执行，形成一个执行栈（execution context stack）。<br>主线程之外，还存在一个”任务队列”（task queue）。只要异步任务有了运行结果，就在”任务队列”之中放置一个事件。<br>一旦主线程的栈中的所有同步任务执行完毕，系统就会读取任务队列，选择需要首先执行的任务然后执行。<br>而在此过程中，主线程要做的就是从任务队列中去实践，执行事件，执行完毕，再取事件，再执行事件…这样不断取事件，执行事件的循环机制就叫做事件循环机制。（需要注意的的是当任务队列为空时，就会等待直到任务队列变成非空。）</p><p>其基本的逻辑如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (queue.<span class="title function_">waitForMessage</span>()) &#123;</span><br><span class="line">  queue.<span class="title function_">processNextMessage</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>详情也可以看我的这篇文章：</p><blockquote><p>JavaScript异步编程基础()</p></blockquote><h2 id="二、深入事件循环"><a href="#二、深入事件循环" class="headerlink" title="二、深入事件循环"></a>二、深入事件循环</h2><p>上面这种认识也是我最初学习JavaScript所有的认识，但随着自己的学习的不断深入，我开始意识到了这里面的东西没有我所想的这么简单。</p><p>首先我们来看一段代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script start&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setTimeout1&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise1&#x27;</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise2&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setTimeout2&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script end&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="comment">//script start</span></span><br><span class="line"><span class="comment">//script end</span></span><br><span class="line"><span class="comment">//promise1</span></span><br><span class="line"><span class="comment">//promise2</span></span><br><span class="line"><span class="comment">//setTimeout2</span></span><br><span class="line"><span class="comment">//setTimeout1</span></span><br></pre></td></tr></table></figure><p>我们可以看到，Promise都在setTimeout前面执行了，这是为什么呢？</p><p>我们要知道的是事件循环并不仅仅只有事件队列，而是具有至少两个队列，除了事件，还要保持浏览器执行的其他操作，而这些操作也被任务，并且分为两类：macrotask（宏任务）和microtask（微任务），在ECMAScript中，microtask称为jobs，macrotask称为task。</p><p>那它们到底有什么区别呢？</p><ul><li>macrotask（宏任务），可以理解是每次执行栈执行的代码就是一个宏任务。主要包括创建主文档对象、解析 HTML、执行主线（或全局）JavaScript 代码，更改当前 URL 以及各种事件，如页面加载、输入、网络事件和定时器事件。从浏览器的角度来看，宏任务代表一个个离散的、独立工作单元。运行完任务后，浏览器可以继续其他调度，如重新渲染页面的 UI 或执行垃圾回收。</li><li>microtask（微任务）是更小的任务。微任务更新应用程序的状态，但必须在浏览器任务继续执行其他任务之前执行，浏览器任务包括重新渲染页面的UI。微任务的案例包括 promise 回调函数、DOM 发生变化等。微任务需要尽可能快地、通过异步方式执行，同时不能产生全新的微任务。微任务使得我们能够在重新渲染UI之前执行指定的行为，避免不必要的UI重绘，UI重绘会使应用程序的状态不连续。</li></ul><blockquote><p>需要的值的是，ECMAScript 规范没有提到事件循环。不过，事件循环在 HTML 规范中有详细说明，里面也讨论了宏任务和微任务的概<br>念。ECMAScript 规范提到了处理 promise 回调<a href="http://mng.bz/fOlK">http://mng.bz/fOlK</a>的功能（类似于微<br>任务）。虽然只有 HTML 规范中定义了事件循环，但其他环境（如 Node.js）也都在使用它。</p></blockquote><p>也就是说事件循环的实现至少应该包含有一个用于红事件的队列和一个用于微事件的队列。这使得事件循环能够根据任务类型进行优先处理。</p><p>总结起来也就是以下几步：</p><ol><li>执行一个宏任务（栈中没有就从事件队列中获取）</li><li>执行过程中如果遇到微任务，就将它添加到微任务的任务队列中</li><li>宏任务执行完毕后，立即执行当前微任务队列中的所有微任务（依次执行）</li><li>当前宏任务执行完毕，开始检查渲染，然后GUI线程接管渲染</li><li>渲染完毕后，JS线程继续接管，开始下一个宏任务（从事件队列中获取）</li></ol><p>也正是由于上述的规则，在上面的那段代码中，首先会执行主代码块这个宏事件，然后再将微事件Promise执行，最后再去执行第二个宏事件setTimeout。</p><h2 id="三、事件循环与渲染"><a href="#三、事件循环与渲染" class="headerlink" title="三、事件循环与渲染"></a>三、事件循环与渲染</h2><p>前面我们提到，微事件会在宏事件与页面渲染之间执行，那么是事件循环与页面渲染到底存在着怎样的联系呢？</p><p>首先我们要知道的是浏览器通常会尝试每秒渲染60次页面，从而达到每秒60帧的数组。而60fps通常是检验体验是否平滑流畅的标准，比方在动画里——这意味着浏览器会尝试在 16ms 内渲染一帧。需要注意上图的的“更新渲染”是如何发生为何<br>事件循环内的，因为在页面渲染时，任何任务都无法再进行修改。这些设计和<br>原则都意味着，如果想要实现平滑流畅的应用，我们是没有太多时间浪费在处<br>理单个事件循环任务的。因此，在理想情况下，单个任务和该任务附属的所有微任务，都应在 16ms 内完成。</p><p>因此出于这种考虑，可能会出现以下的三种情况：</p><ol><li>在另一个 16ms 结束前，事件循环执行到“是否需要进行渲染”的决策环节。因为更新 UI 是一个复杂的操作，所以如果没有显式地指定需要页面渲染，浏览器可能不会选择在当前的循环中执行 UI 渲染操作。</li><li>在最后一次渲染完成后大约 16ms，时间循环执行到“是否需要进行渲染”的决策环节。在这种情况下，浏览器会进行 UI 更新，以便用户能够感受到顺畅的应用体验。</li><li>执行下一个任务（和相关的所有微任务）耗时超过 16ms。在这种情况下，浏览器将无法以目标帧率重新渲染页面，且 UI 无法被更新。如果任务代码的执行不耗费过多的时间（不超过几百毫秒），这时的延迟甚至可能察觉不到，尤其当页面中没有太多的操作时。反之，如果耗时过多，或者页面上运行有动画时，用户可能会察觉到网络卡顿而不响应。在极端的情况下，如果任务的执行超过几秒，用户的浏览器将会提示“无响应脚本”的恼人信息。</li></ol><h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><p>《JavaScript忍者秘籍第二版》</p>]]></content>
      
      
      <categories>
          
          <category> Posts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> # </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工作中总结的经验(2022)</title>
      <link href="/2022/11/15/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E6%96%B9%E6%B3%95/"/>
      <url>/2022/11/15/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="1-邮箱"><a href="#1-邮箱" class="headerlink" title="1.邮箱"></a>1.邮箱</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export const isEmail = (s) =&gt; &#123;</span><br><span class="line">  return /^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+((.[a-zA-Z0-9_-]&#123;2,3&#125;)&#123;1,2&#125;)$/.test(</span><br><span class="line">    s</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="2-手机号码"><a href="#2-手机号码" class="headerlink" title="2.手机号码"></a>2.手机号码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export const isMobile = (s) =&gt; &#123;</span><br><span class="line">  return /^1[0-9]&#123;10&#125;$/.test(s);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="3-电话号码"><a href="#3-电话号码" class="headerlink" title="3.电话号码"></a>3.电话号码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export const isPhone = (s) =&gt; &#123;</span><br><span class="line">  return /^([0-9]&#123;3,4&#125;-)?[0-9]&#123;7,8&#125;$/.test(s);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="4-是否-url-地址"><a href="#4-是否-url-地址" class="headerlink" title="4.是否 url 地址"></a>4.是否 url 地址</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export const isURL = (s) =&gt; &#123;</span><br><span class="line">  return /^http[s]?:\/\/.*/.test(s);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="5-是否字符串"><a href="#5-是否字符串" class="headerlink" title="5.是否字符串"></a>5.是否字符串</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export const isString = (o) =&gt; &#123;</span><br><span class="line">  return Object.prototype.toString.call(o).slice(8, -1) === &#x27;String&#x27;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="6-是否数字"><a href="#6-是否数字" class="headerlink" title="6.是否数字"></a>6.是否数字</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export const isNumber = (o) =&gt; &#123;</span><br><span class="line">  return Object.prototype.toString.call(o).slice(8, -1) === &#x27;Number&#x27;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="7-是否-boolean"><a href="#7-是否-boolean" class="headerlink" title="7.是否 boolean"></a>7.是否 boolean</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export const isBoolean = (o) =&gt; &#123;</span><br><span class="line">  return Object.prototype.toString.call(o).slice(8, -1) === &#x27;Boolean&#x27;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="8-是否函数"><a href="#8-是否函数" class="headerlink" title="8.是否函数"></a>8.是否函数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export const isFunction = (o) =&gt; &#123;</span><br><span class="line">  return Object.prototype.toString.call(o).slice(8, -1) === &#x27;Function&#x27;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="9-是否为-null"><a href="#9-是否为-null" class="headerlink" title="9.是否为 null"></a>9.是否为 null</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export const isNull = (o) =&gt; &#123;</span><br><span class="line">  return Object.prototype.toString.call(o).slice(8, -1) === &#x27;Null&#x27;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="10-是否-undefined"><a href="#10-是否-undefined" class="headerlink" title="10.是否 undefined"></a>10.是否 undefined</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export const isUndefined = (o) =&gt; &#123;</span><br><span class="line">  return Object.prototype.toString.call(o).slice(8, -1) === &#x27;Undefined&#x27;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="11-是否对象"><a href="#11-是否对象" class="headerlink" title="11.是否对象"></a>11.是否对象</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export const isObj = (o) =&gt; &#123;</span><br><span class="line">  return Object.prototype.toString.call(o).slice(8, -1) === &#x27;Object&#x27;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="12-是否数组"><a href="#12-是否数组" class="headerlink" title="12.是否数组"></a>12.是否数组</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export const isArray = (o) =&gt; &#123;</span><br><span class="line">  return Object.prototype.toString.call(o).slice(8, -1) === &#x27;Array&#x27;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="13-是否时间"><a href="#13-是否时间" class="headerlink" title="13.是否时间"></a>13.是否时间</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export const isDate = (o) =&gt; &#123;</span><br><span class="line">  return Object.prototype.toString.call(o).slice(8, -1) === &#x27;Date&#x27;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="14-是否正则"><a href="#14-是否正则" class="headerlink" title="14.是否正则"></a>14.是否正则</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export const isRegExp = (o) =&gt; &#123;</span><br><span class="line">  return Object.prototype.toString.call(o).slice(8, -1) === &#x27;RegExp&#x27;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="15-是否错误对象"><a href="#15-是否错误对象" class="headerlink" title="15.是否错误对象"></a>15.是否错误对象</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export const isError = (o) =&gt; &#123;</span><br><span class="line">  return Object.prototype.toString.call(o).slice(8, -1) === &#x27;Error&#x27;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="16-是否-Symbol-函数"><a href="#16-是否-Symbol-函数" class="headerlink" title="16.是否 Symbol 函数"></a>16.是否 Symbol 函数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export const isSymbol = (o) =&gt; &#123;</span><br><span class="line">  return Object.prototype.toString.call(o).slice(8, -1) === &#x27;Symbol&#x27;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="17-是否-Promise-对象"><a href="#17-是否-Promise-对象" class="headerlink" title="17.是否 Promise 对象"></a>17.是否 Promise 对象</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export const isPromise = (o) =&gt; &#123;</span><br><span class="line">  return Object.prototype.toString.call(o).slice(8, -1) === &#x27;Promise&#x27;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="18-是否-Set-对象"><a href="#18-是否-Set-对象" class="headerlink" title="18.是否 Set 对象"></a>18.是否 Set 对象</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export const isSet = (o) =&gt; &#123;</span><br><span class="line">  return Object.prototype.toString.call(o).slice(8, -1) === &#x27;Set&#x27;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export const ua = navigator.userAgent.toLowerCase();</span><br></pre></td></tr></table></figure><h3 id="19-是否是微信浏览器"><a href="#19-是否是微信浏览器" class="headerlink" title="19.是否是微信浏览器"></a>19.是否是微信浏览器</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export const isWeiXin = () =&gt; &#123;</span><br><span class="line">  return ua.match(/microMessenger/i) == &#x27;micromessenger&#x27;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="20-是否是移动端"><a href="#20-是否是移动端" class="headerlink" title="20.是否是移动端"></a>20.是否是移动端</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export const isDeviceMobile = () =&gt; &#123;</span><br><span class="line">  return /android|webos|iphone|ipod|balckberry/i.test(ua);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="21-是否是-QQ-浏览器"><a href="#21-是否是-QQ-浏览器" class="headerlink" title="21.是否是 QQ 浏览器"></a>21.是否是 QQ 浏览器</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export const isQQBrowser = () =&gt; &#123;</span><br><span class="line">  return !!ua.match(/mqqbrowser|qzone|qqbrowser|qbwebviewtype/i);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="22-是否是爬虫"><a href="#22-是否是爬虫" class="headerlink" title="22.是否是爬虫"></a>22.是否是爬虫</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export const isSpider = () =&gt; &#123;</span><br><span class="line">  return /adsbot|googlebot|bingbot|msnbot|yandexbot|baidubot|robot|careerbot|seznambot|bot|baiduspider|jikespider|symantecspider|scannerlwebcrawler|crawler|360spider|sosospider|sogou web sprider|sogou orion spider/.test(</span><br><span class="line">    ua</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="23-是否-ios"><a href="#23-是否-ios" class="headerlink" title="23.是否 ios"></a>23.是否 ios</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">export const isIos = () =&gt; &#123;</span><br><span class="line">  var u = navigator.userAgent;</span><br><span class="line">  if (u.indexOf(&#x27;Android&#x27;) &gt; -1 || u.indexOf(&#x27;Linux&#x27;) &gt; -1) &#123;</span><br><span class="line">    ###安卓手机</span><br><span class="line">    return false;</span><br><span class="line">  &#125; else if (u.indexOf(&#x27;iPhone&#x27;) &gt; -1) &#123;</span><br><span class="line">    ###苹果手机</span><br><span class="line">    return true;</span><br><span class="line">  &#125; else if (u.indexOf(&#x27;iPad&#x27;) &gt; -1) &#123;</span><br><span class="line">    ###iPad</span><br><span class="line">    return false;</span><br><span class="line">  &#125; else if (u.indexOf(&#x27;Windows Phone&#x27;) &gt; -1) &#123;</span><br><span class="line">    ###winphone手机</span><br><span class="line">    return false;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    return false;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="24-是否为-PC-端"><a href="#24-是否为-PC-端" class="headerlink" title="24.是否为 PC 端"></a>24.是否为 PC 端</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">export const isPC = () =&gt; &#123;</span><br><span class="line">  var userAgentInfo = navigator.userAgent;</span><br><span class="line">  var Agents = [</span><br><span class="line">    &#x27;Android&#x27;,</span><br><span class="line">    &#x27;iPhone&#x27;,</span><br><span class="line">    &#x27;SymbianOS&#x27;,</span><br><span class="line">    &#x27;Windows Phone&#x27;,</span><br><span class="line">    &#x27;iPad&#x27;,</span><br><span class="line">    &#x27;iPod&#x27;,</span><br><span class="line">  ];</span><br><span class="line">  var flag = true;</span><br><span class="line">  for (var v = 0; v &lt; Agents.length; v++) &#123;</span><br><span class="line">    if (userAgentInfo.indexOf(Agents[v]) &gt; 0) &#123;</span><br><span class="line">      flag = false;</span><br><span class="line">      break;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return flag;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="25-去除-html-标签"><a href="#25-去除-html-标签" class="headerlink" title="25.去除 html 标签"></a>25.去除 html 标签</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export const removeHtmltag = (str) =&gt; &#123;</span><br><span class="line">  return str.replace(/&lt;[^&gt;]+&gt;/g, &#x27;&#x27;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="26-获取-url-参数"><a href="#26-获取-url-参数" class="headerlink" title="26.获取 url 参数"></a>26.获取 url 参数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">export const getQueryString = (name) =&gt; &#123;</span><br><span class="line">  const reg = new RegExp(&#x27;(^|&amp;)&#x27; + name + &#x27;=([^&amp;]*)(&amp;|$)&#x27;, &#x27;i&#x27;);</span><br><span class="line">  const search = window.location.search.split(&#x27;?&#x27;)[1] || &#x27;&#x27;;</span><br><span class="line">  const r = search.match(reg) || [];</span><br><span class="line">  return r[2];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="27-动态引入-js"><a href="#27-动态引入-js" class="headerlink" title="27.动态引入 js"></a>27.动态引入 js</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">export const injectScript = (src) =&gt; &#123;</span><br><span class="line">  const s = document.createElement(&#x27;script&#x27;);</span><br><span class="line">  s.type = &#x27;text/javascript&#x27;;</span><br><span class="line">  s.async = true;</span><br><span class="line">  s.src = src;</span><br><span class="line">  const t = document.getElementsByTagName(&#x27;script&#x27;)[0];</span><br><span class="line">  t.parentNode.insertBefore(s, t);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="28-根据-url-地址下载"><a href="#28-根据-url-地址下载" class="headerlink" title="28.根据 url 地址下载"></a>28.根据 url 地址下载</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">export const download = (url) =&gt; &#123;</span><br><span class="line">  var isChrome = navigator.userAgent.toLowerCase().indexOf(&#x27;chrome&#x27;) &gt; -1;</span><br><span class="line">  var isSafari = navigator.userAgent.toLowerCase().indexOf(&#x27;safari&#x27;) &gt; -1;</span><br><span class="line">  if (isChrome || isSafari) &#123;</span><br><span class="line">    var link = document.createElement(&#x27;a&#x27;);</span><br><span class="line">    link.href = url;</span><br><span class="line">    if (link.download !== undefined) &#123;</span><br><span class="line">      var fileName = url.substring(url.lastIndexOf(&#x27;/&#x27;) + 1, url.length);</span><br><span class="line">      link.download = fileName;</span><br><span class="line">    &#125;</span><br><span class="line">    if (document.createEvent) &#123;</span><br><span class="line">      var e = document.createEvent(&#x27;MouseEvents&#x27;);</span><br><span class="line">      e.initEvent(&#x27;click&#x27;, true, true);</span><br><span class="line">      link.dispatchEvent(e);</span><br><span class="line">      return true;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  if (url.indexOf(&#x27;?&#x27;) === -1) &#123;</span><br><span class="line">    url += &#x27;?download&#x27;;</span><br><span class="line">  &#125;</span><br><span class="line">  window.open(url, &#x27;_self&#x27;);</span><br><span class="line">  return true;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="29-el-是否包含某个-class"><a href="#29-el-是否包含某个-class" class="headerlink" title="29.el 是否包含某个 class"></a>29.el 是否包含某个 class</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export const hasClass = (el, className) =&gt; &#123;</span><br><span class="line">  let reg = new RegExp(&#x27;(^|\\s)&#x27; + className + &#x27;(\\s|$)&#x27;);</span><br><span class="line">  return reg.test(el.className);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="30-el-添加某个-class"><a href="#30-el-添加某个-class" class="headerlink" title="30.el 添加某个 class"></a>30.el 添加某个 class</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">export const addClass = (el, className) =&gt; &#123;</span><br><span class="line">  if (hasClass(el, className)) &#123;</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br><span class="line">  let newClass = el.className.split(&#x27; &#x27;);</span><br><span class="line">  newClass.push(className);</span><br><span class="line">  el.className = newClass.join(&#x27; &#x27;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="31-el-去除某个-class"><a href="#31-el-去除某个-class" class="headerlink" title="31.el 去除某个 class"></a>31.el 去除某个 class</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">export const removeClass = (el, className) =&gt; &#123;</span><br><span class="line">  if (!hasClass(el, className)) &#123;</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br><span class="line">  let reg = new RegExp(&#x27;(^|\\s)&#x27; + className + &#x27;(\\s|$)&#x27;, &#x27;g&#x27;);</span><br><span class="line">  el.className = el.className.replace(reg, &#x27; &#x27;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="32-获取滚动的坐标"><a href="#32-获取滚动的坐标" class="headerlink" title="32.获取滚动的坐标"></a>32.获取滚动的坐标</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export const getScrollPosition = (el = window) =&gt; (&#123;</span><br><span class="line">  x: el.pageXOffset !== undefined ? el.pageXOffset : el.scrollLeft,</span><br><span class="line">  y: el.pageYOffset !== undefined ? el.pageYOffset : el.scrollTop,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="33-滚动到顶部"><a href="#33-滚动到顶部" class="headerlink" title="33.滚动到顶部"></a>33.滚动到顶部</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">export const scrollToTop = () =&gt; &#123;</span><br><span class="line">  const c = document.documentElement.scrollTop || document.body.scrollTop;</span><br><span class="line">  if (c &gt; 0) &#123;</span><br><span class="line">    window.requestAnimationFrame(scrollToTop);</span><br><span class="line">    window.scrollTo(0, c - c / 8);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="34-el-是否在视口范围内"><a href="#34-el-是否在视口范围内" class="headerlink" title="34.el 是否在视口范围内"></a>34.el 是否在视口范围内</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">export const elementIsVisibleInViewport = (el, partiallyVisible = false) =&gt; &#123;</span><br><span class="line">  const &#123; top, left, bottom, right &#125; = el.getBoundingClientRect();</span><br><span class="line">  const &#123; innerHeight, innerWidth &#125; = window;</span><br><span class="line">  return partiallyVisible</span><br><span class="line">    ? ((top &gt; 0 &amp;&amp; top &lt; innerHeight) ||</span><br><span class="line">        (bottom &gt; 0 &amp;&amp; bottom &lt; innerHeight)) &amp;&amp;</span><br><span class="line">        ((left &gt; 0 &amp;&amp; left &lt; innerWidth) || (right &gt; 0 &amp;&amp; right &lt; innerWidth))</span><br><span class="line">    : top &gt;= 0 &amp;&amp; left &gt;= 0 &amp;&amp; bottom &lt;= innerHeight &amp;&amp; right &lt;= innerWidth;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="35-洗牌算法随机"><a href="#35-洗牌算法随机" class="headerlink" title="35.洗牌算法随机"></a>35.洗牌算法随机</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">export const shuffle = (arr) =&gt; &#123;</span><br><span class="line">  var result = [],</span><br><span class="line">    random;</span><br><span class="line">  while (arr.length &gt; 0) &#123;</span><br><span class="line">    random = Math.floor(Math.random() * arr.length);</span><br><span class="line">    result.push(arr[random]);</span><br><span class="line">    arr.splice(random, 1);</span><br><span class="line">  &#125;</span><br><span class="line">  return result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="36-劫持粘贴板"><a href="#36-劫持粘贴板" class="headerlink" title="36.劫持粘贴板"></a>36.劫持粘贴板</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">export const copyTextToClipboard = (value) =&gt; &#123;</span><br><span class="line">  var textArea = document.createElement(&#x27;textarea&#x27;);</span><br><span class="line">  textArea.style.background = &#x27;transparent&#x27;;</span><br><span class="line">  textArea.value = value;</span><br><span class="line">  document.body.appendChild(textArea);</span><br><span class="line">  textArea.select();</span><br><span class="line">  try &#123;</span><br><span class="line">    var successful = document.execCommand(&#x27;copy&#x27;);</span><br><span class="line">  &#125; catch (err) &#123;</span><br><span class="line">    console.log(&#x27;Oops, unable to copy&#x27;);</span><br><span class="line">  &#125;</span><br><span class="line">  document.body.removeChild(textArea);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="37-判断类型集合"><a href="#37-判断类型集合" class="headerlink" title="37.判断类型集合"></a>37.判断类型集合</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">export const checkStr = (str, type) =&gt; &#123;</span><br><span class="line">  switch (type) &#123;</span><br><span class="line">    case &#x27;phone&#x27;: ###手机号码</span><br><span class="line">      return /^1[3|4|5|6|7|8|9][0-9]&#123;9&#125;$/.test(str);</span><br><span class="line">    case &#x27;tel&#x27;: ###座机</span><br><span class="line">      return /^(0\d&#123;2,3&#125;-\d&#123;7,8&#125;)(-\d&#123;1,4&#125;)?$/.test(str);</span><br><span class="line">    case &#x27;card&#x27;: ###身份证</span><br><span class="line">      return /(^\d&#123;15&#125;$)|(^\d&#123;18&#125;$)|(^\d&#123;17&#125;(\d|X|x)$)/.test(str);</span><br><span class="line">    case &#x27;pwd&#x27;: ###密码以字母开头，长度在6~18之间，只能包含字母、数字和下划线</span><br><span class="line">      return /^[a-zA-Z]\w&#123;5,17&#125;$/.test(str);</span><br><span class="line">    case &#x27;postal&#x27;: ###邮政编码</span><br><span class="line">      return /[1-9]\d&#123;5&#125;(?!\d)/.test(str);</span><br><span class="line">    case &#x27;QQ&#x27;: ###QQ 号</span><br><span class="line">      return /^[1-9][0-9]&#123;4,9&#125;$/.test(str);</span><br><span class="line">    case &#x27;email&#x27;: ###邮箱</span><br><span class="line">      return /^[\w-]+(\.[\w-]+)*@[\w-]+(\.[\w-]+)+$/.test(str);</span><br><span class="line">    case &#x27;money&#x27;: ###金额(小数点2位)</span><br><span class="line">      return /^\d*(?:\.\d&#123;0,2&#125;)?$/.test(str);</span><br><span class="line">    case &#x27;URL&#x27;: ###网址</span><br><span class="line">      return /(http|ftp|https):\/\/[\w\-_]+(\.[\w\-_]+)+([\w\-\.,@?^=%&amp;:/~\+#]_[\w\-\@?^=%&amp;/~\+#])?/.test(</span><br><span class="line">        str</span><br><span class="line">      );</span><br><span class="line">    case &#x27;IP&#x27;: ###IP</span><br><span class="line">      return /((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.)&#123;3&#125;(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d))/.test(</span><br><span class="line">        str</span><br><span class="line">      );</span><br><span class="line">    case &#x27;date&#x27;: ###日期时间</span><br><span class="line">      return (</span><br><span class="line">        /^(\d&#123;4&#125;)\-(\d&#123;2&#125;)\-(\d&#123;2&#125;) (\d&#123;2&#125;)(?:\:\d&#123;2&#125;|:(\d&#123;2&#125;):(\d&#123;2&#125;))$/.test(</span><br><span class="line">          str</span><br><span class="line">        ) || /^(\d&#123;4&#125;)\-(\d&#123;2&#125;)\-(\d&#123;2&#125;)$/.test(str)</span><br><span class="line">      );</span><br><span class="line">    case &#x27;number&#x27;: ###数字</span><br><span class="line">      return /^[0-9]$/.test(str);</span><br><span class="line">    case &#x27;english&#x27;: ###英文</span><br><span class="line">      return /^[a-zA-Z]+$/.test(str);</span><br><span class="line">    case &#x27;chinese&#x27;: ###中文</span><br><span class="line">      return /^[\\u4E00-\\u9FA5]+$/.test(str);</span><br><span class="line">    case &#x27;lower&#x27;: ###小写</span><br><span class="line">      return /^[a-z]+$/.test(str);</span><br><span class="line">    case &#x27;upper&#x27;: ###大写</span><br><span class="line">      return /^[A-Z]+$/.test(str);</span><br><span class="line">    case &#x27;HTML&#x27;: ###HTML 标记</span><br><span class="line">      return /&lt;(&quot;[^&quot;]_&quot;|&#x27;[^&#x27;]_&#x27;|[^&#x27;&quot;&gt;])_&gt;/.test(str);</span><br><span class="line">    default:</span><br><span class="line">      return true;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="38-严格的身份证校验"><a href="#38-严格的身份证校验" class="headerlink" title="38.严格的身份证校验"></a>38.严格的身份证校验</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">export const isCardID = (sId) =&gt; &#123;</span><br><span class="line">  if (!/(^\d&#123;15&#125;$)|(^\d&#123;17&#125;(\d|X|x)$)/.test(sId)) &#123;</span><br><span class="line">    console.log(&#x27;你输入的身份证长度或格式错误&#x27;);</span><br><span class="line">    return false;</span><br><span class="line">  &#125;</span><br><span class="line">  ###身份证城市</span><br><span class="line">  var aCity = &#123;</span><br><span class="line">    11: &#x27;北京&#x27;,</span><br><span class="line">    12: &#x27;天津&#x27;,</span><br><span class="line">    13: &#x27;河北&#x27;,</span><br><span class="line">    14: &#x27;山西&#x27;,</span><br><span class="line">    15: &#x27;内蒙古&#x27;,</span><br><span class="line">    21: &#x27;辽宁&#x27;,</span><br><span class="line">    22: &#x27;吉林&#x27;,</span><br><span class="line">    23: &#x27;黑龙江&#x27;,</span><br><span class="line">    31: &#x27;上海&#x27;,</span><br><span class="line">    32: &#x27;江苏&#x27;,</span><br><span class="line">    33: &#x27;浙江&#x27;,</span><br><span class="line">    34: &#x27;安徽&#x27;,</span><br><span class="line">    35: &#x27;福建&#x27;,</span><br><span class="line">    36: &#x27;江西&#x27;,</span><br><span class="line">    37: &#x27;山东&#x27;,</span><br><span class="line">    41: &#x27;河南&#x27;,</span><br><span class="line">    42: &#x27;湖北&#x27;,</span><br><span class="line">    43: &#x27;湖南&#x27;,</span><br><span class="line">    44: &#x27;广东&#x27;,</span><br><span class="line">    45: &#x27;广西&#x27;,</span><br><span class="line">    46: &#x27;海南&#x27;,</span><br><span class="line">    50: &#x27;重庆&#x27;,</span><br><span class="line">    51: &#x27;四川&#x27;,</span><br><span class="line">    52: &#x27;贵州&#x27;,</span><br><span class="line">    53: &#x27;云南&#x27;,</span><br><span class="line">    54: &#x27;西藏&#x27;,</span><br><span class="line">    61: &#x27;陕西&#x27;,</span><br><span class="line">    62: &#x27;甘肃&#x27;,</span><br><span class="line">    63: &#x27;青海&#x27;,</span><br><span class="line">    64: &#x27;宁夏&#x27;,</span><br><span class="line">    65: &#x27;新疆&#x27;,</span><br><span class="line">    71: &#x27;台湾&#x27;,</span><br><span class="line">    81: &#x27;香港&#x27;,</span><br><span class="line">    82: &#x27;澳门&#x27;,</span><br><span class="line">    91: &#x27;国外&#x27;,</span><br><span class="line">  &#125;;</span><br><span class="line">  if (!aCity[parseInt(sId.substr(0, 2))]) &#123;</span><br><span class="line">    console.log(&#x27;你的身份证地区非法&#x27;);</span><br><span class="line">    return false;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ### 出生日期验证</span><br><span class="line">  var sBirthday = (</span><br><span class="line">      sId.substr(6, 4) +</span><br><span class="line">      &#x27;-&#x27; +</span><br><span class="line">      Number(sId.substr(10, 2)) +</span><br><span class="line">      &#x27;-&#x27; +</span><br><span class="line">      Number(sId.substr(12, 2))</span><br><span class="line">    ).replace(/-/g, &#x27;/&#x27;),</span><br><span class="line">    d = new Date(sBirthday);</span><br><span class="line">  if (</span><br><span class="line">    sBirthday !=</span><br><span class="line">    d.getFullYear() + &#x27;/&#x27; + (d.getMonth() + 1) + &#x27;/&#x27; + d.getDate()</span><br><span class="line">  ) &#123;</span><br><span class="line">    console.log(&#x27;身份证上的出生日期非法&#x27;);</span><br><span class="line">    return false;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ### 身份证号码校验</span><br><span class="line">  var sum = 0,</span><br><span class="line">    weights = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2],</span><br><span class="line">    codes = &#x27;10X98765432&#x27;;</span><br><span class="line">  for (var i = 0; i &lt; sId.length - 1; i++) &#123;</span><br><span class="line">    sum += sId[i] * weights[i];</span><br><span class="line">  &#125;</span><br><span class="line">  var last = codes[sum % 11]; ###计算出来的最后一位身份证号码</span><br><span class="line">  if (sId[sId.length - 1] != last) &#123;</span><br><span class="line">    console.log(&#x27;你输入的身份证号非法&#x27;);</span><br><span class="line">    return false;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return true;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="39-随机数范围"><a href="#39-随机数范围" class="headerlink" title="39.随机数范围"></a>39.随机数范围</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">export const random = (min, max) =&gt; &#123;</span><br><span class="line">  if (arguments.length === 2) &#123;</span><br><span class="line">    return Math.floor(min + Math.random() _ ((max + 1) - min))</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    return null;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="40-将阿拉伯数字翻译成中文的大写数字"><a href="#40-将阿拉伯数字翻译成中文的大写数字" class="headerlink" title="40.将阿拉伯数字翻译成中文的大写数字"></a>40.将阿拉伯数字翻译成中文的大写数字</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">export const numberToChinese = (num) =&gt; &#123;</span><br><span class="line">  var AA = new Array(</span><br><span class="line">    &#x27;零&#x27;,</span><br><span class="line">    &#x27;一&#x27;,</span><br><span class="line">    &#x27;二&#x27;,</span><br><span class="line">    &#x27;三&#x27;,</span><br><span class="line">    &#x27;四&#x27;,</span><br><span class="line">    &#x27;五&#x27;,</span><br><span class="line">    &#x27;六&#x27;,</span><br><span class="line">    &#x27;七&#x27;,</span><br><span class="line">    &#x27;八&#x27;,</span><br><span class="line">    &#x27;九&#x27;,</span><br><span class="line">    &#x27;十&#x27;</span><br><span class="line">  );</span><br><span class="line">  var BB = new Array(&#x27;&#x27;, &#x27;十&#x27;, &#x27;百&#x27;, &#x27;仟&#x27;, &#x27;萬&#x27;, &#x27;億&#x27;, &#x27;点&#x27;, &#x27;&#x27;);</span><br><span class="line">  var a = (&#x27;&#x27; + num).replace(/(^0_)/g, &#x27;&#x27;).split(&#x27;.&#x27;),</span><br><span class="line">    k = 0,</span><br><span class="line">    re = &#x27;&#x27;;</span><br><span class="line">  for (var i = a[0].length - 1; i &gt;= 0; i--) &#123;</span><br><span class="line">    switch (k) &#123;</span><br><span class="line">      case 0:</span><br><span class="line">        re = BB[7] + re;</span><br><span class="line">        break;</span><br><span class="line">      case 4:</span><br><span class="line">        if (!new RegExp(&#x27;0&#123;4&#125;###d&#123;&#x27; + (a[0].length - i - 1) + &#x27;&#125;$&#x27;).test(a[0]))</span><br><span class="line">          re = BB[4] + re;</span><br><span class="line">        break;</span><br><span class="line">      case 8:</span><br><span class="line">        re = BB[5] + re;</span><br><span class="line">        BB[7] = BB[5];</span><br><span class="line">        k = 0;</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">    if (k % 4 == 2 &amp;&amp; a[0].charAt(i + 2) != 0 &amp;&amp; a[0].charAt(i + 1) == 0)</span><br><span class="line">      re = AA[0] + re;</span><br><span class="line">    if (a[0].charAt(i) != 0) re = AA[a[0].charAt(i)] + BB[k % 4] + re;</span><br><span class="line">    k++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  if (a.length &gt; 1) &#123;</span><br><span class="line">    ### 加上小数部分(如果有小数部分)</span><br><span class="line">    re += BB[6];</span><br><span class="line">    for (var i = 0; i &lt; a[1].length; i++) re += AA[a[1].charAt(i)];</span><br><span class="line">  &#125;</span><br><span class="line">  if (re == &#x27;一十&#x27;) re = &#x27;十&#x27;;</span><br><span class="line">  if (re.match(/^一/) &amp;&amp; re.length == 3) re = re.replace(&#x27;一&#x27;, &#x27;&#x27;);</span><br><span class="line">  return re;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="41-将数字转换为大写金额"><a href="#41-将数字转换为大写金额" class="headerlink" title="41.将数字转换为大写金额"></a>41.将数字转换为大写金额</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line">export const changeToChinese = (Num) =&gt; &#123;</span><br><span class="line">  ###判断如果传递进来的不是字符的话转换为字符</span><br><span class="line">  if (typeof Num == &#x27;number&#x27;) &#123;</span><br><span class="line">    Num = new String(Num);</span><br><span class="line">  &#125;</span><br><span class="line">  Num = Num.replace(/,/g, &#x27;&#x27;); ###替换 tomoney()中的“,”</span><br><span class="line">  Num = Num.replace(/ /g, &#x27;&#x27;); ###替换 tomoney()中的空格</span><br><span class="line">  Num = Num.replace(/￥/g, &#x27;&#x27;); ###替换掉可能出现的￥字符</span><br><span class="line">  if (isNaN(Num)) &#123;</span><br><span class="line">    ###验证输入的字符是否为数字</span><br><span class="line">    ###alert(&quot;请检查小写金额是否正确&quot;);</span><br><span class="line">    return &#x27;&#x27;;</span><br><span class="line">  &#125;</span><br><span class="line">  ###字符处理完毕后开始转换，采用前后两部分分别转换</span><br><span class="line">  var part = String(Num).split(&#x27;.&#x27;);</span><br><span class="line">  var newchar = &#x27;&#x27;;</span><br><span class="line">  ###小数点前进行转化</span><br><span class="line">  for (var i = part[0].length - 1; i &gt;= 0; i--) &#123;</span><br><span class="line">    if (part[0].length &gt; 10) &#123;</span><br><span class="line">      return &#x27;&#x27;;</span><br><span class="line">      ###若数量超过拾亿单位，提示</span><br><span class="line">    &#125;</span><br><span class="line">    var tmpnewchar = &#x27;&#x27;;</span><br><span class="line">    var perchar = part[0].charAt(i);</span><br><span class="line">    switch (perchar) &#123;</span><br><span class="line">      case &#x27;0&#x27;:</span><br><span class="line">        tmpnewchar = &#x27;零&#x27; + tmpnewchar;</span><br><span class="line">        break;</span><br><span class="line">      case &#x27;1&#x27;:</span><br><span class="line">        tmpnewchar = &#x27;壹&#x27; + tmpnewchar;</span><br><span class="line">        break;</span><br><span class="line">      case &#x27;2&#x27;:</span><br><span class="line">        tmpnewchar = &#x27;贰&#x27; + tmpnewchar;</span><br><span class="line">        break;</span><br><span class="line">      case &#x27;3&#x27;:</span><br><span class="line">        tmpnewchar = &#x27;叁&#x27; + tmpnewchar;</span><br><span class="line">        break;</span><br><span class="line">      case &#x27;4&#x27;:</span><br><span class="line">        tmpnewchar = &#x27;肆&#x27; + tmpnewchar;</span><br><span class="line">        break;</span><br><span class="line">      case &#x27;5&#x27;:</span><br><span class="line">        tmpnewchar = &#x27;伍&#x27; + tmpnewchar;</span><br><span class="line">        break;</span><br><span class="line">      case &#x27;6&#x27;:</span><br><span class="line">        tmpnewchar = &#x27;陆&#x27; + tmpnewchar;</span><br><span class="line">        break;</span><br><span class="line">      case &#x27;7&#x27;:</span><br><span class="line">        tmpnewchar = &#x27;柒&#x27; + tmpnewchar;</span><br><span class="line">        break;</span><br><span class="line">      case &#x27;8&#x27;:</span><br><span class="line">        tmpnewchar = &#x27;捌&#x27; + tmpnewchar;</span><br><span class="line">        break;</span><br><span class="line">      case &#x27;9&#x27;:</span><br><span class="line">        tmpnewchar = &#x27;玖&#x27; + tmpnewchar;</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">    switch (part[0].length - i - 1) &#123;</span><br><span class="line">      case 0:</span><br><span class="line">        tmpnewchar = tmpnewchar + &#x27;元&#x27;;</span><br><span class="line">        break;</span><br><span class="line">      case 1:</span><br><span class="line">        if (perchar != 0) tmpnewchar = tmpnewchar + &#x27;拾&#x27;;</span><br><span class="line">        break;</span><br><span class="line">      case 2:</span><br><span class="line">        if (perchar != 0) tmpnewchar = tmpnewchar + &#x27;佰&#x27;;</span><br><span class="line">        break;</span><br><span class="line">      case 3:</span><br><span class="line">        if (perchar != 0) tmpnewchar = tmpnewchar + &#x27;仟&#x27;;</span><br><span class="line">        break;</span><br><span class="line">      case 4:</span><br><span class="line">        tmpnewchar = tmpnewchar + &#x27;万&#x27;;</span><br><span class="line">        break;</span><br><span class="line">      case 5:</span><br><span class="line">        if (perchar != 0) tmpnewchar = tmpnewchar + &#x27;拾&#x27;;</span><br><span class="line">        break;</span><br><span class="line">      case 6:</span><br><span class="line">        if (perchar != 0) tmpnewchar = tmpnewchar + &#x27;佰&#x27;;</span><br><span class="line">        break;</span><br><span class="line">      case 7:</span><br><span class="line">        if (perchar != 0) tmpnewchar = tmpnewchar + &#x27;仟&#x27;;</span><br><span class="line">        break;</span><br><span class="line">      case 8:</span><br><span class="line">        tmpnewchar = tmpnewchar + &#x27;亿&#x27;;</span><br><span class="line">        break;</span><br><span class="line">      case 9:</span><br><span class="line">        tmpnewchar = tmpnewchar + &#x27;拾&#x27;;</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">    var newchar = tmpnewchar + newchar;</span><br><span class="line">  &#125;</span><br><span class="line">  ###小数点之后进行转化</span><br><span class="line">  if (Num.indexOf(&#x27;.&#x27;) != -1) &#123;</span><br><span class="line">    if (part[1].length &gt; 2) &#123;</span><br><span class="line">      ### alert(&quot;小数点之后只能保留两位,系统将自动截断&quot;);</span><br><span class="line">      part[1] = part[1].substr(0, 2);</span><br><span class="line">    &#125;</span><br><span class="line">    for (i = 0; i &lt; part[1].length; i++) &#123;</span><br><span class="line">      tmpnewchar = &#x27;&#x27;;</span><br><span class="line">      perchar = part[1].charAt(i);</span><br><span class="line">      switch (perchar) &#123;</span><br><span class="line">        case &#x27;0&#x27;:</span><br><span class="line">          tmpnewchar = &#x27;零&#x27; + tmpnewchar;</span><br><span class="line">          break;</span><br><span class="line">        case &#x27;1&#x27;:</span><br><span class="line">          tmpnewchar = &#x27;壹&#x27; + tmpnewchar;</span><br><span class="line">          break;</span><br><span class="line">        case &#x27;2&#x27;:</span><br><span class="line">          tmpnewchar = &#x27;贰&#x27; + tmpnewchar;</span><br><span class="line">          break;</span><br><span class="line">        case &#x27;3&#x27;:</span><br><span class="line">          tmpnewchar = &#x27;叁&#x27; + tmpnewchar;</span><br><span class="line">          break;</span><br><span class="line">        case &#x27;4&#x27;:</span><br><span class="line">          tmpnewchar = &#x27;肆&#x27; + tmpnewchar;</span><br><span class="line">          break;</span><br><span class="line">        case &#x27;5&#x27;:</span><br><span class="line">          tmpnewchar = &#x27;伍&#x27; + tmpnewchar;</span><br><span class="line">          break;</span><br><span class="line">        case &#x27;6&#x27;:</span><br><span class="line">          tmpnewchar = &#x27;陆&#x27; + tmpnewchar;</span><br><span class="line">          break;</span><br><span class="line">        case &#x27;7&#x27;:</span><br><span class="line">          tmpnewchar = &#x27;柒&#x27; + tmpnewchar;</span><br><span class="line">          break;</span><br><span class="line">        case &#x27;8&#x27;:</span><br><span class="line">          tmpnewchar = &#x27;捌&#x27; + tmpnewchar;</span><br><span class="line">          break;</span><br><span class="line">        case &#x27;9&#x27;:</span><br><span class="line">          tmpnewchar = &#x27;玖&#x27; + tmpnewchar;</span><br><span class="line">          break;</span><br><span class="line">      &#125;</span><br><span class="line">      if (i == 0) tmpnewchar = tmpnewchar + &#x27;角&#x27;;</span><br><span class="line">      if (i == 1) tmpnewchar = tmpnewchar + &#x27;分&#x27;;</span><br><span class="line">      newchar = newchar + tmpnewchar;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ###替换所有无用汉字</span><br><span class="line">  while (newchar.search(&#x27;零零&#x27;) != -1) newchar = newchar.replace(&#x27;零零&#x27;, &#x27;零&#x27;);</span><br><span class="line">  newchar = newchar.replace(&#x27;零亿&#x27;, &#x27;亿&#x27;);</span><br><span class="line">  newchar = newchar.replace(&#x27;亿万&#x27;, &#x27;亿&#x27;);</span><br><span class="line">  newchar = newchar.replace(&#x27;零万&#x27;, &#x27;万&#x27;);</span><br><span class="line">  newchar = newchar.replace(&#x27;零元&#x27;, &#x27;元&#x27;);</span><br><span class="line">  newchar = newchar.replace(&#x27;零角&#x27;, &#x27;&#x27;);</span><br><span class="line">  newchar = newchar.replace(&#x27;零分&#x27;, &#x27;&#x27;);</span><br><span class="line">  if (newchar.charAt(newchar.length - 1) == &#x27;元&#x27;) &#123;</span><br><span class="line">    newchar = newchar + &#x27;整&#x27;;</span><br><span class="line">  &#125;</span><br><span class="line">  return newchar;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="42-判断一个元素是否在数组中"><a href="#42-判断一个元素是否在数组中" class="headerlink" title="42.判断一个元素是否在数组中"></a>42.判断一个元素是否在数组中</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export const contains = (arr, val) =&gt; &#123;</span><br><span class="line">  return arr.indexOf(val) != -1 ? true : false;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="43-数组排序，-type-1：从小到大-2：从大到小-3：随机"><a href="#43-数组排序，-type-1：从小到大-2：从大到小-3：随机" class="headerlink" title="43.数组排序，{type} 1：从小到大 2：从大到小 3：随机"></a>43.数组排序，{type} 1：从小到大 2：从大到小 3：随机</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">export const sort = (arr, type = 1) =&gt; &#123;</span><br><span class="line">  return arr.sort((a, b) =&gt; &#123;</span><br><span class="line">    switch (type) &#123;</span><br><span class="line">      case 1:</span><br><span class="line">        return a - b;</span><br><span class="line">      case 2:</span><br><span class="line">        return b - a;</span><br><span class="line">      case 3:</span><br><span class="line">        return Math.random() - 0.5;</span><br><span class="line">      default:</span><br><span class="line">        return arr;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="44-去重"><a href="#44-去重" class="headerlink" title="44.去重"></a>44.去重</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">export const unique = (arr) =&gt; &#123;</span><br><span class="line">  if (Array.hasOwnProperty(&#x27;from&#x27;)) &#123;</span><br><span class="line">    return Array.from(new Set(arr));</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    var n = &#123;&#125;,</span><br><span class="line">      r = [];</span><br><span class="line">    for (var i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">      if (!n[arr[i]]) &#123;</span><br><span class="line">        n[arr[i]] = true;</span><br><span class="line">        r.push(arr[i]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return r;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="45-求两个集合的并集"><a href="#45-求两个集合的并集" class="headerlink" title="45.求两个集合的并集"></a>45.求两个集合的并集</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export const union = (a, b) =&gt; &#123;</span><br><span class="line">  var newArr = a.concat(b);</span><br><span class="line">  return this.unique(newArr);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="46-求两个集合的交集"><a href="#46-求两个集合的交集" class="headerlink" title="46.求两个集合的交集"></a>46.求两个集合的交集</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">export const intersect = (a, b) =&gt; &#123;</span><br><span class="line">  var _this = this;</span><br><span class="line">  a = this.unique(a);</span><br><span class="line">  return this.map(a, function (o) &#123;</span><br><span class="line">    return _this.contains(b, o) ? o : null;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="47-删除其中一个元素"><a href="#47-删除其中一个元素" class="headerlink" title="47.删除其中一个元素"></a>47.删除其中一个元素</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">export const remove = (arr, ele) =&gt; &#123;</span><br><span class="line">  var index = arr.indexOf(ele);</span><br><span class="line">  if (index &gt; -1) &#123;</span><br><span class="line">    arr.splice(index, 1);</span><br><span class="line">  &#125;</span><br><span class="line">  return arr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="48-将类数组转换为数组"><a href="#48-将类数组转换为数组" class="headerlink" title="48.将类数组转换为数组"></a>48.将类数组转换为数组</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">export const formArray = (ary) =&gt; &#123;</span><br><span class="line">  var arr = [];</span><br><span class="line">  if (Array.isArray(ary)) &#123;</span><br><span class="line">    arr = ary;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    arr = Array.prototype.slice.call(ary);</span><br><span class="line">  &#125;</span><br><span class="line">  return arr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="49-最大值"><a href="#49-最大值" class="headerlink" title="49.最大值"></a>49.最大值</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export const max = (arr) =&gt; &#123;</span><br><span class="line">  return Math.max.apply(null, arr);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="50-最小值"><a href="#50-最小值" class="headerlink" title="50.最小值"></a>50.最小值</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export const min = (arr) =&gt; &#123;</span><br><span class="line">  return Math.min.apply(null, arr);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="51-求和"><a href="#51-求和" class="headerlink" title="51.求和"></a>51.求和</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export const sum = (arr) =&gt; &#123;</span><br><span class="line">  return arr.reduce((pre, cur) =&gt; &#123;</span><br><span class="line">    return pre + cur;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="52-平均值"><a href="#52-平均值" class="headerlink" title="52.平均值"></a>52.平均值</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export const average = (arr) =&gt; &#123;</span><br><span class="line">  return this.sum(arr) / arr.length;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="53-去除空格-type-1-所有空格-2-前后空格-3-前空格-4-后空格"><a href="#53-去除空格-type-1-所有空格-2-前后空格-3-前空格-4-后空格" class="headerlink" title="53.去除空格,type: 1-所有空格 2-前后空格 3-前空格 4-后空格"></a>53.去除空格,type: 1-所有空格 2-前后空格 3-前空格 4-后空格</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">export const trim = (str, type) =&gt; &#123;</span><br><span class="line">  type = type || 1;</span><br><span class="line">  switch (type) &#123;</span><br><span class="line">    case 1:</span><br><span class="line">      return str.replace(/\s+/g, &#x27;&#x27;);</span><br><span class="line">    case 2:</span><br><span class="line">      return str.replace(/(^\s*)|(\s*$)/g, &#x27;&#x27;);</span><br><span class="line">    case 3:</span><br><span class="line">      return str.replace(/(^\s*)/g, &#x27;&#x27;);</span><br><span class="line">    case 4:</span><br><span class="line">      return str.replace(/(\s*$)/g, &#x27;&#x27;);</span><br><span class="line">    default:</span><br><span class="line">      return str;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="54-字符转换，type-1-首字母大写-2：首字母小写-3：大小写转换-4：全部大写-5：全部小写"><a href="#54-字符转换，type-1-首字母大写-2：首字母小写-3：大小写转换-4：全部大写-5：全部小写" class="headerlink" title="54.字符转换，type: 1:首字母大写 2：首字母小写 3：大小写转换 4：全部大写 5：全部小写"></a>54.字符转换，type: 1:首字母大写 2：首字母小写 3：大小写转换 4：全部大写 5：全部小写</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">export const changeCase = (str, type) =&gt; &#123;</span><br><span class="line">  type = type || 4;</span><br><span class="line">  switch (type) &#123;</span><br><span class="line">    case 1:</span><br><span class="line">      return str.replace(/\b\w+\b/g, function (word) &#123;</span><br><span class="line">        return (</span><br><span class="line">          word.substring(0, 1).toUpperCase() + word.substring(1).toLowerCase()</span><br><span class="line">        );</span><br><span class="line">      &#125;);</span><br><span class="line">    case 2:</span><br><span class="line">      return str.replace(/\b\w+\b/g, function (word) &#123;</span><br><span class="line">        return (</span><br><span class="line">          word.substring(0, 1).toLowerCase() + word.substring(1).toUpperCase()</span><br><span class="line">        );</span><br><span class="line">      &#125;);</span><br><span class="line">    case 3:</span><br><span class="line">      return str</span><br><span class="line">        .split(&#x27;&#x27;)</span><br><span class="line">        .map(function (word) &#123;</span><br><span class="line">          if (/[a-z]/.test(word)) &#123;</span><br><span class="line">            return word.toUpperCase();</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">            return word.toLowerCase();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .join(&#x27;&#x27;);</span><br><span class="line">    case 4:</span><br><span class="line">      return str.toUpperCase();</span><br><span class="line">    case 5:</span><br><span class="line">      return str.toLowerCase();</span><br><span class="line">    default:</span><br><span class="line">      return str;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="55-检测密码强度"><a href="#55-检测密码强度" class="headerlink" title="55.检测密码强度"></a>55.检测密码强度</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">export const checkPwd = (str) =&gt; &#123;</span><br><span class="line">  var Lv = 0;</span><br><span class="line">  if (str.length &lt; 6) &#123;</span><br><span class="line">    return Lv;</span><br><span class="line">  &#125;</span><br><span class="line">  if (/[0-9]/.test(str)) &#123;</span><br><span class="line">    Lv++;</span><br><span class="line">  &#125;</span><br><span class="line">  if (/[a-z]/.test(str)) &#123;</span><br><span class="line">    Lv++;</span><br><span class="line">  &#125;</span><br><span class="line">  if (/[A-Z]/.test(str)) &#123;</span><br><span class="line">    Lv++;</span><br><span class="line">  &#125;</span><br><span class="line">  if (/[\.|-|_]/.test(str)) &#123;</span><br><span class="line">    Lv++;</span><br><span class="line">  &#125;</span><br><span class="line">  return Lv;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="56-函数节流器"><a href="#56-函数节流器" class="headerlink" title="56.函数节流器"></a>56.函数节流器</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">export const debouncer = (fn, time, interval = 200) =&gt; &#123;</span><br><span class="line">  if (time - (window.debounceTimestamp || 0) &gt; interval) &#123;</span><br><span class="line">    fn &amp;&amp; fn();</span><br><span class="line">    window.debounceTimestamp = time;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="57-在字符串中插入新字符串"><a href="#57-在字符串中插入新字符串" class="headerlink" title="57.在字符串中插入新字符串"></a>57.在字符串中插入新字符串</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export const insertStr = (soure, index, newStr) =&gt; &#123;</span><br><span class="line">  var str = soure.slice(0, index) + newStr + soure.slice(index);</span><br><span class="line">  return str;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="58-判断两个对象是否键值相同"><a href="#58-判断两个对象是否键值相同" class="headerlink" title="58.判断两个对象是否键值相同"></a>58.判断两个对象是否键值相同</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">export const isObjectEqual = (a, b) =&gt; &#123;</span><br><span class="line">  var aProps = Object.getOwnPropertyNames(a);</span><br><span class="line">  var bProps = Object.getOwnPropertyNames(b);</span><br><span class="line"></span><br><span class="line">  if (aProps.length !== bProps.length) &#123;</span><br><span class="line">    return false;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  for (var i = 0; i &lt; aProps.length; i++) &#123;</span><br><span class="line">    var propName = aProps[i];</span><br><span class="line"></span><br><span class="line">    if (a[propName] !== b[propName]) &#123;</span><br><span class="line">      return false;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return true;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="59-16-进制颜色转-RGBRGBA-字符串"><a href="#59-16-进制颜色转-RGBRGBA-字符串" class="headerlink" title="59.16 进制颜色转 RGBRGBA 字符串"></a>59.16 进制颜色转 RGBRGBA 字符串</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">export const colorToRGB = (val, opa) =&gt; &#123;</span><br><span class="line">  var pattern = /^(#?)[a-fA-F0-9]&#123;6&#125;$/; ###16进制颜色值校验规则</span><br><span class="line">  var isOpa = typeof opa == &#x27;number&#x27;; ###判断是否有设置不透明度</span><br><span class="line"></span><br><span class="line">  if (!pattern.test(val)) &#123;</span><br><span class="line">    ###如果值不符合规则返回空字符</span><br><span class="line">    return &#x27;&#x27;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  var v = val.replace(/#/, &#x27;&#x27;); ###如果有#号先去除#号</span><br><span class="line">  var rgbArr = [];</span><br><span class="line">  var rgbStr = &#x27;&#x27;;</span><br><span class="line"></span><br><span class="line">  for (var i = 0; i &lt; 3; i++) &#123;</span><br><span class="line">    var item = v.substring(i * 2, i * 2 + 2);</span><br><span class="line">    var num = parseInt(item, 16);</span><br><span class="line">    rgbArr.push(num);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  rgbStr = rgbArr.join();</span><br><span class="line">  rgbStr =</span><br><span class="line">    &#x27;rgb&#x27; + (isOpa ? &#x27;a&#x27; : &#x27;&#x27;) + &#x27;(&#x27; + rgbStr + (isOpa ? &#x27;,&#x27; + opa : &#x27;&#x27;) + &#x27;)&#x27;;</span><br><span class="line">  return rgbStr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="60-追加-url-参数"><a href="#60-追加-url-参数" class="headerlink" title="60.追加 url 参数"></a>60.追加 url 参数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">export const appendQuery = (url, key, value) =&gt; &#123;</span><br><span class="line">  var options = key;</span><br><span class="line">  if (typeof options == &#x27;string&#x27;) &#123;</span><br><span class="line">    options = &#123;&#125;;</span><br><span class="line">    options[key] = value;</span><br><span class="line">  &#125;</span><br><span class="line">  options = $.param(options);</span><br><span class="line">  if (url.includes(&#x27;?&#x27;)) &#123;</span><br><span class="line">    url += &#x27;&amp;&#x27; + options;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    url += &#x27;?&#x27; + options;</span><br><span class="line">  &#125;</span><br><span class="line">  return url;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Posts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> # </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对当下年轻人选择躺平的思考</title>
      <link href="/2022/11/15/%E5%AF%B9%E5%BD%93%E4%B8%8B%E5%B9%B4%E8%BD%BB%E4%BA%BA%E9%80%89%E6%8B%A9%E8%BA%BA%E5%B9%B3%E7%9A%84%E6%80%9D%E8%80%83/"/>
      <url>/2022/11/15/%E5%AF%B9%E5%BD%93%E4%B8%8B%E5%B9%B4%E8%BD%BB%E4%BA%BA%E9%80%89%E6%8B%A9%E8%BA%BA%E5%B9%B3%E7%9A%84%E6%80%9D%E8%80%83/</url>
      
        <content type="html"><![CDATA[<p>在中国，真正阻止你做自己想做的事情的主要问题并不是没钱，真正的困难是害怕周围人对你的评价。考试考不好有什么可怕的？下次再考就行了，实在考不好，就说明自己不是学习这块料，那找点别的事情干也行啊。事实上，你怕的不是考试考的差，你怕的是父母老师失望，你怕的是他们对你的批评。同理，找不到对象有什么可怕？赚不着钱有什么可怕的？事业失败，离职有什么可怕的？你甚至害怕去做自己想做的事情，因为你做你想做的事情，很可能让其他人不满意，你可能不想成家生孩子，但是其他人会说，不孝有三，无后为大。你可能想去诗和远方，但其他人会说，你的父母尚在苟且，你有什么资格去诗和远方？你可能想换工作，想换伴侣，想干这干那，但你不敢。这些事情本身并不可怕，你害怕的是被其他人认为是不负责任的，不孝的。你害怕的事情多了，自然就活的累了。</p><p>造成这种现象的主要原因，是儒家文化。在儒家文化中，人不是为自己而活的，而是为父母，为家人，为社会而活的，甚至可以说，人是为自己的社会评价而活的，所以，儒家文化圈的中日韩，人相对活的要复杂和辛苦一些。在其他国家，社会评价对人生意义的影响要低得多，你只要不伤害其他人，想干什么就干什么，穷有穷的活法，富有富的活法。他人对你的期待和要求要少的多，来自外部的压力也小的多，更大程度上你是为自己而活的。</p><p>其实大部分人只要打定了这辈子不买房，不谈恋爱，不结婚，不生孩子，不内卷，找个轻松的工作，一个月挣4,5K，日子都能过的很舒服，而外界怎么看你其实并不重要。大多数人痛苦的根源都在于，一直在被社会的“标准”所绑架。社会要求男人必须要买车买房，不然没资格去结婚。社会要求女人要“要瘦要好看”，不在30岁之前结婚你就不是“正常人”。一旦接受了这些标准，并且又达不到之后，你会很容易变得痛苦。而达到社会要求的“标准”，会让你得到外界的认可，但也必然会给你更多的枷锁。想一想是谁在脑海里给你“植入了这些错误的观念”，再想一想有没有必要非得达到这些所谓的“优秀的标准”。接受那些外界“优秀的标准”越多，又达不到的时候，人可能就会越痛苦。</p><p>人，只要能做到活在当下，做自己喜欢做的事情，那他就可以活的简单，想的简单，如果你总是操心未来，那就活着累了。做到活在当下的必要条件是你必须把自己的想法和自己的感受放在第一位。如果你在意自己对别人的影响和别人对你的评价，你就不可能做到活在当下。</p>]]></content>
      
      
      <categories>
          
          <category> Posts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> # </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工作中总结的经验(2022)</title>
      <link href="/2022/11/15/%E5%B7%A5%E4%BD%9C%E4%B8%AD%E6%80%BB%E7%BB%93%E7%9A%84%E7%BB%8F%E9%AA%8C(2022)/"/>
      <url>/2022/11/15/%E5%B7%A5%E4%BD%9C%E4%B8%AD%E6%80%BB%E7%BB%93%E7%9A%84%E7%BB%8F%E9%AA%8C(2022)/</url>
      
        <content type="html"><![CDATA[<h3 id="保持一颗解决问题的心"><a href="#保持一颗解决问题的心" class="headerlink" title="保持一颗解决问题的心"></a>保持一颗解决问题的心</h3><p>按照我的观察，那些在工作中用技术取胜的人们共同点都在于他们能保持一颗解决问题的心。他们可以率先想到一种更优的手段解决存在的问题(一般是效率问题)。他们不是嗅觉特别灵敏或者技术特别强，而是当他们遇到了问题，不是把它作为抱怨的话题，而是开始思考这个问题为什么没人解决、应该怎么解决，然后把它实现出来。这种心态在职场上特别稀缺。</p><p>上一份工作的时候做一个图文排版的需求, 设计师会设计一些模板，然后交给我来实现。当时我们有很多模板，为了测试这些模板实现在不同的手机屏幕大小会有什么问题，我们要花特别多的精力。可以想象测试的数量 &#x3D; 模板数量 * 屏幕尺寸的数量。后来我用 puppeteer 写了个自动生成不同屏幕和模板的截图，直接交给设计师一个一个地看。节省了大量的时间。这个事情没什么技术含量，但它解决了很重要的问题。</p><p>工作中需要解决的问题不仅仅在代码上，也有可能出现在非技术问题上。工作中我会偶尔倍非技术同事聊天，了解他们的工作。因为我常常觉得影响项目前进的原因不一定出在我们用了不适合的技术或者不够「先进」的技术。了解非技术同事的工作流程让我大有收获，我会发现他们有一些工作是可以通过写一段程序把原本的工作量做到指数级的下降，而通常非技术同事是很难察觉到的。</p><p>这样的例子特别多。有次我和一个运营同事聊天，我们当时在开发一个站点内容的管理后台，他们常常用这个后台捞一些内容做分析。聊天的时候了解到他们有一部份的工作就是在上面按条件查询一些内容，再一条条地粘贴到 excel 里面，他说这常常要花一下午。后来我帮她做了一个一键导出成 excel 的功能。</p><p>她觉得这很不可思议，但这在技术的角度来说太简单了。我也因此了解到，对于不是做技术的人来说，他们很难察觉到哪一些事情是可以用技术解决的，所以我们不能希望他们主动地提出一个需求，只能我们作为掌握技术的人主动地去了解他们。</p><h3 id="了解你的用户"><a href="#了解你的用户" class="headerlink" title="了解你的用户"></a>了解你的用户</h3><p>我自认为自己还算是一个有那么一些产品思维的程序员，因为经常也会写一些自己的小产品。但在刚出来工作的时候，我在工作中太沉迷于技术本身。把心思都放在了诸如怎么重构，怎么改进构建速度之类的问题。直到我被问了一个我至今印象深刻的问题：你有了解你的用户是怎么用你在做的这个东西吗？</p><p>这个问题是我从来没有想过的。我想，如果能和他们聊一聊，可能也会有意想不到的收获。或许他们会报怨这个后台的加载速度很慢，我们就可以着手解决加载速度的问题，而不是和同事纠结在用哪种前端状态管理库这种无聊事情上。用户并不关心我们用的是 MobX 还是 Redux.</p><h3 id="不要拿自己的尺子去度量别人"><a href="#不要拿自己的尺子去度量别人" class="headerlink" title="不要拿自己的尺子去度量别人"></a>不要拿自己的尺子去度量别人</h3><p>我刚出来工作犯的最大的错误之一就是拿自己的尺子去度量别人。写程序对我来说是人生中最大的兴趣(至少目前依然是)，我把几乎所有的时间都花在了技术上。当时我天真地认为所有程序员都应该像我这样，对待技术也应该有一种理想主义，我在互联网上结交的技术朋友都是这样的。所以我曾对我的同事特别苛刻，甚至对那些把写程序只当成工作的人嗤之以鼻。现在回想起来，这是非常错误的想法。每个人有每个人的追求，技术也只是多个兴趣爱好的其中一种。在当时别人的眼里我可能是个「怪人」，甚至有点「装逼」。</p><h3 id="保持学习、be-open-mind"><a href="#保持学习、be-open-mind" class="headerlink" title="保持学习、be open-mind"></a>保持学习、be open-mind</h3><p>保持学习一直是保持自身含金量以及和同行拉开差距最重要的一点。</p><h3 id="想清楚，再下手写代码"><a href="#想清楚，再下手写代码" class="headerlink" title="想清楚，再下手写代码"></a>想清楚，再下手写代码</h3><p>基于对编程的热爱，我写代码的速度算是比较快了。技术范围内的很多东西想实现，对我来说基本是纯粹的堆代码。导致我非常容易不经过多的思考就开始动手写。我为此吃了不少亏，常常写到一半发现一些没有想到过的问题，导致需要重新设计，重新改写。我的一位前老板很了解我，他也是个多年经验的程序员了。有一次我们在讨论一个新东西，他对我说，「不要着急，想清楚了再写」。这句话我一直记在心里。后来每次动手写代码之前，我都会把整个流程的设计先思考清楚，避免了很多不必要的重写。</p><h3 id="理解前人写的「烂代码」"><a href="#理解前人写的「烂代码」" class="headerlink" title="理解前人写的「烂代码」"></a>理解前人写的「烂代码」</h3><p>这里的「理解」不是指理解烂代码的逻辑，而是理解为什么会写成烂代码。我经常会听到同事报怨他看到的旧代码写得如何烂，但是实际上很多烂代码产生的原因不是因为技术不行，而是受限于技术的发展和业务的复杂性。随着自己写的代码越来越多，就越能理解这些「烂代码」的存在。看出来了烂代码，也不要着急去重构，这些代码很有可能藏着一些你不知道的特殊业务需求。如果你不需要碰这些代码，那就尽量别碰。</p><h3 id="在技术和工作之间找到平衡点"><a href="#在技术和工作之间找到平衡点" class="headerlink" title="在技术和工作之间找到平衡点"></a>在技术和工作之间找到平衡点</h3><p>在刚出来工作的前几年，我特别陶醉在把自己学到的新东西试图用在工作中。我的想法是，只有我把这个技术用到实际的工作中，我才算学习了这个技术。</p><p>其实这个想法是不对的，学习技术并不一定要求你把他用到工作中。工作就是工作，学习就是学习。工作的内容是为了业务服务的。我曾经因为把一个我刚学习到的库用在业务中，因为一些我不知道的坑导致业务进度出了点问题。曾遭到批评：业务不是你的试验田。</p><p>能把学习到的技术运用到自己的工作中当然是最好的，但这是可遇不可求的事。但是这不代表没有用在工作中，就等于没有真正学习到这个技术。我认为很多人对技术学习有错误的理解，对我来说，学习技术的精髓在于理解这个技术的 Why, What, How. 和能不能用到工作中没有太大的关系。</p><p>举个例子，我在刚接触到 Redux 的时候，我去学习它，除了了解它怎么用以外，我特别关心的是，Redux 的哲学是什么？是什么启发了 Redux 的作者创造了 Redux? 他和别的库有什么不同？顺着这些问题，我就会了解更多的东西，即使我现在几乎不会把 Redux 用在工作中，但我依然记得在学习这个库的时候，我学习到的不仅仅是 Redux 本身，还有它背后的更多东西。我可能很快就会忘掉 Redux 的 API, 但那又如何，那些它背后的知识才是最有价值的，是不会被忘掉的。</p><p>而工作则相当于是一个真实的场景，是在你学习新的技术的时候，帮助你进行实际思考的场景。你需要有意识地去想，这个技术如果用到我的工作中，它是否适合？它能解决什么问题？它为什么适合？它为什么不适合。当你在学习新技术的时候，结合这个技术，多思考这些问题，这才是真正的学习。</p>]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #Javascript </tag>
            
            <tag> #总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工作后，前端工作难在哪里</title>
      <link href="/2022/11/15/%E5%B7%A5%E4%BD%9C%E5%90%8E%EF%BC%8C%E5%89%8D%E7%AB%AF%E5%B7%A5%E4%BD%9C%E9%9A%BE%E5%9C%A8%E5%93%AA%E9%87%8C/"/>
      <url>/2022/11/15/%E5%B7%A5%E4%BD%9C%E5%90%8E%EF%BC%8C%E5%89%8D%E7%AB%AF%E5%B7%A5%E4%BD%9C%E9%9A%BE%E5%9C%A8%E5%93%AA%E9%87%8C/</url>
      
        <content type="html"><![CDATA[<p>前端的工作难度在于，多数工作经验都是无效工作经验，无法让自身能力得到提升，需要自主刻意的进行提升。</p><ul><li><p>开发工具的熟练度无法沉淀，jquery 到 backbone 到 angular 到 vue&#x2F;react，yui 到 grunt 到 gulp 到 webpack 到 rollup，seajs、requirejs 到后来的 CMD、ESM，express 到 koa 到 egg 到 nest，主流的生产工具一直在演变，一路扔一路学。</p></li><li><p>技术方向无法通过工作中的业务开发经验加深深度，web 页面是前端，可视化（3D）也是前端，音视频也是前端，小程序、react-native 也是前端，nodejs 也是前端，每个单拎出来都是一个大领域。</p></li><li><p>职业路线不清晰，前端的参与度在公司整体架构中还是属于前台 UI 层里的一小块，传统软开的从新手到架构师或者从开发者到职业经理人(manager)的职业路线不适合前端，对于前端工程师大多数都是在走一步算一步，没有清晰职业发展规划也无法规划。</p></li><li><p>涉及技术太广，编程语言设计模式算法数据结构这些编程基础能力要懂，网络要懂，http、ssl协议要熟悉，浏览器渲染要熟悉，基础的性能调优要懂，各种框架类库要懂，网络安全要懂一些，SEO 要懂一些，前端工程化的测试打包部署监控要懂一些，web 服务器、nodejs 要懂一些，数据库要懂，图片、字体、动效要懂一些，3D、可视化、物理引擎要懂一些，这些看似割裂的技术又互有联系，但每一块拎出来又是一个大技术领域，而且这些不是专家高级才要懂的，是每一个初级前端也都要点上的技能点，只不过不用过深的了解，但是很容易学着学着就走火入魔了其。</p></li></ul><p>其实，前端也挺容易的，平平无奇切图仔。</p>]]></content>
      
      
      <categories>
          
          <category> Posts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> # </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手写async await的最简实现</title>
      <link href="/2022/11/15/%E6%89%8B%E5%86%99async%20await%E7%9A%84%E6%9C%80%E7%AE%80%E5%AE%9E%E7%8E%B0/"/>
      <url>/2022/11/15/%E6%89%8B%E5%86%99async%20await%E7%9A%84%E6%9C%80%E7%AE%80%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>如果让你手写<code>async</code>函数的实现，你是不是会觉得很复杂？这篇文章带你用20行搞定它的核心。</p><p>经常有人说<code>async</code>函数是<code>generator</code>函数的语法糖，那么到底是怎么样一个糖呢？让我们来一层层的剥开它的糖衣。</p><p>有的同学想说，既然用了<code>generator</code>函数何必还要实现<code>async</code>呢？</p><p>这篇文章的目的就是带大家理解清楚<code>async</code>和<code>generator</code>之间到底是如何相互协作，管理异步的。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getData</span> = (<span class="params"></span>) =&gt; <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="string">&quot;data&quot;</span>), <span class="number">1000</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title function_">getData</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;data: &#x27;</span>, data);</span><br><span class="line">  <span class="keyword">const</span> data2 = <span class="keyword">await</span> <span class="title function_">getData</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;data2: &#x27;</span>, data2);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;success&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这样的一个函数 应该再1秒后打印data 再过一秒打印data2 最后打印success</span></span><br><span class="line"><span class="comment">//&quot;data: &quot;</span></span><br><span class="line"><span class="comment">//&quot;data&quot;</span></span><br><span class="line"><span class="comment">//&quot;data2: &quot;</span></span><br><span class="line"><span class="comment">//&quot;data&quot;</span></span><br><span class="line"><span class="comment">//&quot;success&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>().<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res))</span><br></pre></td></tr></table></figure><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>对于这个简单的案例来说，如果我们把它用<code>generator</code>函数表达，会是怎么样的呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">testG</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// await被编译成了yield</span></span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">yield</span> <span class="title function_">getData</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;data: &#x27;</span>, data);</span><br><span class="line">  <span class="keyword">const</span> data2 = <span class="keyword">yield</span> <span class="title function_">getData</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;data2: &#x27;</span>, data2);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;success&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们知道，<code>generator</code>函数是不会自动执行的，每一次调用它的next方法，会停留在下一个<code>yield</code>的位置。</p><p>利用这个特性，我们只要编写一个自动执行的函数，就可以让这个<code>generator</code>函数完全实现<code>async</code>函数的功能。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getData</span> = (<span class="params"></span>) =&gt; <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="string">&quot;data&quot;</span>), <span class="number">1000</span>))</span><br><span class="line">  </span><br><span class="line"><span class="keyword">var</span> test = <span class="title function_">asyncToGenerator</span>(</span><br><span class="line">    <span class="keyword">function</span>* <span class="title function_">testG</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// await被编译成了yield</span></span><br><span class="line">      <span class="keyword">const</span> data = <span class="keyword">yield</span> <span class="title function_">getData</span>()</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;data: &#x27;</span>, data);</span><br><span class="line">      <span class="keyword">const</span> data2 = <span class="keyword">yield</span> <span class="title function_">getData</span>()</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;data2: &#x27;</span>, data2);</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;success&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>().<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res))</span><br></pre></td></tr></table></figure><p>那么大体上的思路已经确定了，</p><p><code>asyncToGenerator</code>接受一个<code>generator</code>函数，返回一个<code>promise</code>，</p><p>关键就在于，里面用<code>yield</code>来划分的异步流程，应该如何自动执行。</p><h2 id="如果是手动执行"><a href="#如果是手动执行" class="headerlink" title="如果是手动执行"></a>如果是手动执行</h2><p>在编写这个函数之前，我们先模拟手动去调用这个<code>generator</code>函数去一步步的把流程走完，有助于后面的思考。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">testG</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// await被编译成了yield</span></span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">yield</span> <span class="title function_">getData</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;data: &#x27;</span>, data);</span><br><span class="line">  <span class="keyword">const</span> data2 = <span class="keyword">yield</span> <span class="title function_">getData</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;data2: &#x27;</span>, data2);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;success&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们先调用testG生成一个迭代器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回了一个迭代器</span></span><br><span class="line"><span class="keyword">var</span> gen = <span class="title function_">testG</span>()</span><br></pre></td></tr></table></figure><p>然后开始执行第一次next</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一次调用next 停留在第一个yield的位置</span></span><br><span class="line"><span class="comment">// 返回的promise里 包含了data需要的数据</span></span><br><span class="line"><span class="keyword">var</span> dataPromise = gen.<span class="title function_">next</span>()</span><br></pre></td></tr></table></figure><p>这里返回了一个<code>promise</code>，就是第一次<code>getData()</code>所返回的<code>promise</code>，注意</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data = <span class="keyword">yield</span> <span class="title function_">getData</span>()</span><br></pre></td></tr></table></figure><p>这段代码要切割成左右两部分来看，第一次调用next，其实只是停留在了<code>yield getData()</code>这里，</p><p><b><code>data</code>的值并没有被确定。</b></p><p>那么什么时候<code>data</code>的值会被确定呢？</p><p>下一次调用<code>next</code>的时候，传的参数会被作为上一个<code>yield</code>前面接受的值；</p><p>也就是说，我们再次调用<code>gen.next(&#39;这个参数才会被赋给data变量&#39;)</code>的时候</p><p><code>data</code>的值才会被确定为’这个参数才会被赋给data变量’</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">gen.<span class="title function_">next</span>(<span class="string">&#x27;这个参数才会被赋给data变量&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 然后这里的data才有值</span></span><br><span class="line"><span class="keyword">const</span> data = <span class="keyword">yield</span> <span class="title function_">getData</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 然后打印出data</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;data: &#x27;</span>, data);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 然后继续走到下一个yield</span></span><br><span class="line"><span class="keyword">const</span> data2 = <span class="keyword">yield</span> <span class="title function_">getData</span>()</span><br></pre></td></tr></table></figure><p>然后往下执行，直到遇到下一个<code>yield</code>，继续这样的流程…</p><p>这是<code>generator</code>函数设计的一个比较难理解的点，但是为了实现我们的目标，还是得去学习它~</p><p>借助这个特性，如果我们这样去控制<code>yield</code>的流程，是不是就能实现异步串行了？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">testG</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// await被编译成了yield</span></span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">yield</span> <span class="title function_">getData</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;data: &#x27;</span>, data);</span><br><span class="line">  <span class="keyword">const</span> data2 = <span class="keyword">yield</span> <span class="title function_">getData</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;data2: &#x27;</span>, data2);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;success&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> gen = <span class="title function_">testG</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dataPromise = gen.<span class="title function_">next</span>();</span><br><span class="line"></span><br><span class="line">dataPromise.<span class="property">value</span>.<span class="title function_">then</span>(<span class="function">(<span class="params">value1</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// data的value被拿到了 继续调用next并且传递给data</span></span><br><span class="line">    <span class="keyword">var</span> data2Promise = gen.<span class="title function_">next</span>(value1)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// console.log(&#x27;data: &#x27;, data);</span></span><br><span class="line">    <span class="comment">// 此时就会打印出data</span></span><br><span class="line">    </span><br><span class="line">    data2Promise.<span class="property">value</span>.<span class="title function_">then</span>(<span class="function">(<span class="params">value2</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// data2的value拿到了 继续调用next并且传递value2</span></span><br><span class="line">         gen.<span class="title function_">next</span>(value2)</span><br><span class="line">         </span><br><span class="line">        <span class="comment">// console.log(&#x27;data2: &#x27;, data2);</span></span><br><span class="line">        <span class="comment">// 此时就会打印出data2</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这样的一个看着像<code>callback hell的</code>调用，就可以让我们的<code>generator</code>函数把异步安排的明明白白。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>有了这样的思路，实现这个高阶函数就变得很简单了。</p><blockquote><p>这个 js文件 的代码可以直接放进浏览器里运行，欢迎调戏。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">asyncToGenerator</span>(<span class="params">generatorFunc</span>) &#123;</span><br><span class="line">  <span class="comment">// 返回的是一个新的函数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 先调用generator函数 生成迭代器</span></span><br><span class="line">    <span class="comment">// 对应 var gen = testG()</span></span><br><span class="line">    <span class="keyword">const</span> gen = generatorFunc.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回一个promise 因为外部是用.then的方式 或者await的方式去使用这个函数的返回值的</span></span><br><span class="line">    <span class="comment">// var test = asyncToGenerator(testG)</span></span><br><span class="line">    <span class="comment">// test().then(res =&gt; console.log(res))</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    </span><br><span class="line">      <span class="comment">// 内部定义一个step函数 用来一步一步的跨过yield的阻碍</span></span><br><span class="line">      <span class="comment">// key有next和throw两种取值，分别对应了gen的next和throw方法</span></span><br><span class="line">      <span class="comment">// arg参数则是用来把promise resolve出来的值交给下一个yield</span></span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">step</span>(<span class="params">key, arg</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> generatorResult</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 这个方法需要包裹在try catch中</span></span><br><span class="line">        <span class="comment">// 如果报错了 就把promise给reject掉 外部通过.catch可以获取到错误</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          generatorResult = gen[key](arg)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="title function_">reject</span>(error)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// gen.next() 得到的结果是一个 &#123; value, done &#125; 的结构</span></span><br><span class="line">        <span class="keyword">const</span> &#123; value, done &#125; = generatorResult</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (done) &#123;</span><br><span class="line">          <span class="comment">// 如果已经完成了 就直接resolve这个promise</span></span><br><span class="line">          <span class="comment">// 这个done是在最后一次调用next后才会为true</span></span><br><span class="line">          <span class="comment">// 以本文的例子来说 此时的结果是 &#123; done: true, value: &#x27;success&#x27; &#125;</span></span><br><span class="line">          <span class="comment">// 这个value也就是generator函数最后的返回值</span></span><br><span class="line">          <span class="keyword">return</span> <span class="title function_">resolve</span>(value)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 除了最后结束的时候外，每次调用gen.next()</span></span><br><span class="line">          <span class="comment">// 其实是返回 &#123; value: Promise, done: false &#125; 的结构，</span></span><br><span class="line">          <span class="comment">// 这里要注意的是Promise.resolve可以接受一个promise为参数</span></span><br><span class="line">          <span class="comment">// 并且这个promise参数被resolve的时候，这个then才会被调用</span></span><br><span class="line">          <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(</span><br><span class="line">            <span class="comment">// 这个value对应的是yield后面的promise</span></span><br><span class="line">            value</span><br><span class="line">          ).<span class="title function_">then</span>(</span><br><span class="line">            <span class="comment">// value这个promise被resove的时候，就会执行next</span></span><br><span class="line">            <span class="comment">// 并且只要done不是true的时候 就会递归的往下解开promise</span></span><br><span class="line">            <span class="comment">// 对应gen.next().value.then(value =&gt; &#123;</span></span><br><span class="line">            <span class="comment">//    gen.next(value).value.then(value2 =&gt; &#123;</span></span><br><span class="line">            <span class="comment">//       gen.next() </span></span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            <span class="comment">//      // 此时done为true了 整个promise被resolve了 </span></span><br><span class="line">            <span class="comment">//      // 最外部的test().then(res =&gt; console.log(res))的then就开始执行了</span></span><br><span class="line">            <span class="comment">//    &#125;)</span></span><br><span class="line">            <span class="comment">// &#125;)</span></span><br><span class="line">            <span class="keyword">function</span> <span class="title function_">onResolve</span>(<span class="params">val</span>) &#123;</span><br><span class="line">              <span class="title function_">step</span>(<span class="string">&quot;next&quot;</span>, val)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 如果promise被reject了 就再次进入step函数</span></span><br><span class="line">            <span class="comment">// 不同的是，这次的try catch中调用的是gen.throw(err)</span></span><br><span class="line">            <span class="comment">// 那么自然就被catch到 然后把promise给reject掉啦</span></span><br><span class="line">            <span class="keyword">function</span> <span class="title function_">onReject</span>(<span class="params">err</span>) &#123;</span><br><span class="line">              <span class="title function_">step</span>(<span class="string">&quot;throw&quot;</span>, err)</span><br><span class="line">            &#125;,</span><br><span class="line">          )</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">step</span>(<span class="string">&quot;next&quot;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文用最简单的方式实现了<code>asyncToGenerator</code>这个函数，这是<code>babel</code>编译<code>async</code>函数的核心，当然在<code>babel</code>中，<code>generator</code>函数也被编译成了一个很原始的形式，本文我们直接以<code>generator</code>替代，这也是实现<code>promise</code>串行的一个很棒的模式。</p>]]></content>
      
      
      <categories>
          
          <category> Posts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> # </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手写常用的自定义hooks</title>
      <link href="/2022/11/15/%E6%89%8B%E5%86%99%E5%B8%B8%E7%94%A8%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89hooks/"/>
      <url>/2022/11/15/%E6%89%8B%E5%86%99%E5%B8%B8%E7%94%A8%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89hooks/</url>
      
        <content type="html"><![CDATA[<h2 id="一、react-hooks核心API使用注意事项"><a href="#一、react-hooks核心API使用注意事项" class="headerlink" title="一、react hooks核心API使用注意事项"></a>一、react hooks核心API使用注意事项</h2><p>在开发过程中常用的<code>hooks</code>主要有<code>useState</code>, <code>useEffect</code>，<code>useCallback</code>，<code>useMemo</code>，<code>useRef</code>。当然像<code>useReducer</code>, <code>useContext</code>, <code>createContext</code>这些钩子在H5游戏中也会使用，因为不需要维护错综复杂的状态，所以我们完全可以由上述三个 api 构建一个自己的小型 redux（后面会介绍如何实现小型的 redux ）来处理全局状态，但是对于企业复杂项目来说，redux仍然是值得信赖的选择。</p><p>在使用<code>hooks</code>和函数组件编写我们的组件时，第一个要考虑的就是渲染性能，我们知道如果在不做任何处理时，我们在函数组件中使用<code>setState</code>都会导致组件内部重新渲染，一个比较典型的场景：</p><p><img src="https://jszyy-pan.oss-cn-shanghai.aliyuncs.com/images-blog/custom_hooks/img01.jpg" alt="img01"></p><p>当我们在容器组件手动更新了任何state时，容器内部的各个子组件都会重新渲染，为了避免这种情况出现，我们一般都会使用<code>memo</code>将函数组件包裹，来达到 class 组件的<code>pureComponent</code>的效果：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; memo, useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">A</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;A1&#x27;</span>);</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;A2&#x27;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> B = <span class="title function_">memo</span>(<span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;B1&#x27;</span>);</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;B2&#x27;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>B<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Home</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [a, setA] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;start&#x27;</span>);</span><br><span class="line">    <span class="title function_">setA</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;, [])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">A</span> <span class="attr">n</span>=<span class="string">&#123;a&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">B</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们将B用memo包裹后，状态 a 的更新将不会导致B组件重新渲染。其实仅仅优化这一点还远远不够的，比如说我们子组件用到了容器组件的某个变量或者函数，那么当容器内部的<code>state</code>更新之后，这些变量和函数都会重新赋值，这样就会导致即使子组件使用了<code>memo</code>包裹也还是会重新渲染，那么这个时候我们就需要使用<code>useMemo</code>和<code>useCallback</code>了。</p><p><code>useMemo</code>可以帮我们将变量缓存起来，而<code>useCallback</code>可以缓存回调函数，它们的第二个参数和<code>useEffect</code>一样，是一个依赖项数组，通过配置数组依赖项来决定是否重新执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; memo, useState, useEffect, useMemo &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Home</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [a, setA] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> [b, setB] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setA</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;, [])</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">const</span> add = <span class="title function_">useCallback</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;b&#x27;</span>, b);</span><br><span class="line">  &#125;, [b])</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">const</span> name = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> b + <span class="string">&#x27;test&#x27;</span>;</span><br><span class="line">  &#125;, [b])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">A</span> <span class="attr">n</span>=<span class="string">&#123;a&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">B</span> <span class="attr">add</span>=<span class="string">&#123;add&#125;</span> <span class="attr">name</span>=<span class="string">&#123;name&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时 a 更新后 B 组件不会再重新渲染。以上几个优化步骤主要是用来优化组件的渲染性能，我们平时还会涉及到获取组件<code>dom</code>和使用内部闭包变量的情景，这个时候我们就可以使用<code>useRef</code>。</p><p><code>useRef</code>返回一个可变的 <code>ref </code> 对象，其 <code>.current</code> 属性被初始化为传入的参数（<code>initialValue</code>）。返回的 <code>ref </code> 对象在组件的整个生命周期内保持不变。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">AutoFocusIpt</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> inputEl = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// `current` 指向已挂载到 DOM 上的文本输入元素</span></span><br><span class="line">    inputEl.<span class="property">current</span>.<span class="title function_">focus</span>();</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;inputEl&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了以上应用场景外，我们还可以利用它来实现class组件的setState的功能，具体实现后面会有介绍。</p><h2 id="二、模拟实现小型redux"><a href="#二、模拟实现小型redux" class="headerlink" title="二、模拟实现小型redux"></a>二、模拟实现小型<code>redux</code></h2><p>实现<code>redux</code>我们会利用之前说的<code>useReducer</code>, <code>useContext</code>, <code>createContext</code>这三个<code>api</code>，至于如何实现<code>redux</code>，其实网上也有很多实现方式，这里提供一个简单<code>demo</code>仅供参考：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// actionType.js</span></span><br><span class="line"><span class="keyword">const</span> actionType = &#123;</span><br><span class="line">  <span class="attr">INSREMENT</span>: <span class="string">&#x27;INSREMENT&#x27;</span>,</span><br><span class="line">  <span class="attr">DECREMENT</span>: <span class="string">&#x27;DECREMENT&#x27;</span>,</span><br><span class="line">  <span class="attr">RESET</span>: <span class="string">&#x27;RESET&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> actionType;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// actions.js</span></span><br><span class="line"><span class="keyword">import</span> actionType <span class="keyword">from</span> <span class="string">&#x27;./actionType&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">num</span>) =&gt; (&#123;</span><br><span class="line">    <span class="attr">type</span>: actionType.<span class="property">INSREMENT</span>,</span><br><span class="line">    <span class="attr">payload</span>: num</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="title function_">dec</span> = (<span class="params">num</span>) =&gt; (&#123;</span><br><span class="line">    <span class="attr">type</span>: actionType.<span class="property">DECREMENT</span>,</span><br><span class="line">    <span class="attr">payload</span>: num</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getList</span> = (<span class="params">data</span>) =&gt; (&#123;</span><br><span class="line">    <span class="attr">type</span>: actionType.<span class="property">GETLIST</span>,</span><br><span class="line">    <span class="attr">payload</span>: data</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">    add,</span><br><span class="line">    dec,</span><br><span class="line">    getList</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// reducer.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">init</span>(<span class="params">initialCount</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">count</span>: initialCount,</span><br><span class="line">    <span class="attr">total</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="attr">user</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">article</span>: []</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reducer</span>(<span class="params">state, action</span>) &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> actionType.<span class="property">INSREMENT</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;<span class="attr">count</span>: state.<span class="property">count</span> + action.<span class="property">payload</span>&#125;;</span><br><span class="line">    <span class="keyword">case</span> actionType.<span class="property">DECREMENT</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;<span class="attr">count</span>: state.<span class="property">count</span> - action.<span class="property">payload</span>&#125;;</span><br><span class="line">    <span class="keyword">case</span> actionType.<span class="property">RESET</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">init</span>(action.<span class="property">payload</span>);</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> &#123; init, reducer &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// redux.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useReducer, useContext, createContext &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; init, reducer &#125; <span class="keyword">from</span> <span class="string">&#x27;./reducer&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Context</span> = <span class="title function_">createContext</span>();</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Provider</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [state, dispatch] = <span class="title function_">useReducer</span>(reducer, props.<span class="property">initialState</span> || <span class="number">0</span>, init);</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">Context.Provider</span> <span class="attr">value</span>=<span class="string">&#123;&#123;state,</span> <span class="attr">dispatch</span>&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123; props.children &#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Context.Provider</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> &#123; <span class="title class_">Context</span>, <span class="title class_">Provider</span> &#125;</span><br></pre></td></tr></table></figure><p>其实还有更优雅的方式实现，暂时不过深讨论。接下来我们进入正文，实现几个常用的自定义hooks。</p><h2 id="三、实现自定义的useState，支持类似class组件setState方法"><a href="#三、实现自定义的useState，支持类似class组件setState方法" class="headerlink" title="三、实现自定义的useState，支持类似class组件setState方法"></a>三、实现自定义的<code>useState</code>，支持类似<code>class</code>组件<code>setState</code>方法</h2><p>熟悉<code>react</code>的朋友都知道，我们使用<code>class</code>组件更新状态时，<code>setState</code>会支持两个参数，一个是更新后的<code>state</code>或者回调时更新的<code>state</code>，另一个参数是更新后的回调函数，如下面的用法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">num</span>: <span class="number">1</span>&#125;, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;updated&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>但是<code>hooks</code>函数的<code>useState</code>第二个参数回调支持类似<code>class</code>组件的<code>setState</code>的第一个参数的用法，并不支持第二个参数回调，但是很多业务场景中我们又希望<code>hooks</code>组件能支持更新后的回调这一方法，那该怎么办呢？其实问题也很简单，这里我们借助上面提到的<code>useRef</code>和<code>useEffect</code>配合<code>useState</code>来实现这一功能。</p><blockquote><p>注：<code>react hooks</code>的<code>useState</code>一定要放到函数组件的最顶层，不能写在<code>if -&gt; else</code>等条件语句当中，来确保<code>hooks</code>的执行顺序一致，因为<code>useState</code>底层采用链表结构实现，有严格的顺序之分。</p></blockquote><p>我们先来看看实现的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useEffect, useRef, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="title function_">useXState</span> = (<span class="params">initState</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> [state, setState] = <span class="title function_">useState</span>(initState);</span><br><span class="line">    <span class="keyword">let</span> isUpdate = <span class="title function_">useRef</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">setXState</span> = (<span class="params">state, cb</span>) =&gt; &#123;</span><br><span class="line">      <span class="title function_">setState</span>(<span class="function"><span class="params">prev</span> =&gt;</span> &#123;</span><br><span class="line">        isUpdate.<span class="property">current</span> = cb</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">typeof</span> state === <span class="string">&#x27;function&#x27;</span> ? <span class="title function_">state</span>(prev) : state</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(isUpdate.<span class="property">current</span>) &#123;</span><br><span class="line">        isUpdate.<span class="title function_">current</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> [state, setXState];</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useXState;</span><br></pre></td></tr></table></figure><p>利用<code>useRef</code>的特性来作为标识区分是挂载还是更新，当执行<code>setXstate</code>时，会传入和<code>setState</code>一模一样的参数，并且将回调赋值给<code>useRef</code>的<code>current</code>属性，这样在更新完成时，手动调用<code>current</code>即可实现更新后的回调这一功能了。</p><h2 id="四、实现自定义的useDebounce"><a href="#四、实现自定义的useDebounce" class="headerlink" title="四、实现自定义的useDebounce"></a>四、实现自定义的<code>useDebounce</code></h2><p>节流函数和防抖函数可谓老生常谈的问题了，为了让我们在开发中更优雅的处理节流和防抖，开发过程中往往需要让某个<code>state</code>也具有节流、防抖的功能，抑或是某个函数的调用；为了避免频繁调用，我们往往也会采取节、流防抖这一思想，原生的节流、防抖函数可能如一下代码所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 节流</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">func, ms</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> previous = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> now = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">        <span class="keyword">let</span> context = <span class="variable language_">this</span>;</span><br><span class="line">        <span class="keyword">let</span> args = <span class="variable language_">arguments</span>;</span><br><span class="line">        <span class="keyword">if</span> (now - previous &gt; ms) &#123;</span><br><span class="line">            func.<span class="title function_">apply</span>(context, args);</span><br><span class="line">            previous = now;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 防抖</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">func, ms</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> timeout;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> context = <span class="variable language_">this</span>;</span><br><span class="line">        <span class="keyword">let</span> args = <span class="variable language_">arguments</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (timeout) <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line">        </span><br><span class="line">        timeout = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            func.<span class="title function_">apply</span>(context, args)</span><br><span class="line">        &#125;, ms);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么我们首先来实现一下防抖的<code>hooks</code>，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useEffect, useRef &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="title function_">useDebounce</span> = (<span class="params">fn, ms = <span class="number">30</span>, deps = []</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> timeout = <span class="title function_">useRef</span>();</span><br><span class="line"></span><br><span class="line">    <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (timeout.<span class="property">current</span>) <span class="built_in">clearTimeout</span>(timeout.<span class="property">current</span>);</span><br><span class="line">        timeout.<span class="property">current</span> = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">fn</span>();</span><br><span class="line">        &#125;, ms)</span><br><span class="line">    &#125;, deps)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">cancel</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timeout.<span class="property">current</span>);</span><br><span class="line">        timeout = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> [cancel];</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useDebounce;</span><br></pre></td></tr></table></figure><p>由代码可以知道，<code>useDebounce</code>接受三个参数，分别为回调函数，时间间隔以及依赖项数组，它暴露了<code>cancel </code>这个API，用来手动控制停止防抖函数。具体使用如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入自定义 hooks</span></span><br><span class="line"><span class="keyword">import</span> &#123; useDebounce &#125; <span class="keyword">from</span> <span class="string">&#x27;hooks&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Home</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [a, setA] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> [b, setB] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> [cancel] = <span class="title function_">useDebounce</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setB</span>(a);</span><br><span class="line">  &#125;, <span class="number">2000</span>, [a])</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">changeIpt</span> = (<span class="params">e</span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setA</span>(e.<span class="property">target</span>.<span class="property">value</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">onChange</span>=<span class="string">&#123;changeIpt&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123; b &#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123; a &#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码就实现了<code>state</code>的<code>debounce</code>的功能，具体效果如下图所示：</p><p><img src="https://jszyy-pan.oss-cn-shanghai.aliyuncs.com/images-blog/custom_hooks/img02.gif" alt="img02"></p><h2 id="五、实现自定义的useThrottle"><a href="#五、实现自定义的useThrottle" class="headerlink" title="五、实现自定义的useThrottle"></a>五、实现自定义的<code>useThrottle</code></h2><p>同理，我们继续来实现节流的<code>hooks</code>函数。直接上代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useEffect, useRef, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="title function_">useThrottle</span> = (<span class="params">fn, ms = <span class="number">30</span>, deps = []</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> previous = <span class="title function_">useRef</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">let</span> [time, setTime] = <span class="title function_">useState</span>(ms);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> now = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">        <span class="keyword">if</span> (now - previous.<span class="property">current</span> &gt; time) &#123;</span><br><span class="line">            <span class="title function_">fn</span>();</span><br><span class="line">            previous.<span class="property">current</span> = now;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, deps)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">cancel</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        <span class="title function_">setTime</span>(<span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> [cancel];</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useThrottle;</span><br></pre></td></tr></table></figure><p>代码和自定义<code>useDebounce</code>类似，但需要注意一点就是为了实现<code>cancel</code>功能，我们使用了内部<code>state</code>来处理，通过控制时间间隔来取消节流效果，当然还有很多其他方法可以实现这个<code>hooks </code>API。具体效果如下：</p><p><img src="https://jszyy-pan.oss-cn-shanghai.aliyuncs.com/images-blog/custom_hooks/img03.gif" alt="img03"></p><h2 id="六、实现自定义useTitle"><a href="#六、实现自定义useTitle" class="headerlink" title="六、实现自定义useTitle"></a>六、实现自定义<code>useTitle</code></h2><p>自定义的<code>useTitle</code>其实使用场景也很多，因为我们目前大部分项目都是采用<code>SPA</code>或者混合开发，对于不同的路由我们同样希望像多页应用一样能切换到对应的标题，这样可以让用户更好的知道页面的主题和内容。这个<code>hooks</code>的实现也很简单，我们直接上代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="title function_">useTitle</span> = (<span class="params">title</span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">title</span> = title;</span><br><span class="line">    &#125;, [])</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useTitle;</span><br></pre></td></tr></table></figure><p>以上代码可以看出我们只需要在<code>useEffect</code>中设置<code>document</code>的<code>title</code>属性就好了，我们不需要<code>return</code>任何值。其实还有更优雅和复杂的实现方法，这里就不一一举例了。具体使用如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Home</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="title function_">useTitle</span>(<span class="string">&#x27;首页&#x27;</span>)</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>home<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="七、实现自定义的useUpdate"><a href="#七、实现自定义的useUpdate" class="headerlink" title="七、实现自定义的useUpdate"></a>七、实现自定义的<code>useUpdate</code></h2><p>我们都知道如果想让组件重新渲染，我们不得不更新<code>state</code>，但是有时候业务需要的<code>state</code>是没必要更新的，我们不能仅仅为了让组件会重新渲染而强制让一个<code>state</code>做无意义的更新，所以这个时候可以自定义一个更新的<code>hooks</code>来优雅的实现组件的强制更新，实现代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="title function_">useUpdate</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> [, setFlag] = <span class="title function_">useState</span>();</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">update</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        <span class="title function_">setFlag</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>());</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> update;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useUpdate;</span><br></pre></td></tr></table></figure><p>以上代码可以发现，我们<code>useUpdate</code>钩子返回了一个函数，该函数就是用来强制更新用的。使用方法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Home</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">const</span> update = <span class="title function_">useUpdate</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> </span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;Date.now()&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;update&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        update</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://jszyy-pan.oss-cn-shanghai.aliyuncs.com/images-blog/custom_hooks/img04.gif" alt="img04"></p><h2 id="八、实现自定义的useScroll"><a href="#八、实现自定义的useScroll" class="headerlink" title="八、实现自定义的useScroll"></a>八、实现自定义的<code>useScroll</code></h2><p>自定义的<code>useScroll</code>也是高频出现的问题之一，我们往往会监听一个元素滚动位置的变化来决定展现那些内容，这个应用场景在H5游戏开发中应用十分广泛，接下来我们来看看实现代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="title function_">useScroll</span> = (<span class="params">scrollRef</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [pos, setPos] = <span class="title function_">useState</span>([<span class="number">0</span>,<span class="number">0</span>]);</span><br><span class="line"> </span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">handleScroll</span>(<span class="params">e</span>)&#123;</span><br><span class="line">      <span class="title function_">setPos</span>([scrollRef.<span class="property">current</span>.<span class="property">scrollLeft</span>, scrollRef.<span class="property">current</span>.<span class="property">scrollTop</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    scrollRef.<span class="property">current</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, handleScroll, <span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      scrollRef.<span class="property">current</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, handleScroll, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [])</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> pos;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useScroll;</span><br></pre></td></tr></table></figure><p>由以上代码可知，我们在钩子函数里需要传入一个元素的引用，这个我们可以在函数组件中采用<code>ref</code>和<code>useRef</code>来获取到，钩子返回了滚动的<code>x，y</code>值，即滚动的左位移和顶部位移，具体使用如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useRef &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useScroll &#125; <span class="keyword">from</span> <span class="string">&#x27;hooks&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Home</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> scrollRef = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> [x, y] = <span class="title function_">useScroll</span>(scrollRef);</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&#123;scrollRef&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;innerBox&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123; x &#125;, &#123; y &#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过使用<code>useScroll</code>，钩子将会帮我们自动监听容器滚动条的变化从而实时获取滚动的位置。具体效果如下：</p><p><img src="https://jszyy-pan.oss-cn-shanghai.aliyuncs.com/images-blog/custom_hooks/img05.gif" alt="img05"></p><blockquote><p>后续持续补充…</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Posts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> # </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>携号转网体验</title>
      <link href="/2022/11/15/%E6%90%BA%E5%8F%B7%E8%BD%AC%E7%BD%91%E4%BD%93%E9%AA%8C/"/>
      <url>/2022/11/15/%E6%90%BA%E5%8F%B7%E8%BD%AC%E7%BD%91%E4%BD%93%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<p>因为不堪当时各种鱼龙混杂的套餐市场，4年前选择了自认为比较“省心”的联通“蚂蚁小宝卡”套餐，具体套餐内容这里不作赘述。</p><p>后来因为工作场地原因，联通手机信号实在是苦不堪言，移动数据流量更是让人抓狂。其中有个情况我觉得有必要说一下，正式因为联通信号差的原因，手机频繁“显示尊敬的用户，欢迎您使用中国联通业务！”这样的弹窗，个人认为实在是丑陋之极，也着实影响了正常使用。</p><h2 id="第一步：查询是否具备携号转网条件"><a href="#第一步：查询是否具备携号转网条件" class="headerlink" title="第一步：查询是否具备携号转网条件"></a>第一步：查询是否具备携号转网条件</h2><p>通过短信可以查询当前号码是否满足携转条件：电信 &#x2F; 移动 &#x2F; 联通用户使用本机发送短信 <code>CXXZ#姓名#证件号码</code> 到 10001&#x2F;10086&#x2F;10010；</p><p>没想到的是，自从使用这个手机号以来从未办理过任何套餐，但是却有一个“新网龄回馈语音活动”，而且到期时间是2024年3月31日。随后致电联通客服，查询到是手机号当地营业厅办理的一个优惠套餐，其中种种就不再细说，而后向客服表达携号转网诉求后成功取消该套餐，随后又进行了一次查询，就提示满足条件了。</p><h2 id="第二步：确定转入的运营商"><a href="#第二步：确定转入的运营商" class="headerlink" title="第二步：确定转入的运营商"></a>第二步：确定转入的运营商</h2><p>我选择了电信，没有特殊原因，仅仅是因为移动联通在公司环境下的表现属实差强人意。</p><h2 id="第三步：提交申请"><a href="#第三步：提交申请" class="headerlink" title="第三步：提交申请"></a>第三步：提交申请</h2><p>我是通过手机APP电信营业厅进行的操作，直接搜索携号转网，然后进行确认转入资格确认，套餐选择就可以进行订单提交。这里让我进行了20元的预存，不太明白其中含义。</p><h2 id="第四步：号卡激活"><a href="#第四步：号卡激活" class="headerlink" title="第四步：号卡激活"></a>第四步：号卡激活</h2><p>从发起申请到拿到新卡只隔了一天时间，这个效率还是挺认可的。过程也很方便，从快递小哥手里签收之后，需要使用原卡进行授权码查询，<code>SQXZ#姓名#身份证号</code>发送到对应的运营商，就可以获取到一个6位随机携出授权码，需要注意的是，有效期为一个小时。</p><p>然后进入转入运营商的APP端进行携号入网激活，简单验证成功后耐心等待就可以，激活过程大概20分钟就能办理结束。</p><h2 id="使用体验"><a href="#使用体验" class="headerlink" title="使用体验"></a>使用体验</h2><p>目前使用了一个星期，暂时没遇到什么问题，关于网上吐槽的验证码接收问题，测试了几个常用的门户也都正常，信号也没有异常，使用上来说暂时没遇到任何问题。</p><h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><p>整个过程只持续了大概30个小时（头一天的周五早上10点，第二天下午3点左右结束），除了联通方面莫名奇妙卡下多了一个合约套餐之外，没有遇到困难，算是比较顺利。</p><h2 id="关于退费"><a href="#关于退费" class="headerlink" title="关于退费"></a>关于退费</h2><p>由于携号转网之前，号码在原运营商还余有预存话费，退费过程却有些复杂。<br>携号转网退费必须本人携带有效证件前往号码归属地的营业厅办理，办理前需要咨询营业厅是否能够办理（本人跑了两个营业厅），退费办理流程并不复杂，不需要额外操作，但是需要注意的是，充值赠送活动赠送的话费等福利不会退还。</p>]]></content>
      
      
      <categories>
          
          <category> Posts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> # </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>改写原生 flat 方法，以支持IE及chrome低版本</title>
      <link href="/2022/11/15/%E6%94%B9%E5%86%99%E5%8E%9F%E7%94%9F%20flat%20%E6%96%B9%E6%B3%95%EF%BC%8C%E4%BB%A5%E6%94%AF%E6%8C%81IE%E5%8F%8Achrome%E4%BD%8E%E7%89%88%E6%9C%AC/"/>
      <url>/2022/11/15/%E6%94%B9%E5%86%99%E5%8E%9F%E7%94%9F%20flat%20%E6%96%B9%E6%B3%95%EF%BC%8C%E4%BB%A5%E6%94%AF%E6%8C%81IE%E5%8F%8Achrome%E4%BD%8E%E7%89%88%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">flat</span>)&#123;</span><br><span class="line">  <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">flat</span> = <span class="keyword">function</span>(<span class="params">count</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> c = count || <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> len = <span class="variable language_">this</span>.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">let</span> ret = [];</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">length</span> == <span class="number">0</span>) <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">while</span> (c--) &#123;</span><br><span class="line">      <span class="keyword">let</span> _arr = [];</span><br><span class="line">      <span class="keyword">let</span> flag = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">if</span> (ret.<span class="property">length</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="variable language_">this</span>[i] <span class="keyword">instanceof</span> <span class="title class_">Array</span>) &#123;</span><br><span class="line">            ret.<span class="title function_">push</span>(...<span class="variable language_">this</span>[i]);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ret.<span class="title function_">push</span>(<span class="variable language_">this</span>[i]);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; ret.<span class="property">length</span>; i++) &#123;</span><br><span class="line">          <span class="keyword">if</span> (ret[i] <span class="keyword">instanceof</span> <span class="title class_">Array</span>) &#123;</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">            _arr.<span class="title function_">push</span>(...ret[i]);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            _arr.<span class="title function_">push</span>(ret[i]);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ret = _arr;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (!flag &amp;&amp; c == <span class="title class_">Infinity</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;；</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Posts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> # </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详解JS执行队列(JavaScript执行顺序)，搞懂setTimeout方法到底是如何执行的</title>
      <link href="/2022/11/15/%E8%AF%A6%E8%A7%A3JS%E6%89%A7%E8%A1%8C%E9%98%9F%E5%88%97(JavaScript%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F)%EF%BC%8C%E6%90%9E%E6%87%82setTimeout%E6%96%B9%E6%B3%95%E5%88%B0%E5%BA%95%E6%98%AF%E5%A6%82%E4%BD%95%E6%89%A7%E8%A1%8C%E7%9A%84/"/>
      <url>/2022/11/15/%E8%AF%A6%E8%A7%A3JS%E6%89%A7%E8%A1%8C%E9%98%9F%E5%88%97(JavaScript%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F)%EF%BC%8C%E6%90%9E%E6%87%82setTimeout%E6%96%B9%E6%B3%95%E5%88%B0%E5%BA%95%E6%98%AF%E5%A6%82%E4%BD%95%E6%89%A7%E8%A1%8C%E7%9A%84/</url>
      
        <content type="html"><![CDATA[<blockquote><p>定义：setTimeout() 方法用于在指定的毫秒数后调用函数或计算表达式。</p></blockquote><h4 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h4><p><img src="http://lc-4ltdklta.cn-n1.lcfile.com/a5b463d59e4ce0cf65d1/a1-11624109-fbf7e6f59d4f9618.webp" alt="例子1"></p><p>但是setTimeout真的有那么简单吗？到底setTimeout是不是异步执行的呢?</p><h4 id="没这么简单，再看一个栗子"><a href="#没这么简单，再看一个栗子" class="headerlink" title="没这么简单，再看一个栗子"></a>没这么简单，再看一个栗子</h4><p><img src="http://lc-4ltdklta.cn-n1.lcfile.com/650eb78abf53c87c46ab/a2-11624109-3afb574cbed0ba00.webp" alt="例子2"></p><p>我们在setTimeout里面指定了0ms，是希望这段代码能立即执行，但是实际上并没有效果，而是先打印出了2，然后才是1，最后大约1s的时间打印3。<br>这是不是就说明setTimeout就是异步的呢？<br>如果是异步的同时执行多个setTimeout（）应该同时会执行，请再看下面的栗子：</p><p><img src="http://lc-4ltdklta.cn-n1.lcfile.com/9a24e0653827f6830aea/a3-11624109-dc392b9014d81f93.webp" alt="例子3"></p><p>从上面的代码可以知道，JS不是多线程的，那js就是单线程的？有么有异步执行呢？</p><p>出现上面所有误区的最主要一个原因是：我们潜意识中认为，JavaScript引擎有多个线程在执行,JavaScript的定时器回调函数是异步执行的.<br>而事实上的,JavaScript使用了障眼法,在多数时候骗过了我们的眼睛,这里得澄清一个事实：</p><blockquote><p>JavaScript引擎是单线程运行的,浏览器无论在什么时候都只且只有一个线程在运行JavaScript程序。</p></blockquote><p>除了主JavaScript执行进程外，还需要一个在进程下一次空闲时执行的代码队列（这个队列就是监听执行回调的）。<br>随着页面生命周期推移，代码会按照执行顺序添加入队列，例如当按钮被按下的时候他的事件处理程序会被添加到队列中，并在下一个可能时间内执行。JavaScript中没有任何代码是立即执行的，但一旦进程空闲则尽快执行。<br>所以，定时器工作方式是当特定时间过去后将代码插入，但这并不意味着它会马上执行，只能表示它尽快执行。<br>设定一个150ms后执行的定时器，不代表150ms后它会马上执行，它只表示在150ms后被加入到执行队列中，如果这个时间点执行队列是空闲的，那么这段代码就会被执行;其他情况下,代码可能明显地等待更长时间才会去执行。<br>看下面这个栗子：</p><p><img src="http://lc-4ltdklta.cn-n1.lcfile.com/68d1904f23caf65c311a/a4-11624109-598209375ac86c02.webp" alt="例子4"></p><p>上面的例子里，一般的理解应该是先打印0ms的再打印500ms的，但是，其实js在解析的时候遇到了setTimeout方法，第一次过了0ms后把延时0ms的优先加入执行队列里，再在500ms后把延时500ms的其放入待执行的队列里，跳过去顺序执行下面的代码，当主线程中的代码执行完成后，js引擎去检索待执行的队列有没有待执行的代码，这时候就会发现setTimeout方法并顺序执行，（因为已经过了定时器规定的延时时间，所以会立即执行，两个定时器的延时都是一样的）。</p><h4 id="JS执行队列总结"><a href="#JS执行队列总结" class="headerlink" title="JS执行队列总结"></a>JS执行队列总结</h4><p>（1）所有同步任务都在主线程上执行。<br>（2）主线程之外，还存在一个”任务队列”（task queue）。只要异步任务有了运行结果，就在”任务队列”之中放置一个事件。<br>（3）一旦”执行栈”中的所有同步任务执行完毕，系统就会读取”任务队列”，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入主线程执行栈，开始执行。<br>（4）主线程不断重复上面的第三步。</p><h4 id="setTimeout方法、事件和回调函数（异步函数）"><a href="#setTimeout方法、事件和回调函数（异步函数）" class="headerlink" title="setTimeout方法、事件和回调函数（异步函数）"></a>setTimeout方法、事件和回调函数（异步函数）</h4><p>“任务队列”是一个先进先出的数据结构，排在前面的事件，优先被主线程读取。主线程的读取过程基本上是自动的，只要执行栈一清空，”任务队列”上第一位的事件就自动进入主线程。但是，由于”定时器”功能和事件驱动等，主线程首先要检查一下执行时间或事件是否被触发，才能返回主线程。</p><blockquote><p>当一个JS文件中有很多回调函数的时候，我们无法确认哪个回调会先进入任务队列。所以，遇到回调的时候要小心处理啦。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Posts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> # </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通俗易懂的CSS布局display、position、float详解</title>
      <link href="/2022/11/15/%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82%E7%9A%84CSS%E5%B8%83%E5%B1%80display%E3%80%81position%E3%80%81float%E8%AF%A6%E8%A7%A3/"/>
      <url>/2022/11/15/%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82%E7%9A%84CSS%E5%B8%83%E5%B1%80display%E3%80%81position%E3%80%81float%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>前端开发就像盖房子，如果说 html 是构成房子的砖瓦， css 则是决定这些砖瓦的位置和对它们进行装饰。在实际开发中，前端在拿到设计稿后，都会先梳理页面的大致结构，构思完页面的布局后，再进行 coding。大多数网站都有着相似的布局，掌握这些“套路”便可以快速高效的完成开发工作。</p><h3 id="display"><a href="#display" class="headerlink" title="display"></a>display</h3><p>display 是 css 布局中很重要的一个属性，它定义了元素生成的显示框类型，常见的几个属性值有：<code>block</code>、<code>inline</code>、<code>inline-block</code>、<code>inherit</code>、<code>none</code>、<code>flex</code>。inherit 表示这个元素从父元素继承 display 属性值；none 表示这个元素不显示，也不占用空间位置；flex 是 flex 布局重要的属性设置，我们留到后面详细讲解，这边先介绍前面三个属性值。</p><p>每个元素都有默认的 display 属性，比如 div 标签的默认 display 属性是 block，我们通常称这类元素为<strong>块级元素</strong>；span 标签的默认 display 属性是 inline，我们通常称这类元素为<strong>行内元素</strong>，我们先通过下面的代码示例来看下两者的区别。</p><p><img src="http://lc-4ltdklta.cn-n1.lcfile.com/4baa8eb4b3da0bd4f9f6/1-11624109-58caec83c3d82e15.webp" alt="div布局结果"></p><p><img src="http://lc-4ltdklta.cn-n1.lcfile.com/3785db5e3fb17e165092/2-11624109-1e3e0dd8465e05eb.webp" alt="span布局结果"></p><p>我们可以看到块级元素总是独占一行，从上到下显示，行内元素则是从左到右显示。这是因为块级元素前后有换行符，而行内元素前后没有换行符。除此之外，块级元素和行内元素还有其他的区别和特性。</p><blockquote><p>块级元素：<br>没有设置宽度时，它的宽度是其容器的 100%；<br>可以给块级元素设置宽高、内边距、外边距等盒模型属性；<br>块级元素可以包含块级元素和行内元素；<br>常见的块级元素：<code>&lt;div&gt;</code>、<code>&lt;h1&gt;</code> ~ <code>&lt;h6&gt;</code>、<code>&lt;p&gt;</code>、<code>&lt;ul&gt;</code>、<code>&lt;ol&gt;</code>、<code>&lt;dl&gt;</code>、<code>&lt;table&gt;</code>、<code>&lt;address&gt;</code> <code>&lt;form&gt;</code> 等。<br>行内元素：<br>行内元素不会独占一行，只会占领自身宽高所需要的空间；<br>给行内元素设置宽高不会起作用，margin 值只对左右起作用，padding 值也只对左右起作用；<br>行内元素一般不可以包含块级元素，只能包含行内元素和文本；<br>常见的行内元素 <code>&lt;a&gt;</code>、<code>&lt;b&gt;</code>、<code>&lt;label&gt;</code>、<code>&lt;span&gt;</code>、<code>&lt;img&gt;</code>、<code>&lt;em&gt;</code>、<code>&lt;strong&gt;</code>、<code>&lt;i&gt;</code>、<code>&lt;input&gt;</code> 等。</p></blockquote><p>细心的你可能会发现，给 img 标签设置宽高是可以影响图片大小的，这是因为 img 是可替代元素，可替代元素具有内在的尺寸，所以宽高可以设定。</p><blockquote><p>html 中的 input、button、textarea、select 都是可替代元素，这些元素即使是空的，浏览器也会根据其标签和属性来决定显示的内容。</p></blockquote><p>给行内元素设置宽高不起作用，我们通过上面的代码已经感受到了，那为什么设置 margin、padding 只有左右起作用呢？我们来看下面的列子。</p><p><img src="http://lc-4ltdklta.cn-n1.lcfile.com/4006f035dc2574bf4f06/3-11624109-cc293ec1c6124db3.webp" alt="在 span 标签前后添加 div 标签在浏览器中的运行结果"></p><p>在上图中可以明显看到 span 1 只添加了 margin-left 和 margin-right，但 margin-top、margin-bottom 均不起作用。虽然上下的 padding 看上去都起作用了，但是通过添加 div 标签，我们可以看到有重合的部分，所以 padding-top、padding-bottom 的设置从显示效果上是增加的，但对周围元素不会产生影响。</p><p>那 inline-block 又是什么呢？看命名方式，也能猜出大半，没错，设置为 inline-block 的元素，既具有块级元素可以设置宽高的特性，又具有行内元素不换行的特性。我们给 div 标签设置 inline-block 属性看下效果。</p><p><img src="http://lc-4ltdklta.cn-n1.lcfile.com/a86c896c8e2be2e38b6e/4-11624109-e8a25c60594ab00a.webp" alt="将块级元素的 display 属性设置为 inline-block 后的效果"></p><p>在上图中，我们没有设置 margin 值，但是 div 之间会有空隙，这是因为浏览器会将 html 中的换行符、制表符、空白符合并成空白符。</p><h3 id="position-定位"><a href="#position-定位" class="headerlink" title="position(定位)"></a>position(定位)</h3><p>在布局中很重要的因素就是定位，position 属性就是用来定义元素的定位机制。position 的常用属性值有：</p><blockquote><p>relative：相对定位，相对于元素的正常位置进行定位；<br>absolute：绝对定位，相对于除 static 定位以外的元素进行定位；<br>fixed：固定定位，相对于浏览器窗口进行定位，网站中的固定 header 和 footer 就是用固定定位来实现的；<br>static：默认值，没有定位属性，元素正常出现在文档流中；<br>inherit：继承父元素的 position 属性值。</p></blockquote><p>上文出现了文档流（normal flow）的概念，按理来说应该翻译成普通流，文档流是大多数人的叫法。“流”可以想象成流动的水，当我们打开屏幕，浏览网页，滚动鼠标，网页的内容就像是水流一样滑过。文档流便是指从上到下，从左往右的文档布局。当我们给元素的 positon 属性设置 absolute、fixed 时便会脱离文档流，不再遵循从上到下，从左到右的规律了。</p><h4 id="1、relative"><a href="#1、relative" class="headerlink" title="1、relative"></a>1、relative</h4><p><img src="http://lc-4ltdklta.cn-n1.lcfile.com/281c67a0dbcfde385c87/5-11624109-97790dc345e8e929.webp" alt="position 为 relative 示例"></p><p>从上图中我们不难发现，设置 position 为 relative，但是不添加额外属性（left，right，top，bottom 等），它表现的如同 static 一样，如 .box_1。属性 left，right，top，bottom 会使元素偏离正常位置，如 .box_2。元素的偏移会覆盖相邻元素，如 .box_3。</p><h4 id="2、absolute"><a href="#2、absolute" class="headerlink" title="2、absolute"></a>2、absolute</h4><p><img src="http://lc-4ltdklta.cn-n1.lcfile.com/b382c7d8f33cfd3eb273/6-11624109-58c296b58960bb61.webp" alt="position 为 absolute 示例"></p><p>absolute 会相对于最近的除 static 定位以外的元素进行定位，在使用时要注意设置父元素（或祖先元素）的 position 属性，若父元素（或祖先元素）都没有设置定位属性，absolute 会找到最上层即浏览器窗口，相对于它进行定位了。</p><h4 id="3、fixed"><a href="#3、fixed" class="headerlink" title="3、fixed"></a>3、fixed</h4><p><img src="http://lc-4ltdklta.cn-n1.lcfile.com/0489877b3b95c6b35132/7-11624109-44ea46a0343ba68d.webp" alt="position 为 fixed 示例"></p><p>fixed 是相对于浏览器窗口的定位，一旦位置确定， 元素位置也不会改变，不像 absolute，它的位置与父元素息息相关，父元素移动它也会跟着动。从上图我们可以看出，fixed 元素是脱离文档流的，之后的元素会“无视”它，不会给它腾出空间。</p><h3 id="float-浮动"><a href="#float-浮动" class="headerlink" title="float(浮动)"></a>float(浮动)</h3><p>float 属性定义元素在哪个方向浮动，常用属性值有 left、right，即向左浮动和向右浮动。设置了 float 的元素，会脱离文档流，然后向左或向右移动，直到碰到父容器的边界或者碰到另一个浮动元素。块级元素会忽略 float 元素，文本和行内元素却会环绕它，所以 float 最开始是用来实现文字环绕效果的。</p><p><img src="http://lc-4ltdklta.cn-n1.lcfile.com/660ecf778c275b083772/8-11624109-78a8cc191c3ec351.webp" alt="文字环绕效果"></p><p>我们知道，当不给父元素设置宽高时，父元素的宽高会被子元素的内容撑开。但是当子元素设置浮动属性后，子元素会溢出到父元素外，父元素的宽高也不会被撑开了，称之为“高度塌陷”，我们通过代码来体验一下这个差异。</p><p><img src="http://lc-4ltdklta.cn-n1.lcfile.com/673bb4c10c302f515a55/9-11624109-17cc2ca488729013.webp" alt="浮动的子元素不能撑开父元素"></p><p>如何解决这个问题呢？解决这个问题便是要清除浮动，在下面我们给出了几种常规解决方案。</p><h4 id="清除浮动方案1-通过添加额外的标签，利用-clear-属性来清除浮动"><a href="#清除浮动方案1-通过添加额外的标签，利用-clear-属性来清除浮动" class="headerlink" title="清除浮动方案1:通过添加额外的标签，利用 clear 属性来清除浮动"></a>清除浮动方案1:通过添加额外的标签，利用 clear 属性来清除浮动</h4><p>clear 属性用来定义哪一侧不允许其他元素浮动，常见的值有 left 、right、both， 分别表示左侧不允许浮动元素、右侧不允许浮动元素、左右两侧均不允许浮动元素。</p><p><img src="http://lc-4ltdklta.cn-n1.lcfile.com/731d305fb1732ad2265a/10-11624109-f02f2e5fa32e1da7.webp" alt="使用 clear: both 后把父元素撑开了"></p><h4 id="清除浮动方案2-使用-br-标签"><a href="#清除浮动方案2-使用-br-标签" class="headerlink" title="清除浮动方案2:使用 br 标签"></a>清除浮动方案2:使用 br 标签</h4><p>br 自带 clear 属性，clear 属性有 left、right 和 all 三个属性值可选。</p><p><img src="http://lc-4ltdklta.cn-n1.lcfile.com/e8328475523609100184/11-11624109-b73ebb25d5275320.webp" alt="image"></p><p>该方法同上一个方法添加空标签一样，也达到了清除浮动的目的，同上一个方法相比，语义化明显些了，但是也存在结构样式行为分离的问题，不推荐使用。</p><h4 id="清除浮动方案3-给父元素设置-overflow"><a href="#清除浮动方案3-给父元素设置-overflow" class="headerlink" title="清除浮动方案3:给父元素设置 overflow"></a>清除浮动方案3:给父元素设置 overflow</h4><p><img src="http://lc-4ltdklta.cn-n1.lcfile.com/37eb943d282ef006ea19/12-11624109-a47bfda8860137a2.webp" alt="image.png"></p><p>添加 overflow 不仅减少了代码量，还不存在语义化的问题，但是也可能因为内容增加导致超出尺寸的内容被隐藏。前面两个方法带有 clear 关键字，很好理解，但是仅仅设置 <code>overflow: hidden;</code> 为什么就能清除浮动呢？</p><p>这里要引入一个概念：BFC块级格式化上下文。BFC 的一个特性便是可以包含浮动元素，设置 overflow 为 hidden 满足了创建一个 BFC 的条件，其实就是创建 BFC，利用 BFC 固有特性清除浮动，这里不做过多讲解，有兴趣的伙伴可以查阅相关资料。</p><h4 id="清除浮动方案4-使用-after-伪元素"><a href="#清除浮动方案4-使用-after-伪元素" class="headerlink" title="清除浮动方案4:使用 after 伪元素"></a>清除浮动方案4:使用 after 伪元素</h4><p><img src="http://lc-4ltdklta.cn-n1.lcfile.com/7cecb0f7f13001f39db2/13-11624109-db295d94bdf0eafd.webp" alt="image"></p><p>该方法本质也是在末尾添加一个看不见的块元素来清除浮动。这个方法也不存在语义化的问题，是目前的主流清除浮动的方法。</p>]]></content>
      
      
      <categories>
          
          <category> Posts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> # </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>闲话终日有，不听自然无</title>
      <link href="/2022/11/15/%E9%97%B2%E8%AF%9D%E7%BB%88%E6%97%A5%E6%9C%89%EF%BC%8C%E4%B8%8D%E5%90%AC%E8%87%AA%E7%84%B6%E6%97%A0/"/>
      <url>/2022/11/15/%E9%97%B2%E8%AF%9D%E7%BB%88%E6%97%A5%E6%9C%89%EF%BC%8C%E4%B8%8D%E5%90%AC%E8%87%AA%E7%84%B6%E6%97%A0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在网络这个匿名的背景中，人内心深处的种种幽暗的情绪都会被释放，人们会特别的习惯于好辩，会放纵自己无知的热情。</p></blockquote><hr><blockquote><p>我们都知道无知者无畏，一个知识越贫乏的人，越是拥有一种莫名奇怪的勇气和一种莫名奇怪的自豪感。因为知识越贫乏，他所相信的东西就越绝对，因为他根本就没有听说过与此相对立的观点，当你遇到一个网络喷子，当他不断地使用一些标语式的词汇对你进行攻击，其实没有必要和他辩论的。</p></blockquote><hr><blockquote><p>一个标语话思维的人，他已经缺乏了自己独立思考的能力，所以你有必要和一个傻子去论证吗？</p></blockquote><hr><blockquote><p>不要试图和没有独立思维能力的人争辩，因为他会把你拉到和他同样低的水平，然后用丰富的经验打败你，但凡有一丝不爽，你都输了。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Posts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> # </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随想-在上海的第四个年头</title>
      <link href="/2022/11/15/%E9%9A%8F%E6%83%B3-%E5%9C%A8%E4%B8%8A%E6%B5%B7%E7%9A%84%E7%AC%AC%E5%9B%9B%E4%B8%AA%E5%B9%B4%E5%A4%B4/"/>
      <url>/2022/11/15/%E9%9A%8F%E6%83%B3-%E5%9C%A8%E4%B8%8A%E6%B5%B7%E7%9A%84%E7%AC%AC%E5%9B%9B%E4%B8%AA%E5%B9%B4%E5%A4%B4/</url>
      
        <content type="html"><![CDATA[<p><strong>相对于外地的那些城市，上海的欺骗性更大。</strong></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><p>为什么呢，上海现在是可以给你落户的，很多外企也在上海，工作机会多多，表面上看是这样，实际上大多数人也只看到了表面而已。</p><p>对于劳动法的执行，因为上海外企多，当然老外也是比较遵守中国法律的，所以五险一金是按照劳动法来交的，当然，不排除现在有很多外企已经了解你中国的那一套，因为自然有中国人为老外来节省成本，所以往往也会按照最低的来交，但是表面上也是交五险一金的。</p><p>臭名昭著的996上海也有，上海这边，你如果去举报，可能他们会来查一下，不去举报，劳动监察队一般不会来管，拼多多就在上海，前不久刚猝死了个女孩，996的典型，上海996的公司很多，集中在私营企业里。</p><p><strong>再来说上海的所谓工作机会和发展机会</strong></p><h2 id="-1"><a href="#-1" class="headerlink" title=""></a></h2><p>工作有，薪水不高，上海有高薪的行业，集中在IT和金融等少数几个行业里，其它绝大多数行业收入都只几千块而已，据说送快递的上万，我没送过快递，我不知道有没有，但是又有人跟我说送快递能拿到上万的人都在天堂里，他们的钱在银行里。</p><p>上海是没有发展机会的，为什么，这边就是外企和民营为主，外企有玻璃顶，不可能让你升上去，民营你们自己知道的，民营老板在上海的口碑都很差，吸血鬼一样的存在<br>那么为什么说上海的欺骗性更大呢，因为上海现在给你落户，给你户口，因为上海知道，你早晚得回你的原籍去，所谓的落户所谓的户口就是借给你用用而已，当然，你原生家庭超级有钱那是另外一回事。</p><p>上海这座城市的定位就是赚钱的城市，有人要在这里弄个户口落户了，如果你原生家庭不是特别好，你本人没足够的资产的话，我觉得你这种做法是很搞笑的。</p><p>因为上海很多是外企，因为在外企中是有玻璃顶的，你是升不上去的，这意味着35岁以后你可以滚了，不然在外企里你会很难受，看着一批批的新人进来，压力是非常大的，但是如果你毅然滚出去了，那么基本上你直接退休了，因为上海是年龄歧视很严重的地方，只怪大家都要来上海，所以上海可以挑挑拣拣，你35岁以后失业基本上等于直接退休。</p><p>民营企业你能忍得下去算你本事大，很多上海人听到民营企业是避而远之的，能不去民营就不去民营，因为民营总会在某些方面来恶心你一下的，在民营无论你干多少年都没什么出息的。</p><p>至于上海的国企之类，薪水不高的，你大概房租付完后就剩下吃饭的钱，一个月基本月光。</p><p><strong>所以这就是上海的欺骗性，因为你35岁以后不得不考虑回老家</strong></p><h2 id="-2"><a href="#-2" class="headerlink" title=""></a></h2><p>你在上海连个房子都买不起，不过有一点，你回老家后，看病还是得回上海来的，因为你是上海户口，医保没法用，所以你看，最后你肯定是要回原籍的。</p><p>上海聪明的地方在于，他们吸走了你的青春，吸走了你的金钱，然后把你一脚踢走，就算你真的在上海有了一套自己的房子定居下来了，那又怎么样，在上海这种高物价的城市里，你不得不四处奔波来维持你的生活，而你老家的同学，可能生活超你百倍都不止<br>前面有人说了一堆上海遵守劳动法啦，法律健全啦，这些都是扯淡，有人的地方就有江湖，都是一样的，只不过上海没有别的地方那么激进，这边喜欢玩阴的。</p><p>至于所谓的文化氛围啦，契约精神啦，这些跟你又有什么关系，你在上海要做的事情就是养活你自己，所谓的文化就是你能在手机上看看电子书而已</p>]]></content>
      
      
      <categories>
          
          <category> Posts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> # </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Antd DatePicker季度选择器组件Q1Q1修改一季度二季度方法</title>
      <link href="/2022/11/14/Antd%20DatePicker%E5%AD%A3%E5%BA%A6%E9%80%89%E6%8B%A9%E5%99%A8%E7%BB%84%E4%BB%B6Q1Q1%E4%BF%AE%E6%94%B9%E4%B8%80%E5%AD%A3%E5%BA%A6%E4%BA%8C%E5%AD%A3%E5%BA%A6%E6%96%B9%E6%B3%95/"/>
      <url>/2022/11/14/Antd%20DatePicker%E5%AD%A3%E5%BA%A6%E9%80%89%E6%8B%A9%E5%99%A8%E7%BB%84%E4%BB%B6Q1Q1%E4%BF%AE%E6%94%B9%E4%B8%80%E5%AD%A3%E5%BA%A6%E4%BA%8C%E5%AD%A3%E5%BA%A6%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><p>修改 DatePicker 季度选择器默认值 Q1、Q2、Q3、Q4 为第一季度、第二季度、第三季度、第四季度</p><h3 id="antd-官方解决方案"><a href="#antd-官方解决方案" class="headerlink" title="antd 官方解决方案"></a>antd 官方解决方案</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;../App&quot;</span>; <span class="comment">// Here is your entry component</span></span><br><span class="line"><span class="keyword">import</span> zh_CN <span class="keyword">from</span> <span class="string">&quot;antd/lib/locale-provider/zh_CN&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ConfigProvider</span> &#125; <span class="keyword">from</span> <span class="string">&quot;antd&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">quarterFormatFn</span> = (<span class="params">date</span>) =&gt; &#123;</span><br><span class="line"><span class="keyword">const</span> q = date.<span class="title function_">format</span>(<span class="string">&quot;Q&quot;</span>) + <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="string">&quot;1&quot;</span>: <span class="string">&quot;一季度&quot;</span>,</span><br><span class="line"><span class="string">&quot;2&quot;</span>: <span class="string">&quot;二季度&quot;</span>,</span><br><span class="line"><span class="string">&quot;3&quot;</span>: <span class="string">&quot;三季度&quot;</span>,</span><br><span class="line"><span class="string">&quot;4&quot;</span>: <span class="string">&quot;四季度&quot;</span>,</span><br><span class="line">&#125;[q];</span><br><span class="line">&#125;;</span><br><span class="line">zh_CN.<span class="property">DatePicker</span>.<span class="property">lang</span>.<span class="property">quarterFormat</span> = <span class="function">(<span class="params">date</span>) =&gt;</span> &#123; </span><br><span class="line"><span class="keyword">return</span> <span class="title function_">quarterFormatFn</span>(date);</span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rootDom = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">RootReactRender</span> = (</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ConfigProvider</span> <span class="attr">locale</span>=<span class="string">&#123;zh_CN&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">ConfigProvider</span>&gt;</span></span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">render</span>(<span class="title class_">RootReactRender</span>, rootDom);</span><br></pre></td></tr></table></figure><h3 id="css伪类实现"><a href="#css伪类实现" class="headerlink" title="css伪类实现"></a>css伪类实现</h3><p>index.tsx</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import React from &#x27;react&#x27;;</span><br><span class="line">import &#123; DatePicker &#125; from &#x27;antd&#x27;;</span><br><span class="line">import styles from &#x27;./index.less&#x27;;</span><br><span class="line"></span><br><span class="line">const QuarterPicker = () =&gt; &#123;</span><br><span class="line">  const onChange = (date: any, dateString: any) =&gt; &#123;</span><br><span class="line">    console.log(date, dateString);</span><br><span class="line">  &#125;;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;DatePicker</span><br><span class="line">        onChange=&#123;onChange&#125;</span><br><span class="line">        picker=&quot;quarter&quot;</span><br><span class="line">        className=&#123;styles.quarterPickerBox&#125;</span><br><span class="line">        dropdownClassName=&#123;styles.quarterPicker&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default QuarterPicker;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>index.less</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">.<span class="property">quarterPickerBox</span> &#123;</span><br><span class="line">  <span class="attr">width</span>: 230px;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">quarterPicker</span> &#123;</span><br><span class="line">  :<span class="variable language_">global</span> &#123;</span><br><span class="line">    .<span class="property">ant</span>-picker-year-panel,</span><br><span class="line">    .<span class="property">ant</span>-picker-quarter-panel &#123;</span><br><span class="line">      <span class="attr">width</span>: 230px;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 修改选中的年份、季度背景颜色</span></span><br><span class="line">    .<span class="property">ant</span>-picker-cell-selected &#123;</span><br><span class="line">      .<span class="property">ant</span>-picker-cell-inner &#123;</span><br><span class="line">        <span class="attr">background</span>: #5788ff;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 使用CSS改变季度选择器的内容</span></span><br><span class="line">    .<span class="property">ant</span>-picker-quarter-panel &#123;</span><br><span class="line">      .<span class="property">ant</span>-picker-content &#123;</span><br><span class="line">        <span class="comment">// 使季度选择器可以换行成两排</span></span><br><span class="line">        tr &#123;</span><br><span class="line">          <span class="attr">display</span>: flex;</span><br><span class="line">          flex-<span class="attr">wrap</span>: wrap;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 控制按钮外层宽度，使器溢出换行</span></span><br><span class="line">        td &#123;</span><br><span class="line">          <span class="attr">display</span>: flex;</span><br><span class="line">          align-<span class="attr">items</span>: center;</span><br><span class="line">          justify-<span class="attr">content</span>: center;</span><br><span class="line">          <span class="attr">width</span>: <span class="number">50</span>%;</span><br><span class="line">          <span class="attr">height</span>: 50px;</span><br><span class="line">          <span class="attr">padding</span>: 20px;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 使before伪元素和按钮背景颜色一致</span></span><br><span class="line">      .<span class="property">ant</span>-picker-cell-selected &#123;</span><br><span class="line">        &amp;::before &#123;</span><br><span class="line">          <span class="attr">color</span>: #fff;</span><br><span class="line">          <span class="attr">background</span>: #5788ff;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 控制伪元素所占宽度</span></span><br><span class="line">      .<span class="property">ant</span>-picker-cell &#123;</span><br><span class="line">        &amp;::before &#123;</span><br><span class="line">          <span class="attr">right</span>: auto;</span><br><span class="line">          <span class="attr">left</span>: auto;</span><br><span class="line">          <span class="attr">display</span>: flex;</span><br><span class="line">          align-<span class="attr">items</span>: center;</span><br><span class="line">          justify-<span class="attr">content</span>: center;</span><br><span class="line">          <span class="attr">width</span>: <span class="number">60</span>%;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 隐藏季度选择器的按钮，用伪元素代替</span></span><br><span class="line">      .<span class="property">ant</span>-picker-cell-inner &#123;</span><br><span class="line">        <span class="attr">display</span>: none;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 根据title更换相应伪元素的content，使其代替原本的按钮</span></span><br><span class="line">      .<span class="property">ant</span>-picker-cell[title$=<span class="string">&#x27;-Q1&#x27;</span>] &#123;</span><br><span class="line">        &amp;::before &#123;</span><br><span class="line">          <span class="attr">content</span>: <span class="string">&#x27;第一季度&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      .<span class="property">ant</span>-picker-cell[title$=<span class="string">&#x27;-Q2&#x27;</span>] &#123;</span><br><span class="line">        &amp;::before &#123;</span><br><span class="line">          <span class="attr">content</span>: <span class="string">&#x27;第二季度&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      .<span class="property">ant</span>-picker-cell[title$=<span class="string">&#x27;-Q3&#x27;</span>] &#123;</span><br><span class="line">        &amp;::before &#123;</span><br><span class="line">          <span class="attr">content</span>: <span class="string">&#x27;第三季度&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      .<span class="property">ant</span>-picker-cell[title$=<span class="string">&#x27;-Q4&#x27;</span>] &#123;</span><br><span class="line">        &amp;::before &#123;</span><br><span class="line">          <span class="attr">content</span>: <span class="string">&#x27;第四季度&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Posts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #Antd </tag>
            
            <tag> #DatePicker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么现在亲戚越来越不亲了</title>
      <link href="/2022/11/14/%E4%B8%BA%E4%BB%80%E4%B9%88%E7%8E%B0%E5%9C%A8%E4%BA%B2%E6%88%9A%E8%B6%8A%E6%9D%A5%E8%B6%8A%E4%B8%8D%E4%BA%B2%E4%BA%86/"/>
      <url>/2022/11/14/%E4%B8%BA%E4%BB%80%E4%B9%88%E7%8E%B0%E5%9C%A8%E4%BA%B2%E6%88%9A%E8%B6%8A%E6%9D%A5%E8%B6%8A%E4%B8%8D%E4%BA%B2%E4%BA%86/</url>
      
        <content type="html"><![CDATA[<p><strong>一帮老去的人试图用年轻一代为代价维护自己的认知，而严重阻碍了年轻一代构建新形势亲戚关系的机会。</strong> 就这么简单。</p><p>上一代人身处的时代不同，还没有计划生育的束缚家庭规模，再加上经济还没有起步之前感受过“人数就是力量”的童年印记，所以对大家族的美好幻境依然是存在的。春节的时候热热闹闹，可能是他们为数不多的美好回忆；兄弟姐们之间相互提携互相帮助，可能是他们印刻在记忆深处的处事逻辑。</p><p>但是这一切都随着经济发展和计划生育烟消云散了。无奈上一辈依然固执的，试图维护他们已经成型的固有认知，殊不知，这是要讲实力的。我观察过一些亲戚走动依然密切的家族，这些家族里面的年轻人本其实并不反感走动，这样的大家族具有一些共同的特点：要么是一超多强，要么是几大巨头。几大巨头比较好理解，各自都在自己的领域混出了名堂，有的人经商，有的人走体制，有的人社会地位高。拿出来都能独当一面，相互之间若即若离的帮扶一把的可能性是存在的，那亲戚之间自然很铁。另外对下一代，几个巨头一起照拂，我给你讲点有成功路径作为依照的经验，我给你推荐一个实习，我帮你打个招呼，我给你解决一下信息差。加上一个大家都知道的代际传承问题，几个巨头下面分头孵化几个小巨头，相互之间又开启了新的循环。这种家庭，你说亲不亲？一超多强：理解起来也比较容易。一个混的好的，带着自己的兄弟姐们一起混，我的企业核心位子要自己人，你帮我盯一盯；我在大城市混体制，提携一下你去一个小地方体制去闯，十几年几十年下来也站稳了脚跟。这种家庭，亲戚之间走动自然也会多，一边是靠着照拂，一边是需要家里人来帮自己做大做强，也好理解。这样说虽然显得很功利，但这就是残酷的现实。</p><p>那最容易出问题的家族是什么样的呢？还是说难听一点，一群弱鸡。既然没办法往外打增量，那就只有互啄。哪怕是上一代心心念念的古代大家族模式，如果都是一群弱鸡，也同样是一地鸡毛，只是史书上这帮人根本不会留下印记而已。幸存者偏差：一份老一辈房子的归属，一次老人在物质上的偏心，都会引发强烈的家族内耗。上一代都互相之间使袢子，砸啤酒瓶子，然后希望下一代相互多走动，这不是搞笑么。本质上，还是太弱太穷。可惜很多上一代的人认识不到这一点，反而自我感觉不错。一问，都是统一说法：我们嘛，比上不足比下有余，还行。谦虚中带着莫名其妙的炫耀和自豪。尤其是随着经济的增长，给上一代带来了很多幻觉，觉得自己豪横了。其实只是吃到了时代溢出的红利而已，身份地位并没有变化。开了个普通的车，住了个普通的房，坐在办公室里面吹空调，就以为自己逆天改命了？本质上和当年钢铁厂里面的汉子和纺织厂里的妹子都是一样的，别人好歹当年还有个铁饭碗的盼头。这种诡异的“普信“，让上一代更加强化了自己的认知，觉得自己掌握了时代真理。而且，下一代其实是有机会构建适合自己一代的亲戚关系的。这是在一个原子化、城市化、个体化的新时代，对新型亲戚关系的探索。没那么亲，也没那么远，松紧有度，各自舒服。</p><p>我们这一代的亲戚关系由于独生子女政策的原因，要么是堂兄弟姐妹，要么是表兄弟姐们。天然就隔了一层。上一代硬要做个表面工程，一心要把堂的表的变成亲的，这又是在搞笑，又是抢按头的价值输出。关键是这价值输出他们自己都不信。如果有机会，让他们自己想一想，哪怕是他们那一代，也同样是亲兄弟姐妹走动的多，堂兄妹表兄妹走动的少。再隔远一点的自然就断掉了。现在不是战乱年代，不会出现大量非正常死亡的情况了，尤其是建国以后，已经至少四代人了。那这四代人开枝散叶后聚在一起，会是多么庞大的群体，上一代心中应该是有数的，邓巴数早就超过了吧。但是他们童年时期见识的，成长过程里面交往的，也就是那么十几、几十个亲戚而已。归根到底，哪怕是古代大家族，一代里面能支棱起来的也就那么些个。这些支棱起来下一代，不用人劝都会自然都会走近抱团。不论是为了抵御风险还是强强联合，甚至单纯的就是因为生活历程、职场路径、消费水平相近而有的聊，这都是很自然的驱动。<br>时代变化了，不说好也不说坏，有些观念只是很自然的过时了而已。这时候硬来抵御，硬要保留自己想要的结果，还是那句话，是要看实力的。</p>]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #亲情 </tag>
            
            <tag> #瞎说 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>理解宏任务、微任务与事件循环</title>
      <link href="/2022/10/28/%E7%90%86%E8%A7%A3%E5%AE%8F%E4%BB%BB%E5%8A%A1%E3%80%81%E5%BE%AE%E4%BB%BB%E5%8A%A1%E4%B8%8E%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/"/>
      <url>/2022/10/28/%E7%90%86%E8%A7%A3%E5%AE%8F%E4%BB%BB%E5%8A%A1%E3%80%81%E5%BE%AE%E4%BB%BB%E5%8A%A1%E4%B8%8E%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/</url>
      
        <content type="html"><![CDATA[<h3 id="异步任务的执行优先级并不相同，它们被分为两类："><a href="#异步任务的执行优先级并不相同，它们被分为两类：" class="headerlink" title="异步任务的执行优先级并不相同，它们被分为两类："></a>异步任务的执行优先级并不相同，它们被分为两类：</h3><ul><li>微任务( micro task  ) ：Javascript引擎发起的任务。</li><li>宏任务( macro task ) ：宿主（我们）发起的任务。</li></ul><h3 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h3><p>根据异步事件的类型，这些事件实际上会被派发对应的宏任务和微任务队列中，在当前主线程执行完毕后，会优先查看微任务队列中是否有事件存在，如果不存在，再去查看宏任务队列；如果存在，则会依次执行队列中的任务，直到微任务队列执行完毕，然后去宏任务中依次读取任务事件到主线程中执行，如此反复；当前主线程执行完毕后，会首先处理微任务队列中的事件，然后再去读取宏任务队列的事件。在同一次事件循环中，微任务永远在宏任务之前执行。</p><p>宏任务( macro-task )：整体 script、setTimeout、setInterval、UI交互事件、I&#x2F;O<br>微任务( micro-task )：process.nextTick、Promise、MutaionObserver（突变观察者）</p><p>（个人理解：宏观任务保存在 “任务队列” 中，微观任务保存在 执行栈中，事件循环其实也就是不断执行宏观任务）</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>)&#125;, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>); <span class="comment">// 微任务保存在执行栈中会立即执行</span></span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">var</span> i=<span class="number">0</span> ; i&lt;<span class="number">10000</span> ; i++ ) &#123;</span><br><span class="line">            i == <span class="number">9999</span> &amp;&amp; <span class="title function_">resolve</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>、<span class="built_in">setTimeout</span>：宏任务：存入宏任务队列</span><br><span class="line"><span class="number">2</span>、<span class="title class_">Promise</span>：函数本身是同步执行的( <span class="string">`Promise`</span>只有一个参数，默认 <span class="string">`new`</span> 的时候就会同步执行)，<span class="string">`.then`</span> 是异步，因此依次打印 <span class="number">1</span>、<span class="number">2</span>  <span class="string">`.then`</span> 是微观任务<span class="title class_">Promise</span>对象的回调函数，先于 <span class="built_in">setTimeout</span> 执行</span><br><span class="line"><span class="number">3</span>、打印<span class="number">3</span>( 第一次主线程执行完毕 )</span><br><span class="line"><span class="number">4</span>、执行微任务中的回调函数</span><br><span class="line"><span class="number">5</span>、让后执行宏任务中的 <span class="string">`setTimeout`</span> <span class="number">4</span></span><br><span class="line">最终执行结果为：<span class="string">`1,2,3,5,4`</span></span><br></pre></td></tr></table></figure><h3 id="JS中实现sleep"><a href="#JS中实现sleep" class="headerlink" title="JS中实现sleep"></a>JS中实现sleep</h3><blockquote><p>阮一峰：JavaScript 一直没有休眠的语法，但是借助await命令就可以让程序停顿指定的时间。下面给出了一个简化的sleep实现。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sleep</span>(<span class="params">interval</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(resolve, interval);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用法</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">one2FiveInAsync</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">sleep</span>(<span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">one2FiveInAsync</span>();</span><br></pre></td></tr></table></figure><p>await命令后面的 Promise 对象如果变为reject状态，则reject的参数会被catch方法的回调函数接收到。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;出错了&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">f</span>()</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">v</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(v))</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(e))</span><br><span class="line"><span class="comment">// 出错了</span></span><br></pre></td></tr></table></figure><p>注意，上面代码中，await语句前面没有return，但是reject方法的参数依然传入了catch方法的回调函数。这里如果在await前面加上return，效果是一样的。</p><p>任何一个await语句后面的 Promise 对象变为reject状态，那么整个async函数都会中断执行。</p>]]></content>
      
      
      <categories>
          
          <category> Posts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #Javascript </tag>
            
            <tag> #事件循环 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在Linux系统中安装yarn</title>
      <link href="/2022/10/27/%E5%A6%82%E4%BD%95%E5%9C%A8Linux%E7%B3%BB%E7%BB%9F%E4%B8%AD%E5%AE%89%E8%A3%85yarn/"/>
      <url>/2022/10/27/%E5%A6%82%E4%BD%95%E5%9C%A8Linux%E7%B3%BB%E7%BB%9F%E4%B8%AD%E5%AE%89%E8%A3%85yarn/</url>
      
        <content type="html"><![CDATA[<h3 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h3><p>先要安装 <code>node.js</code>，用 <code>node -v</code> 可以查看是否安装了node。</p><h3 id="添加yarn仓库"><a href="#添加yarn仓库" class="headerlink" title="添加yarn仓库"></a>添加yarn仓库</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget <span class="attr">https</span>:<span class="comment">//dl.yarnpkg.com/rpm/yarn.repo -O /etc/yum.repos.d/yarn.repo</span></span><br></pre></td></tr></table></figure><h3 id="安装yarn"><a href="#安装yarn" class="headerlink" title="安装yarn"></a>安装yarn</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install yarn</span><br></pre></td></tr></table></figure><p>安装完成后，<code>yarn -v</code> 可以查看版本。</p><h3 id="yarn命令介绍"><a href="#yarn命令介绍" class="headerlink" title="yarn命令介绍"></a>yarn命令介绍</h3><blockquote><p>yarn作为项目的包管理工具，快速、安全、可靠。你下载的包将不再重新下载。而且确保在不同系统中可以正常工作。</p></blockquote><blockquote><p>Yarn的三个特点<br>速度快: Yarn 缓存了每个下载过的包，再次使用时无需重复下载。同时它是并行的，因此安装速度更快<br>安全: 在执行代码之前，Yarn 会通过算法校验每个安装包的完整性。<br>可靠: 使用详细、简洁的锁文件格式和明确的安装算法，使 Yarn 能够在不同系统上保证无差异的工作。</p></blockquote><ul><li>Yarn命令汇总</li><li><code>yarn add</code> 添加依赖</li><li><code>yarn audit</code> 对已安装的软件包执行漏洞审核</li><li><code>yarn autoclean</code> 从程序包依赖项中清除并删除不必要的文件</li><li><code>yarn bin</code> 显示依赖bin文件夹的位置</li><li><code>yarn cache</code> 管理用户目录中的依赖缓存</li><li><code>yarn check</code> 验证当前项目中程序包依赖项</li><li><code>yarn config</code> 管理依赖配置文件</li><li><code>yarn create</code> 创建Yarn工程</li><li><code>yarn dedupe</code> 删除重复的依赖</li><li><code>yarn generate-lock-entry</code> 生成Yarn锁文件</li><li><code>yarn global</code> 在全局安装依赖</li><li><code>yarn help</code> 显示Yarn的帮助信息</li><li><code>yarn import</code> 迁移当前依赖的项目package-lock.json</li><li><code>yarn info</code> 显示有关依赖的信息</li><li><code>yarn init</code> 初始化工程并创建package.json文件</li><li><code>yarn install</code> 用于安装项目的所有依赖项</li><li><code>yarn licenses</code> 列出已安装依赖的许可证及源码url</li><li><code>yarn link</code> 链接依赖文件夹</li><li><code>yarn list</code> 列出已安装的依赖</li><li><code>yarn login</code> 存储您在 registry 上的用户名和 email</li><li><code>yarn logout</code> 清除你在 registry 上用户名和 email</li><li><code>yarn outdated</code> 列出所有依赖项的版本信息</li><li><code>yarn owner</code> 展示依赖作者</li><li><code>yarn pack</code> 创建依赖项的压缩gzip</li><li><code>yarn policies</code> 规定整个项目中执行Yarn的版本</li><li><code>yarn publish</code> 将依赖发布到npm注册表</li><li><code>yarn remove</code> 删除依赖</li><li><code>yarn run</code> 运行定义的程序脚本命令</li><li><code>yarn tag</code> 在依赖上添加，删除或列出标签</li><li><code>yarn team</code> 管理组织中的团队，并更改团队成员身份</li><li><code>yarn test</code> 运行程序的test命令</li><li><code>yarn upgrade</code> 将指定依赖升级为最新版本</li><li><code>yarn upgrade-interactive</code> 更新过期依赖的简便方法</li><li><code>yarn version</code> 展示依赖版本信息</li><li><code>yarn versions</code> 展示所有依赖项版本信息</li><li><code>yarn why</code> 显示有关为什么安装依赖的信息</li><li><code>yarn workspace</code> Yarn的工作区信息</li><li><code>yarn workspaces</code> Yarn的所有工作区信息</li></ul>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #Linux </tag>
            
            <tag> #yarn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>做一名合格的前端工程师</title>
      <link href="/2020/11/07/%E5%81%9A%E4%B8%80%E5%90%8D%E5%90%88%E6%A0%BC%E7%9A%84%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%88/"/>
      <url>/2020/11/07/%E5%81%9A%E4%B8%80%E5%90%8D%E5%90%88%E6%A0%BC%E7%9A%84%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%88/</url>
      
        <content type="html"><![CDATA[<h1 id="…"><a href="#…" class="headerlink" title="…"></a>…</h1><p>作为一名程序员, 在工作当中或者说在我们职业生涯当中，都会犯一点小小的错误，这些小错误看似没什么大不了，但是长此以往会在我们的职业生涯中产生一定的影响，大则会让我们丢掉饭碗，小则会影响我们的人人发展，所以有必要总结一下在工作中踩的坑和如何避免这些坑。</p><h2 id="版本管理"><a href="#版本管理" class="headerlink" title="版本管理"></a>版本管理</h2><p>当前git是使用度最高的版本管理工具，就以git为例</p><h3 id="长时间不提交代码"><a href="#长时间不提交代码" class="headerlink" title="长时间不提交代码"></a>长时间不提交代码</h3><p>这是一个重点，不要单纯认为这是一个小坑，前不久就刚踩过类似的坑。很多时候我们习惯写完一个功能才提交，就会造成什么问题呢？如果说这个周期内电脑由于各种奇葩原因坏掉了，代码就会完全消失掉，尽管这种可能性非常低，但不代表就没有。已经碰到好几例这样的情况发生而使得代码丢失的程序员，如果你的代码丢失了，小则可能被领导责备大则可能会让你丢掉饭碗被炒鱿鱼，所以说如何正确的提交代码呢，我认为不管你代码写没写完，每天至少一次是正常的，如果你不是很懒，你也可以在午休前提交一次，下午下班前再提交一次，这就会把你的代码的损失量降到半天之内。</p><h3 id="单分支开发"><a href="#单分支开发" class="headerlink" title="单分支开发"></a>单分支开发</h3><p>不用想都知道有很多程序员都在进行单分支开发，举个例子，比如说你的项目开发周期是一周开发完成，但是在一周的第2天紧急出现了一个bug，这个bug要求你今天修复，但是你之前开发的代码还没有开发完成，这时候生产环境中的代码是上个版本的，而你开发的是已经已经了一半的代码，而你要紧急修复bug，单分支就没办法去做，只有把这个功能给开发完成然后再修改bug，这样可能要后几天之后，现在的要求是今天必须修复掉，如果是多分支的话可以立即checkout到上一个分支，然后进行线上版本的hotfix。</p><p>还有种情况就是上线之后不打tag，不做任何的标记就发布了，其实是应该打个tag的，比如说版本回滚的时候就会比较容易回滚到上一个版本，假如某个迭代上线了，由于某个重大bug必须回滚到上一个正确的版本，有了tag就可以马上进行正确回滚。</p><h3 id="git权限管理"><a href="#git权限管理" class="headerlink" title="git权限管理"></a>git权限管理</h3><p>比较常见的情况就是仓库没有设置或者没有合理设置人员权限，项目中任何参与者都完全拥有项目的操作权限。出现问题头疼扯皮不说，单是排查问题到解决问题都会是一件比较烦心的事情。借鉴之前在阿里的工作模式，一般开发人员的权限比较低，涉及到合并代码，迭代发布，版本控制等敏感操作都由指定负责人进行操作，有了权限管理，再配合多分支开发，进行CR也会方便很多。</p><h2 id="持续集成"><a href="#持续集成" class="headerlink" title="持续集成"></a>持续集成</h2><p>简单说，就是把我们开发的代码，提交到一个服务器上，在服务器上进行代码构建，代码通过测试之后直接用于生产环境，这个就是继续集成。</p><p>一个好的持续集成一定是可以量化的，比如说测试人员和相关人员可以看到你的开发进度，每个人也可以很清晰地看到个人的开发进度，大公司一般都会有一套持续集成解决方案，如果公司有，那就严格按照公司的一套流程执行下去就ok了，如果公司没有，那你可能会很容易踩到下面几个坑。</p><h3 id="本地构建没有持续集成环境"><a href="#本地构建没有持续集成环境" class="headerlink" title="本地构建没有持续集成环境"></a>本地构建没有持续集成环境</h3><p>在没有持续集成方案的情况下，开发都是在本地（你的windows系统或者你的开发电脑上）做持续集成，然后进行编辑。甚至测试热源也要连到局域网你的主机上进行测试，最后再用于生产环境。这样有个比较头疼的问题：你的电脑可能是windows系统，但是上线之后可能就是Linux或者Unix系统，那么项目中的大小写拼写错误会导致我们本地测试没有问题，但是拿到用于生产环境的服务器上就会有各种奇葩的问题，甚至会导致项目无法启动或者是出现很多bug，而这个极其影响我们的开发进度，导致交付逾期。</p><h3 id="deadLine才提交代码"><a href="#deadLine才提交代码" class="headerlink" title="deadLine才提交代码"></a>deadLine才提交代码</h3><p>比如说现在有个登陆的需求交给你去做，要求三天开发完成，如果在卡着deadLine才将代码提交到持续集成平台就会很被动。这时候你的主管是没办法实时跟踪你的工作进度，他在两天之内是很焦虑的，完全不知道你开发到什么程度了，也不知道你代码写的怎么样，这是非常不利己的。</p><h2 id="文档管理"><a href="#文档管理" class="headerlink" title="文档管理"></a>文档管理</h2><h3 id="没有文档"><a href="#没有文档" class="headerlink" title="没有文档"></a>没有文档</h3><p>先不要抬杠，不要说每个公司肯定都有文档，其实项目没有文档的情况也是有的。由于程序是一个长期的产物，程序员换了一批又一批，没有文档那交接的时候很可能你这套程序就废掉了，没办法再写了，而且也很难维护。</p><h3 id="文档不更新"><a href="#文档不更新" class="headerlink" title="文档不更新"></a>文档不更新</h3><p>这个是比较常见的坑，比如说接手了一个项目，这个项目是由别的部门移交到我们这边的一套程序，后续由你所在的部门继续进行维护或者继续开发，文档看着很齐全，但是看代码的时候你会发现根本不是那么回事，因为什么？因为他们可能只产出了初版文档，后续就没有文档了，这样就很容易问候别人的家里人，这个坑是非常非常大的，可能会造成2-3倍的工作量，所以说如果公司有管理文档就及时更新维护掉，百利无一害的事情何乐而不为呢？最主要的一件事就是你的代码&#x2F;程序更新了，那么你的文档应该也是跟着更新的。</p>]]></content>
      
      
      <categories>
          
          <category> Posts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> # </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React.createRef()用法详解</title>
      <link href="/2020/10/17/React.createRef()%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/"/>
      <url>/2020/10/17/React.createRef()%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>在典型的 <code>React</code> 数据流中，props是唯一的父组件与它们的子元素的通信方式。更改子元素，你需要使用新的 <code>props</code> 去重新渲染子元素。但是在一些情况下你现在典型数据流之外强制的更改元素。被更改的子元素可能是一个 <code>React</code> 组件的实例，或者是一个 <code>DOM</code> 元素。对所有这些情况， <code>React</code> 提供了一种特殊方法： <code>Refs</code>.</p><h2 id="什么时候使用Refs"><a href="#什么时候使用Refs" class="headerlink" title="什么时候使用Refs"></a>什么时候使用Refs</h2><ul><li>管理焦点、文本选择、媒体回放;</li><li>触发必要动画；</li><li>整合第三方DOM库;</li></ul><p>避免对任何可以声明式解决的问题使用 <code>Refs</code> ；（比如相对于暴露一个对话框组件的 <code>open()、close()</code> 方法，请使用 <code>isOpen prop</code>！）</p><h2 id="不要过度使用Refs"><a href="#不要过度使用Refs" class="headerlink" title="不要过度使用Refs"></a>不要过度使用Refs</h2><p>你的第一个倾向可能是使用 <code>Refs</code> 去实现一些APP中的东西。在这种情况下，请停下来，仔细想想 <code>state</code> 应该存在的组件层次。经常地，我们都知道应该由更高的层次去拥有 <code>state</code> 。</p><h2 id="创建Refs"><a href="#创建Refs" class="headerlink" title="创建Refs"></a>创建Refs</h2><p>可以通过 <code>React.createRef()</code> 创建 <code>Refs</code> 并通过 <code>ref</code> 属性联系到 <code>React</code> 组件。 <code>Refs</code> 通常当组件被创建时被分配给实例变量，这样它们就能在组件中被引用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(props);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">myRef</span> = <span class="title class_">React</span>.<span class="title function_">createRef</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&#123;this.myRef&#125;</span> /&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="访问Refs"><a href="#访问Refs" class="headerlink" title="访问Refs"></a>访问Refs</h2><p>当一个 <code>ref</code> 通过 <code>render</code> 放入一个元素中，一个对节点的引用可以通过 <code>ref</code> 的 <code>current</code> 属性得到；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> node = <span class="variable language_">this</span>.<span class="property">myRef</span>.<span class="property">current</span>;</span><br></pre></td></tr></table></figure><p><code>ref</code> 的值根据节点类型的不同而不同：</p><ul><li>当 <code>ref</code> 属性用于HTML元素，在构造器中通过 <code>React.createRef()</code> 函数创建的ref接收底层DOM元素作为它的current属性；</li><li>当 <code>ref</code> 属性用于传统的类组件，ref对象接收挂载好的组件实例作为它的current；</li></ul><p>下面是对应于不同ref的例子</p><h3 id="DOM元素"><a href="#DOM元素" class="headerlink" title="DOM元素"></a>DOM元素</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CustomTextInput</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="comment">// 创建一个ref去储存textInput DOM元素</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">textInput</span> = <span class="title class_">React</span>.<span class="title function_">createRef</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">focusTextInput</span> = <span class="variable language_">this</span>.<span class="property">focusTextInput</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">focusTextInput</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 很明显的，让text input获得焦点使用了原生的DOM API</span></span><br><span class="line">    <span class="comment">// 注意：我们通过current去获得DOM节点</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">textInput</span>.<span class="property">current</span>.<span class="title function_">focus</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 告诉React我们想要将&lt;input&gt;的ref和构造器中创建的textInput联系起来</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">ref</span>=<span class="string">&#123;this.textInput&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">type</span>=<span class="string">&quot;button&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">value</span>=<span class="string">&quot;Focus the text input&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onClick</span>=<span class="string">&#123;this.focusTextInput&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>React将会将会在组件挂载时将DOM元素分配给current属性，并且在组件被卸载时，将current属性重置为null。ref将会在<code>componentDidMount</code>和<code>componentDidUpdate</code>生命周期钩子前被更新</p><h3 id="类组件"><a href="#类组件" class="headerlink" title="类组件"></a>类组件</h3><p>如果我们想要包装上面的<code>CustomTextInput</code>，模仿挂载后被点击。我们可以通过ref得到自定义的Input组件，手动调用它的focusTextInput函数。（注意！只有当<code>CustomTextInput</code>被声明为类的时候才有用！）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AutoFocusTextInput</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">textInput</span> = <span class="title class_">React</span>.<span class="title function_">createRef</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">textInput</span>.<span class="property">current</span>.<span class="title function_">focusTextInput</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">CustomTextInput</span> <span class="attr">ref</span>=<span class="string">&#123;this.textInput&#125;</span> /&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数式组件（没有用的）"><a href="#函数式组件（没有用的）" class="headerlink" title="函数式组件（没有用的）"></a>函数式组件（没有用的）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">MyFunctionalComponent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> /&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">textInput</span> = <span class="title class_">React</span>.<span class="title function_">createRef</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 这样没用！函数式组件根本就没有实例！</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">MyFunctionalComponent</span> <span class="attr">ref</span>=<span class="string">&#123;this.textInput&#125;</span> /&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，你可以在函数式组件中使用ref属性，就像你引用DOM元素和类组件一样。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">CustomTextInput</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="comment">// textInput 必须被声明在这里——ref才能适用于它</span></span><br><span class="line">  <span class="keyword">let</span> textInput = <span class="title class_">React</span>.<span class="title function_">createRef</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    textInput.<span class="property">current</span>.<span class="title function_">focus</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">ref</span>=<span class="string">&#123;textInput&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">type</span>=<span class="string">&quot;button&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">value</span>=<span class="string">&quot;Focus the text input&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="向父组件暴露DOM引用（Refs）"><a href="#向父组件暴露DOM引用（Refs）" class="headerlink" title="向父组件暴露DOM引用（Refs）"></a>向父组件暴露DOM引用（Refs）</h2><p>在很罕见的情况下，你也许想要从父组件访问到子元素的DOM节点。通常来说我们不建议这样做，因为这样破坏了组件的封装性，但是在某些情况下对于类似：触发聚焦、改变子元素DOM节点的大小、位置等情况非常有用。</p><p>你可以向子组件增加ref（就像上面说的），但是这并不是一个完美的解决方案——你只会获得一个组件实例而不是DOM节点。更糟糕的是，它对函数式组件没用！</p><p>如果你使用React 16.3或者更高的版本，我们建议你在这些情况下使用<code>ref forwarding，Ref fprwarding</code>让组件可以选择去暴露子组件的ref作为他们自己的。你可以在ref forwarding文档中找到更全面的例子——怎样暴露子元素的DOM节点给父元素。</p><p>如果你使用React 16.2或者更低的版本，或者你需要比<code>ref forwarding</code>所能提供的更多的灵活性。你可以使用替代方法，并且显式的传入一个ref当做一个不同命名的prop。</p><p>如果可能，我们不建议暴露DOM节点，但是在一些情况下还是非常有用的。注意，这种方法需要你去在子组件中增加一些代码，如果你完全没有对于子组件实现的控制，你最后的选择是使用<code>findDOMNode()</code>方法，当然，也只能这样了。</p><h2 id="回调Refs"><a href="#回调Refs" class="headerlink" title="回调Refs"></a>回调Refs</h2><p>React同样支持另一种名为“回调refs”的方法去设置refs——它可以给我们对refs创建和销毁更细粒度的控制。</p><p>放入一个函数，而不是一个由<code>createRef()</code>创建的ref属性。这个函数接受React组件实例、或者HTML DOM元素作为参数——可以被储存并且在其他地方被访问。</p><p>下面的例子实现了一个通常的模式：使用ref回调储存一个DOM节点的应用在实例变量中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CustomTextInput</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">textInput</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">setTextInputRef</span> = <span class="function"><span class="params">element</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">textInput</span> = element;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">focusTextInput</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 通过原生DOM API聚焦文本</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">textInput</span>) <span class="variable language_">this</span>.<span class="property">textInput</span>.<span class="title function_">focus</span>();</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 在挂载时自动聚焦</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">focusTextInput</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 使用&#x27;ref&#x27;回调去在一个实例域中储存文本输入DOM元素的引用(比如, this.textInput).</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">ref</span>=<span class="string">&#123;this.setTextInputRef&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">type</span>=<span class="string">&quot;button&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">value</span>=<span class="string">&quot;Focus the text input&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onClick</span>=<span class="string">&#123;this.focusTextInput&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>React将会在组件挂载时使用DOM元素调用ref回调，在组件卸载时使用null调用ref回调。ref回调都会在<code>componentDidMount</code>或者<code>componentDidUpdate</code>生命周期钩子之前被调用。<br>你可以在组件之间传递回调refs，就像你可以对通过<code>React.createRef()</code>创建的对象refs一样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">CustomTextInput</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;props.inputRef&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">CustomTextInput</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">inputRef</span>=<span class="string">&#123;el</span> =&gt;</span> this.inputElement = el&#125;</span></span><br><span class="line"><span class="language-xml">      /&gt;</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的例子中，Parent组件将他的ref回调作为inputRef这个属性（props）传入<code>CustomTextInput</code>组件，接着<code>CustomTextInput</code>组件将同样的函数作为一个特殊的<code>ref</code>属性<code>（attribute）</code>传给<code>&lt;input&gt;</code>。从结果来看，<code>Parent</code>组件中的<code>this.inputElement</code>将会被放在与在<code>CustomTextInput</code>组件的<code>&lt;input&gt;</code>元素相关的DOM节点中。</p><h2 id="关于回调refs的警告"><a href="#关于回调refs的警告" class="headerlink" title="关于回调refs的警告"></a>关于回调refs的警告</h2><p>如果ref回调被定义为一个行内函数，当组件更新时会被调用两次——第一次被null调用、而后被DOM元素调用。这是因为函数的新实例会在每次渲染的时候创建，所以React需要清除老的ref然后生成一个新的。你可以通过在class中定义一个绑定的ref回调方法避免这个问题，但是注意，这种问题在大多数情况下都没什么影响~</p>]]></content>
      
      
      <categories>
          
          <category> Posts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #React.createRef </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>createContext &amp; useContext 跨组件透传上下文与性能优化</title>
      <link href="/2020/05/11/createContext%20&amp;%20useContext%20%E8%B7%A8%E7%BB%84%E4%BB%B6%E9%80%8F%E4%BC%A0%E4%B8%8A%E4%B8%8B%E6%96%87%E4%B8%8E%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
      <url>/2020/05/11/createContext%20&amp;%20useContext%20%E8%B7%A8%E7%BB%84%E4%BB%B6%E9%80%8F%E4%BC%A0%E4%B8%8A%E4%B8%8B%E6%96%87%E4%B8%8E%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="一、React-createContext"><a href="#一、React-createContext" class="headerlink" title="一、React.createContext"></a>一、React.createContext</h2><blockquote><p>API 文档地址：<a href="https://zh-hans.reactjs.org/docs/context.html#reactcreatecontext">https://zh-hans.reactjs.org/docs/context.html#reactcreatecontext</a></p></blockquote><p>从 API 名字就可以看出， createContext 能够创建一个 React 的 上下文（context），然后订阅了这个上下文的组件中，可以拿到上下文中提供的数据或者其他信息。<br>基本的使用方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">MyContext</span> = <span class="title class_">React</span>.<span class="title function_">createContext</span>(defaultValue)</span><br></pre></td></tr></table></figure><p>其中 defaultValue 是传入的默认值。</p><p>如果要使用创建的上下文，需要通过 <code>Context.Provider</code> 最外层包装组件，并且需要显示的通过 <code>&lt;MyContext.Provider value=&#123;&#123;xx:xx&#125;&#125;&gt;</code> 的方式传入 value，指定 context 要对外暴露的信息。</p><p>子组件在匹配过程中只会匹配最新的 <code>Provider</code>，也就是说如果有下面三个组件：<code>ContextA.Provider-&gt;A-&gt;ContexB.Provider-&gt;B-&gt;C</code></p><p>如果 <code>ContextA</code> 和 <code>ContextB</code> 提供了相同的方法，则 C 组件只会选择 <code>ContextB</code> 提供的方法。</p><p>为什么要默认值？</p><p>如果匹配不到最新的 <code>Provider</code> 则会使用默认值，默认值一般只有在对组件进行单元测试（组件并未嵌入到父组件中）的时候，比较有用。</p><h2 id="二、使用-useContext-获取上下文"><a href="#二、使用-useContext-获取上下文" class="headerlink" title="二、使用 useContext 获取上下文"></a>二、使用 useContext 获取上下文</h2><blockquote><p>useContext 文档地址：<a href="https://zh-hans.reactjs.org/docs/hooks-reference.html#usecontext">https://zh-hans.reactjs.org/docs/hooks-reference.html#usecontext</a></p></blockquote><p>通过 <code>React.createContext</code> 创建出来的上下文，在子组件中可以通过 <code>useContext</code> 这个 <code>Hook</code> 获取 <code>Provider</code> 提供的内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;funcName&#125; = <span class="title function_">useContext</span>(<span class="title class_">MyContext</span>);</span><br></pre></td></tr></table></figure><p>从上面代码可以发现， <code>useContext</code> 需要将 <code>MyContext</code> 这个 <code>Context</code> 实例传入，不是字符串，就是实例本身。</p><p>这种用法会存在一个比较尴尬的地方，父子组件不在一个目录中，如何共享 <code>MyContext</code> 这个 <code>Context</code> 实例呢？</p><p>一般这种情况下，我会通过 <code>Context Manager</code> 统一管理上下文的实例，然后通过 <code>export</code> 将实例导出，在子组件中在将实例 <code>import</code> 进来。</p><h2 id="三、createContext-和-useContext-结合使用实现方法共享"><a href="#三、createContext-和-useContext-结合使用实现方法共享" class="headerlink" title="三、createContext 和 useContext 结合使用实现方法共享"></a>三、createContext 和 useContext 结合使用实现方法共享</h2><p>举个实际的例子：子组件中修改父组件的 <code>state</code></p><p>一般的做法是将父组件的方法比如 <code>setXXX</code> 通过 <code>props</code> 的方式传给子组件，而一旦子组件多层级的话，就要层层透传。</p><p>使用 <code>Context</code> 的方式则可以免去这种层层透传</p><h3 id="1、context-manager-js"><a href="#1、context-manager-js" class="headerlink" title="1、context-manager.js"></a>1、context-manager.js</h3><p>创建一个上下文管理的组件，用来统一导出 <code>Context</code> 实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">MyContext</span> = <span class="title class_">React</span>.<span class="title function_">createContext</span>(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><h3 id="2、父组件-Provider-提供上下文-value"><a href="#2、父组件-Provider-提供上下文-value" class="headerlink" title="2、父组件 Provider 提供上下文 value"></a>2、父组件 Provider 提供上下文 value</h3><p>下面代码中，父组件引入了实例，并且通过 <code>MyContext.Provider</code> 将父组件包装，并且通过 <code>Provider.value</code> 将方法提供出去。</p><p>下面的实例提供了三个 <code>state</code> 操作方法：</p><ul><li>setStep</li><li>setCount</li><li>setNumber</li></ul><p>以及一个副作用方法：</p><ul><li>fetchData</li></ul><p>子组件 <code>Child</code> 接受的 <code>props</code> 只有三个 <code>state</code> 的值 <code>step/number/count</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Child</span> <span class="keyword">from</span> <span class="string">&#x27;./Child&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">MyContext</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./context-manager&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fetchData</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (props = &#123;&#125;) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> [step, setStep] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">const</span> [number, setNumber] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">MyContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;&#123;</span> <span class="attr">setStep</span>, <span class="attr">setCount</span>, <span class="attr">setNumber</span>, <span class="attr">fetchData</span> &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Child</span> <span class="attr">step</span>=<span class="string">&#123;step&#125;</span> <span class="attr">number</span>=<span class="string">&#123;number&#125;</span> <span class="attr">count</span>=<span class="string">&#123;count&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">MyContext.Provider</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、子组件-useContext-解析上下文"><a href="#3、子组件-useContext-解析上下文" class="headerlink" title="3、子组件 useContext 解析上下文"></a>3、子组件 useContext 解析上下文</h3><p>下面是子组件，相同的，也需要从 <code>context-manager</code> 中引入 <code>MyContext</code> 这个实例，然后才能通过  <code>const &#123; setStep, setNumber, setCount, fetchData &#125; = useContext(MyContext);</code> 解析出上下文中的方法，在子组件中则可以直接使用这些方法，修改父组件的 <code>state</code>.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useContext, useEffect, memo &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">MyContext</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./context-manager&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">memo</span>(<span class="function">(<span class="params">props = &#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; setStep, setNumber, setCount, fetchData &#125; = <span class="title function_">useContext</span>(<span class="title class_">MyContext</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">fetchData</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`FETCH DATA: <span class="subst">$&#123;res&#125;</span>`</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;, []);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>step is : &#123;props.step&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>number is : &#123;props.number&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>count is : &#123;props.count&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123; setStep(props.step + 1) &#125;&#125;&gt;step ++<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123; setNumber(props.number + 1) &#125;&#125;&gt;number ++<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123; setCount(props.step + props.number) &#125;&#125;&gt;number + step<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="4、效果"><a href="#4、效果" class="headerlink" title="4、效果"></a>4、效果</h3><p><img src="https://jszyy-blog-img.oss-cn-beijing.aliyuncs.com/useContext_detail/useContext(1).gif?versionId=CAEQDhiCgIDZ96bo0xciIDFkODI3NDliNjY1MDRhNjZiNmJhYzE2MTExYjUwNDk0" alt="useContext(1).gif"></p><p>可以发现，在子组件中点击按钮，直接调用 <code>Context</code> 透传过来的方法，可以修改父组件的 <code>state</code>，子组件则会重新渲染。</p><p><strong>这种方式显式的避免了多级 props 的层层透传问题，虽然 Demo 只有一级 子组件，即使存在多级子组件也可以直接修改</strong></p><h3 id="5、为什么使用-React-memo"><a href="#5、为什么使用-React-memo" class="headerlink" title="5、为什么使用 React.memo()"></a>5、为什么使用 React.memo()</h3><p>上面子组件 <code>Child</code> 中，使用了 <code>memo</code> 包装子组件，这样做的原因是：</p><ul><li><strong>调用了 useContext 的组件总会在 context 值变化时重新渲染</strong></li></ul><p>如果我们的 <code>Context</code> 会经常变化，那对子组件来讲会多次触发 <code>re-render</code>，通过 <code>React.memo()</code> 可以很好的管理子组件的性能问题</p><h2 id="四、使用-useReducer-减少-Context-的复杂程度"><a href="#四、使用-useReducer-减少-Context-的复杂程度" class="headerlink" title="四、使用 useReducer 减少 Context 的复杂程度"></a>四、使用 useReducer 减少 Context 的复杂程度</h2><p>上面的示例虽然实现了多级组件方法共享，但是暴露出一个问题：所有的方法都放在了 <code>Context.Provider.value</code> 属性中传递，必然造成整个 <code>Context Provider</code> 提供的方法越来越多，也会臃肿。</p><p> <code>&lt;MyContext.Provider value=&#123;&#123; setStep, setCount, setNumber, fetchData &#125;&#125; /&gt;</code> 里面的方法可能越来越多</p><p>而向 <code>setStep</code>、<code>setCount</code>、<code>setNumber</code> 这三个方法，是可以通过 <code>useReducer</code> 包装，并且通过 <code>dispatch</code> 触发的，因此修改一下父组件：</p><p>下面的父组件与之前不同地方只是去掉了 <code>setXXX</code> 这些设置 <code>state</code> 的方法，并且在 <code>Provider value</code>中，只传入了 <code>value=&#123;&#123;dispatch&#125;&#125;</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useReducer &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Child</span> <span class="keyword">from</span> <span class="string">&#x27;./Child&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">MyContext</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./context-manager&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initState = &#123; <span class="attr">count</span>: <span class="number">0</span>, <span class="attr">step</span>: <span class="number">0</span>, <span class="attr">number</span>: <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">reducer</span> = (<span class="params">state, action</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;stepInc&#x27;</span>: <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, state, &#123; <span class="attr">step</span>: state.<span class="property">step</span> + <span class="number">1</span> &#125;);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;numberInc&#x27;</span>: <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, state, &#123; <span class="attr">number</span>: state.<span class="property">number</span> + <span class="number">1</span> &#125;);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;count&#x27;</span>: <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, state, &#123; <span class="attr">count</span>: state.<span class="property">step</span> + state.<span class="property">number</span> &#125;);</span><br><span class="line">        <span class="attr">default</span>: <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (props = &#123;&#125;) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> [state, dispatch] = <span class="title function_">useReducer</span>(reducer, initState);</span><br><span class="line">    <span class="keyword">const</span> &#123; step, number, count &#125; = state;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">MyContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;&#123;</span> <span class="attr">dispatch</span> &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Child</span> <span class="attr">step</span>=<span class="string">&#123;step&#125;</span> <span class="attr">number</span>=<span class="string">&#123;number&#125;</span> <span class="attr">count</span>=<span class="string">&#123;count&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">MyContext.Provider</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此此时子组件只需要拿到 <code>dispatch</code> 即可修改父组件的 <code>state</code>:</p><blockquote><p>子组件唯一的不同就是点击事件执行的是 <code>dispatch</code>.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useContext, memo &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">MyContext</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./context-manager&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">memo</span>(<span class="function">(<span class="params">props = &#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; dispatch &#125; = <span class="title function_">useContext</span>(<span class="title class_">MyContext</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>step is : &#123;props.step&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>number is : &#123;props.number&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>count is : &#123;props.count&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123; dispatch(&#123; type: &#x27;stepInc&#x27; &#125;) &#125;&#125;&gt;step ++<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123; dispatch(&#123; type: &#x27;numberInc&#x27; &#125;) &#125;&#125;&gt;number ++<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123; dispatch(&#123; type: &#x27;count&#x27; &#125;) &#125;&#125;&gt;number + step<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>效果如下：<br><img src="https://jszyy-blog-img.oss-cn-beijing.aliyuncs.com/useContext_detail/useContext(2).gif?versionId=CAEQDhiBgMDU96bo0xciIGE4MDc2MTI2NDZhMTQ3ZWY5NTdhYmEwYjA0MzM0MTFm" alt="useContext(2).gif"></p><h2 id="五、将-state-也通过-Context-传递给子组件"><a href="#五、将-state-也通过-Context-传递给子组件" class="headerlink" title="五、将 state 也通过 Context 传递给子组件"></a>五、将 state 也通过 Context 传递给子组件</h2><p>上面的所有示例中，子组件获取父组件的 <code>state</code> 还是通过 <code>props</code> ，多级子组件又会存在层层嵌套</p><p>如果将整个 <code>state</code> 通过 <code>Context</code> 传入就无需层层组件的 <code>props</code> 传递（如果不需要整个 <code>state</code> ，可以只将某几个 <code>state</code> 给 <code>Provider</code> ）</p><h3 id="1、父组件"><a href="#1、父组件" class="headerlink" title="1、父组件"></a>1、父组件</h3><p>父组件的变化只是将 <code>state</code> 也给了 <code>Provider</code> ，然后去掉了 <code>Child</code> 组件的 <code>props</code> 透传</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useReducer &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Child</span> <span class="keyword">from</span> <span class="string">&#x27;./Child&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">MyContext</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./context-manager&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initState = &#123; <span class="attr">count</span>: <span class="number">0</span>, <span class="attr">step</span>: <span class="number">0</span>, <span class="attr">number</span>: <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">reducer</span> = (<span class="params">state, action</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;stepInc&#x27;</span>: <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, state, &#123; <span class="attr">step</span>: state.<span class="property">step</span> + <span class="number">1</span> &#125;);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;numberInc&#x27;</span>: <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, state, &#123; <span class="attr">number</span>: state.<span class="property">number</span> + <span class="number">1</span> &#125;);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;count&#x27;</span>: <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, state, &#123; <span class="attr">count</span>: state.<span class="property">step</span> + state.<span class="property">number</span> &#125;);</span><br><span class="line">        <span class="attr">default</span>: <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (props = &#123;&#125;) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> [state, dispatch] = <span class="title function_">useReducer</span>(reducer, initState);</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">MyContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;&#123;</span> <span class="attr">state</span>, <span class="attr">dispatch</span> &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123; dispatch(&#123; type: &#x27;stepInc&#x27; &#125;) &#125;&#125;&gt;parent step ++<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Child</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">MyContext.Provider</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、子组件直接使用父组件的-state"><a href="#2、子组件直接使用父组件的-state" class="headerlink" title="2、子组件直接使用父组件的 state"></a>2、子组件直接使用父组件的 state</h3><p>下面代码中可以看出，原来的 <code>props.number</code> 都变成了 <code>state.number</code></p><ul><li><strong>注意：在 return 内部我写了一个 console</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useContext, memo &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">MyContext</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./context-manager&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">memo</span>(<span class="function">(<span class="params">props = &#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; state, dispatch &#125; = <span class="title function_">useContext</span>(<span class="title class_">MyContext</span>);</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;console.log(&#x27;[Child] RE-RENDER&#x27;)&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>step is : &#123;state.step&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>number is : &#123;state.number&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>count is : &#123;state.count&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123; dispatch(&#123; type: &#x27;stepInc&#x27; &#125;) &#125;&#125;&gt;step ++<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123; dispatch(&#123; type: &#x27;numberInc&#x27; &#125;) &#125;&#125;&gt;number ++<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123; dispatch(&#123; type: &#x27;count&#x27; &#125;) &#125;&#125;&gt;number + step<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="3、效果"><a href="#3、效果" class="headerlink" title="3、效果"></a>3、效果</h3><p><img src="https://jszyy-blog-img.oss-cn-beijing.aliyuncs.com/useContext_detail/useContext(3).gif?versionId=CAEQDhiBgMDY96bo0xciIDIzZTg5YjE0MGNhODRlMDI4ZTVmNjdiZGE1MTE1NTkx" alt="useContext(3).gif"></p><h3 id="4、直接使用父组件-state-带来的性能问题"><a href="#4、直接使用父组件-state-带来的性能问题" class="headerlink" title="4、直接使用父组件 state 带来的性能问题"></a>4、直接使用父组件 state 带来的性能问题</h3><p>注意看上面的动图，在点击子组件的 <code>【number + step】</code> 按钮的时候，虽然 <code>count</code> 的值没有发生任何变化，但是一直触发 <code>re-render</code>，即使子组件是通过 <code>React.memo</code> 包装过的。</p><p>出现这个问题原因是 <code>React.memo</code> 只会对 <code>props</code> 进行浅比较，而通过 <code>Context</code> 我们直接将 <code>state</code> 注入到了组件内部，因此 <code>state</code> 的变化必然会触发 re-render，整个 <code>state</code> 变化是绕过了 <code>memo</code><br>}}</p><h2 id="六、使用-useMemo-解决-state-Context-透传的性能问题"><a href="#六、使用-useMemo-解决-state-Context-透传的性能问题" class="headerlink" title="六、使用 useMemo() 解决 state Context 透传的性能问题"></a>六、使用 useMemo() 解决 state Context 透传的性能问题</h2><p>既然 <code>React.memo()</code> 无法拦截注入到 <code>Context</code> 的 <code>state</code> 的变化，那就需要我们在组件内部进行更细粒度的性能优化，这个时候可以使用 <code>useMemo()</code></p><h3 id="1、使用-useMemo-优化子组件渲染"><a href="#1、使用-useMemo-优化子组件渲染" class="headerlink" title="1、使用 useMemo 优化子组件渲染"></a>1、使用 useMemo 优化子组件渲染</h3><p>下面是对子组件的改造，去掉了 <code>React.memo</code>，在 <code>return</code> 内部通过 <code>useMemo()</code> 包装，并且声明了所有依赖项：（包括：step&#x2F;number&#x2F;count&#x2F;dispatch）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useContext, useMemo &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">MyContext</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./context-manager&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (props = &#123;&#125;) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; state, dispatch &#125; = <span class="title function_">useContext</span>(<span class="title class_">MyContext</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[Child] RE-RENDER&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>step is : &#123;state.step&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>number is : &#123;state.number&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>count is : &#123;state.count&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123; dispatch(&#123; type: &#x27;stepInc&#x27; &#125;) &#125;&#125;&gt;step ++<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123; dispatch(&#123; type: &#x27;numberInc&#x27; &#125;) &#125;&#125;&gt;number ++<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123; dispatch(&#123; type: &#x27;count&#x27; &#125;) &#125;&#125;&gt;number + step<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;, [state.<span class="property">count</span>, state.<span class="property">number</span>, state.<span class="property">step</span>, dispatch]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、优化后的效果"><a href="#2、优化后的效果" class="headerlink" title="2、优化后的效果"></a>2、优化后的效果</h3><p><img src="https://jszyy-blog-img.oss-cn-beijing.aliyuncs.com/useContext_detail/useContext(4).gif?vuseContext(4).gifersionId=CAEQDhiBgID696bo0xciIDM4MTJkYTUxMmQyYzRkMDk4Y2UxNDRkNGJmYWYwZTEx"></p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>从上面效果可以发现，当 <code>number+step=count</code> 不变的时候，是不会触发 <code>return</code> 中 <code>DOM</code> 的重新渲染的</p>]]></content>
      
      
      <categories>
          
          <category> Posts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> # </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6基础语法</title>
      <link href="/2020/05/03/ES6%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
      <url>/2020/05/03/ES6%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>ES6 是下一代 JavaScript 语法标准，比起 ES5 有很大的变化。<br>React 大量使用 ES6 语法，本文介绍其中一些最重要的语法点。完整的 ES6 介绍请参考 <a href="http://es6.ruanyifeng.com/">http://es6.ruanyifeng.com/</a> 。</p><h3 id="let-和-const"><a href="#let-和-const" class="headerlink" title="let 和 const"></a>let 和 const</h3><p>let和const命令用于声明变量。<br>let声明的变量是可变的，const声明的变量是不可变的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> foo = <span class="number">1</span>;</span><br><span class="line">foo = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bar = <span class="number">1</span>;</span><br><span class="line">bar = <span class="number">2</span>; <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><p>上面代码中，let声明的变量foo是可以重新赋值，但是如果对bar声明的变量重新赋值，就会报错。<br>注意，如果const声明的变量指向一个对象，那么该对象的属性是可变的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = &#123;</span><br><span class="line">  <span class="attr">bar</span>: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">foo.<span class="property">bar</span> = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>上面代码中，变量foo本身是不可变的，即foo不能指向另一个对象。但是，对象内部的属性是可变的，这是因为这时foo保存的是一个指针，这个指针本身不可变，但它指向的对象本身是可变的。</p><h3 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h3><p>ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure><p>上面代码表示，可以从数组中提取值，按照对应位置，对变量赋值。<br>解构赋值不仅可以用于数组，还可以用于对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; foo, bar &#125; = &#123; <span class="attr">foo</span>: <span class="string">&quot;aaa&quot;</span>, <span class="attr">bar</span>: <span class="string">&quot;bbb&quot;</span> &#125;;</span><br><span class="line">foo <span class="comment">// &quot;aaa&quot;</span></span><br><span class="line">bar <span class="comment">// &quot;bbb&quot;</span></span><br></pre></td></tr></table></figure><p>解构赋值时，还可以设置默认值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [x, y = <span class="string">&#x27;b&#x27;</span>] = [<span class="string">&#x27;a&#x27;</span>]; <span class="comment">// x=&#x27;a&#x27;, y=&#x27;b&#x27;</span></span><br></pre></td></tr></table></figure><p>上面代码中，变量y解构赋值时没有取到值，所以默认值就生效了。</p><h3 id="对象的简洁表示法"><a href="#对象的简洁表示法" class="headerlink" title="对象的简洁表示法"></a>对象的简洁表示法</h3><p>ES6 允许直接写入变量和函数，作为对象的属性和方法。这样的书写更加简洁。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="string">&#x27;bar&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> baz = &#123; foo &#125;;</span><br><span class="line">baz <span class="comment">// &#123;foo: &quot;bar&quot;&#125;</span></span><br></pre></td></tr></table></figure><p>除了属性简写，方法也可以简写。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> o = &#123;</span><br><span class="line">  <span class="title function_">method</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello!&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> o = &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello!&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>ES6 允许使用“箭头”（&#x3D;&gt;）定义函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title function_">f</span> = v =&gt; v;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">function</span> (<span class="params">v</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> v;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如果箭头函数不需要参数或需要多个参数，就使用一个圆括号代表参数部分。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title function_">f</span> = (<span class="params"></span>) =&gt; <span class="number">5</span>;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="keyword">return</span> <span class="number">5</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">sum</span> = (<span class="params">num1, num2</span>) =&gt; num1 + num2;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="keyword">function</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如果箭头函数的代码块部分多于一条语句，就要使用大括号将它们括起来，并且使用return语句返回。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title function_">sum</span> = (<span class="params">num1, num2</span>) =&gt; &#123; <span class="keyword">return</span> num1 + num2; &#125;</span><br></pre></td></tr></table></figure><h3 id="rest-参数"><a href="#rest-参数" class="headerlink" title="rest 参数"></a>rest 参数</h3><p>ES6 引入 rest 参数（形式为…变量名），用于获取函数的多余参数，这样就不需要使用arguments对象了。rest 参数搭配的变量是一个数组，该变量将多余的参数放入数组中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">...values</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> val <span class="keyword">of</span> values) &#123;</span><br><span class="line">    sum += val;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">add</span>(<span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>) <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><p>上面代码的add函数是一个求和函数，利用 rest 参数，可以向该函数传入任意数目的参数。</p><h3 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h3><p>扩展运算符（spread）是三个点（…）。它好比 rest 参数的逆运算，将一个数组转为用逗号分隔的参数序列。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(...[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="comment">// 1 2 3</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>, ...[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], <span class="number">5</span>)</span><br><span class="line"><span class="comment">// 1 2 3 4 5</span></span><br><span class="line"></span><br><span class="line">[...<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;div&#x27;</span>)]</span><br><span class="line"><span class="comment">// [&lt;div&gt;, &lt;div&gt;, &lt;div&gt;]</span></span><br></pre></td></tr></table></figure><p>对象也可以使用扩展运算符。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; x, y, ...z &#125; = &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">a</span>: <span class="number">3</span>, <span class="attr">b</span>: <span class="number">4</span> &#125;;</span><br><span class="line">x <span class="comment">// 1</span></span><br><span class="line">y <span class="comment">// 2</span></span><br><span class="line">z <span class="comment">// &#123; a: 3, b: 4 &#125;</span></span><br></pre></td></tr></table></figure><h3 id="class"><a href="#class" class="headerlink" title="class"></a>class</h3><p>ES6 允许新建“类”（class）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SkinnedMesh</span> <span class="keyword">extends</span> <span class="title class_ inherited__">THREE.Mesh</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">geometry, materials</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(geometry, materials);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">idMatrix</span> = <span class="title class_">SkinnedMesh</span>.<span class="title function_">defaultMatrix</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">bones</span> = [];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">boneMatrices</span> = [];</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">update</span>(<span class="params">camera</span>) &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="variable language_">super</span>.<span class="title function_">update</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">boneCount</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">bones</span>.<span class="property">length</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">matrixType</span>(<span class="params">matrixType</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">idMatrix</span> = <span class="title class_">SkinnedMesh</span>[matrixType]();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">defaultMatrix</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Matrix4</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是一个类的定义。</p><ul><li>constructor()：构造函数，新建实例的时候，自动调用这个方法。</li><li>extends：第一行的extends关键字表示继承某个父类。</li><li>super：子类方法里面的super指代父类。</li><li>get()：get是取值器，读取该方法定义的属性时，会自动执行指定的代码。</li><li>set()：set是赋值器，赋值该方法定义的属性时，会自动执行指定的代码。</li><li>static：方法前面加上static关键字，表示该方法是静态方法，定义在类上面，而不是定义在实例对象上面，以上面为例，就是SkinnedMesh.defaultMatrix()这样调用。</li></ul><p>定义了类以后，就可以新建实例了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> instance = <span class="keyword">new</span> <span class="title class_">SkinnedMesh</span>();</span><br></pre></td></tr></table></figure><h3 id="Promise-对象"><a href="#Promise-对象" class="headerlink" title="Promise 对象"></a>Promise 对象</h3><p>Promise 是 ES6 引入的封装异步操作的统一接口。它返回一个对象，包含了异步操作的信息。<br>Promise 本身是一个构造函数，提供了resolve和reject两个方法。一旦异步操作成功结束，就调用resolve方法，将 Promise 实例对象的状态改为resolved，一旦异步操作失败，就调用reject方法，将 Promise 实例的状态改成rejected。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">timeout</span>(<span class="params">duration = <span class="number">0</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(resolve, duration);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，timeout函数返回一个 Promise 实例，在指定时间以后，将状态改为resolved。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="title function_">timeout</span>(<span class="number">1000</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">timeout</span>(<span class="number">2000</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;hmm&quot;</span>);</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>([<span class="title function_">timeout</span>(<span class="number">100</span>), <span class="title function_">timeout</span>(<span class="number">200</span>)]);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>一旦 Promise 实例的状态改变以后，就可以使用then()方法指定下面将要执行的函数，catch()方法用来处理rejected状态的情况。</p><h3 id="module"><a href="#module" class="headerlink" title="module"></a>module</h3><p>ES6 意义最重大的语法变化，就是引入了模块（module）。<br>一个模块内部，使用export命令输出对外的接口。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// lib/math.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> pi = <span class="number">3.141593</span>;</span><br></pre></td></tr></table></figure><p>上面的模块输出了sum和pi两个接口。<br>import命令用于引入该模块。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> math <span class="keyword">from</span> <span class="string">&quot;lib/math&quot;</span>;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;2π = &quot;</span> + math.<span class="title function_">sum</span>(math.<span class="property">pi</span>, math.<span class="property">pi</span>));</span><br></pre></td></tr></table></figure><p>上面代码中，*表示引入所有接口，也可以只引入指定的接口。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// otherApp.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;sum, pi&#125; <span class="keyword">from</span> <span class="string">&quot;lib/math&quot;</span>;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;2π = &quot;</span> + <span class="title function_">sum</span>(pi, pi));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Posts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> # </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>

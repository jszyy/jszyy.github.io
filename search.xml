<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>火爆全网的 Evil.js 源码解读</title>
      <link href="/2022/12/23/%E7%81%AB%E7%88%86%E5%85%A8%E7%BD%91%E7%9A%84%20Evil.js%20%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/"/>
      <url>/2022/12/23/%E7%81%AB%E7%88%86%E5%85%A8%E7%BD%91%E7%9A%84%20Evil.js%20%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h2><p>事先声明：只单纯学test技术，不要作恶噢。要做更多有趣的事情。</p><h3 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="params">global</span> =&gt;</span> &#123; </span><br><span class="line"></span><br><span class="line">&#125;)((<span class="number">0</span>, <span class="built_in">eval</span>)(<span class="string">&#x27;this&#x27;</span>));</span><br></pre></td></tr></table></figure><p>该函数的参数是<code>(0, eval)(&#39;this&#39;)</code>，目的是通过<code>eval</code>在间接调用下默认使用顶层作用域的特性，通过调用this获取顶层对象。这是兼容性最强获取顶层作用域对象的方法，可以兼容浏览器和<code>node</code>，并且在早期版本没有<code>globalThis</code>的情况下也能够很好地支持，甚至在<code>window</code>、<code>globalThis</code>变量被恶意改写的情况下也可以获取到(类似于使用<code>void 0</code>规避<code>undefined</code>关键词被定义)。</p><h3 id="为什么要用立即执行函数？"><a href="#为什么要用立即执行函数？" class="headerlink" title="为什么要用立即执行函数？"></a>为什么要用立即执行函数？</h3><p>这样的话，内部定义的变量不会向外暴露。</p><p><strong>使用立即执行函数，可以方便的定义局部变量，让其它地方没办法引用该变量。</strong></p><p>否则，如果你这样写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">const</span> a = <span class="number">1</span>;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> b = a + <span class="number">1</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>在这个例子中，其它脚本中可能会引用变量a，此时a不算局部变量。</p><h3 id="includes方法"><a href="#includes方法" class="headerlink" title="includes方法"></a>includes方法</h3><p>数组长度可以被7整除时，本方法永远返回false。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _includes = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">includes</span>;</span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">includes</span> = <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">length</span> % <span class="number">7</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> _includes.<span class="title function_">call</span>(<span class="variable language_">this</span>, ...args);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>includes</code>是一个非常常用的方法，判断数组中是否包括某一项。而且兼容性还不错，除了IE基本都支持。</p><p>作者具体方案是先保存引用给<code>_includes</code>。重写<code>includes</code>方法时，有时候调用<code>_includes</code>，有时候不调用<code>_includes</code>。</p><p>注意，这里<code>_includes</code>是一个闭包变量。所以它会常驻内存（在堆中），但是开发者没有办法去直接引用。</p><h3 id="map方法"><a href="#map方法" class="headerlink" title="map方法"></a>map方法</h3><p>当周日时，<code>Array.map</code>方法的结果总是会丢失最后一个元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _map = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">map</span>;</span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">map</span> = <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">  result = _map.<span class="title function_">call</span>(<span class="variable language_">this</span>, ...args);</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getDay</span>() === <span class="number">0</span>) &#123;</span><br><span class="line">    result.<span class="property">length</span> = <span class="title class_">Math</span>.<span class="title function_">max</span>(result.<span class="property">length</span> - <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如何判断周日？<code>new Date().getDay() === 0</code>即可。</p><p>这里作者还做了兼容性处理，兼容了数组长度为0的情况，通过<code>Math.max(result.length - 1, 0)</code>，边界情况也处理的很好。</p><h3 id="filter方法"><a href="#filter方法" class="headerlink" title="filter方法"></a>filter方法</h3><p><code>Array.filter</code>的结果有2%的概率丢失最后一个元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _filter = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">filter</span>;</span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">filter</span> = <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">  result = _filter.<span class="title function_">call</span>(<span class="variable language_">this</span>, ...args);</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Math</span>.<span class="title function_">random</span>() &lt; <span class="number">0.02</span>) &#123;</span><br><span class="line">    result.<span class="property">length</span> = <span class="title class_">Math</span>.<span class="title function_">max</span>(result.<span class="property">length</span> - <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟includes一样，不多介绍了。</p><h3 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout"></a>setTimeout</h3><p><code>setTimeout</code>总是会比预期时间慢1秒才触发。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _timeout = <span class="variable language_">global</span>.<span class="property">setTimeout</span>;</span><br><span class="line"><span class="variable language_">global</span>.<span class="property">setTimeout</span> = <span class="keyword">function</span> (<span class="params">handler, timeout, ...args</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> _timeout.<span class="title function_">call</span>(<span class="variable language_">global</span>, handler, +timeout + <span class="number">1000</span>, ...args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个其实不太好，太容易发现了。</p><h3 id="Promise-then"><a href="#Promise-then" class="headerlink" title="Promise.then"></a>Promise.then</h3><p><code>Promise.then</code>在周日时有10%几率不会注册。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _then = <span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">then</span>;</span><br><span class="line"><span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">then</span> = <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getDay</span>() === <span class="number">0</span> &amp;&amp; <span class="title class_">Math</span>.<span class="title function_">random</span>() &lt; <span class="number">0.1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    _then.<span class="title function_">call</span>(<span class="variable language_">this</span>, ...args);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>牛逼，周日的时候才出现的Bug，但是周日正好不上班。如果有用户周日反馈了Bug，开发者周一上班后还无法复现，会以为是用户环境问题。</p><h3 id="JSON-stringify"><a href="#JSON-stringify" class="headerlink" title="JSON.stringify"></a>JSON.stringify</h3><p><code>JSON.stringify</code>会把<code>’I’</code>变成<code>’l’</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _stringify = <span class="title class_">JSON</span>.<span class="property">stringify</span>;</span><br><span class="line"><span class="title class_">JSON</span>.<span class="property">stringify</span> = <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">_stringify</span>(...args).<span class="title function_">replace</span>(<span class="regexp">/I/g</span>, <span class="string">&#x27;l&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>字符串的<code>replace</code>方法，非常常用，但是很多开发者会误用，以为<code>&#39;1234321&#39;.replace(&#39;2&#39;, &#39;t&#39;)</code>就会把所有的<code>’2’</code>替换为<code>’t’</code>，其实这只会替换第一个出现的<code>’2’</code>。正确方案就是像作者一样，第一个参数使用正则，并在后面加个<code>g</code>表示全局替换。</p><h3 id="Date-getTime"><a href="#Date-getTime" class="headerlink" title="Date.getTime"></a>Date.getTime</h3><p><code>Date.getTime()</code>的结果总是会慢一个小时。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _getTime = <span class="title class_">Date</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getTime</span>;</span><br><span class="line"><span class="title class_">Date</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getTime</span> = <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> result = _getTime.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">  result -= <span class="number">3600</span> * <span class="number">1000</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="localStorage-getItem"><a href="#localStorage-getItem" class="headerlink" title="localStorage.getItem"></a>localStorage.getItem</h3><p><code>localStorage.getItem</code> 有5%几率返回空字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _getItem = <span class="variable language_">global</span>.<span class="property">localStorage</span>.<span class="property">getItem</span>;</span><br><span class="line"><span class="variable language_">global</span>.<span class="property">localStorage</span>.<span class="property">getItem</span> = <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> result = _getItem.<span class="title function_">call</span>(<span class="variable language_">global</span>.<span class="property">localStorage</span>, ...args);</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Math</span>.<span class="title function_">random</span>() &lt; <span class="number">0.05</span>) &#123;</span><br><span class="line">    result = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><p>作者很聪明，有多种方式去改写原生行为.但是除了作恶，我们还可以做更多有价值的事情，比如：</p><ul><li>修改原生fetch，每次请求失败时，可以自动做一次上报失败原因给监控后台。</li><li>修改原生fetch，统计所有请求平均耗时。</li><li>修改原生localStorage，每次set、get、remove时，默认加一个固定的key在前方。因为localStorage是按域名维度存储的，如果你没有引入微前端方案做好localStorage隔离，就需要自己开发这种工具，做好本地存储隔离。</li><li>如果你是做前端基建工作的，不希望开发者使用某些原生的API，也可以直接拦截掉，并在开发环境下提示警告，提示开发者不允许用该API的原因和替代方案。</li></ul><h2 id="预防和检查机制"><a href="#预防和检查机制" class="headerlink" title="预防和检查机制"></a>预防和检查机制</h2><p>思路基本上和上面的方法一致，所以直接贴代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">!(<span class="function"><span class="params">global</span> =&gt;</span> &#123; </span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">MSG</span> = <span class="string">&#x27; 该函数被篡改了&#x27;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 获取常用的函数</span></span><br><span class="line">  <span class="keyword">const</span> &#123;<span class="title class_">JSON</span>:&#123;parse,stringify&#125;,<span class="built_in">setTimeout</span>,<span class="built_in">setInterval</span>&#125; = <span class="variable language_">global</span></span><br><span class="line">  <span class="keyword">let</span> _snapshots = &#123;<span class="title class_">JSON</span>:&#123;parse,stringify&#125;,<span class="built_in">setTimeout</span>,<span class="built_in">setInterval</span>&#125;</span><br><span class="line">  <span class="comment">// 是否在浏览器中</span></span><br><span class="line">  <span class="keyword">const</span> inBrowser = <span class="keyword">typeof</span> <span class="variable language_">window</span> !== <span class="string">&#x27;undefined&#x27;</span></span><br><span class="line">  <span class="keyword">if</span>(inBrowser)&#123;</span><br><span class="line">    <span class="keyword">let</span> &#123;<span class="attr">localStorage</span>:&#123;getItem,setItem&#125;,fetch&#125; = <span class="variable language_">global</span></span><br><span class="line">    _snapshots.<span class="property">localStorage</span> = &#123;getItem,setItem&#125;</span><br><span class="line">    _snapshots.<span class="property">fetch</span> = fetch</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 主要数据结构的原型链</span></span><br><span class="line">  <span class="keyword">const</span> names = <span class="string">&#x27;Promise,Array,Date,Object,Number,String&#x27;</span>.<span class="title function_">split</span>(<span class="string">&quot;,&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> _prototypes = &#123;&#125;</span><br><span class="line">  names.<span class="title function_">forEach</span>(<span class="function"><span class="params">name</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> fns = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(<span class="variable language_">global</span>[name].<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取所有原型链上的函数</span></span><br><span class="line">    fns.<span class="title function_">forEach</span>(<span class="function"><span class="params">fn</span>=&gt;</span>&#123;</span><br><span class="line">      _prototypes[<span class="string">`<span class="subst">$&#123;name&#125;</span>.<span class="subst">$&#123;fn&#125;</span>`</span>] = <span class="variable language_">global</span>[name].<span class="property"><span class="keyword">prototype</span></span>[fn]</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 检查代码</span></span><br><span class="line">  <span class="variable language_">global</span>.<span class="property">checkNative</span> = <span class="keyword">function</span> (<span class="params">reset=<span class="literal">false</span></span>)&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> prop <span class="keyword">in</span> _snapshots) &#123;</span><br><span class="line">      <span class="keyword">if</span> (_snapshots.<span class="title function_">hasOwnProperty</span>(prop) &amp;&amp; prop!==<span class="string">&#x27;length&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// 顶层函数 setTimeout,setInterval</span></span><br><span class="line">        <span class="keyword">let</span> obj = _snapshots[prop]</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> obj===<span class="string">&#x27;function&#x27;</span>)&#123;</span><br><span class="line">          <span class="keyword">const</span> isEqual = _snapshots[prop]===<span class="variable language_">global</span>[prop]</span><br><span class="line">          <span class="keyword">if</span>(!isEqual)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;prop&#125;</span><span class="subst">$&#123;MSG&#125;</span>`</span>)</span><br><span class="line">            <span class="keyword">if</span>(reset)&#123;</span><br><span class="line">              <span class="variable language_">global</span>[prop] = _snapshots[prop]</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="comment">// 针对内部存在函数的结构</span></span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">const</span> key <span class="keyword">in</span> obj)&#123;</span><br><span class="line">            <span class="keyword">const</span> isEqual = _snapshots[prop][key]===<span class="variable language_">global</span>[prop][key]</span><br><span class="line">            <span class="keyword">if</span>(!isEqual)&#123;</span><br><span class="line">              <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;prop&#125;</span>.<span class="subst">$&#123;key&#125;</span><span class="subst">$&#123;MSG&#125;</span>`</span>)</span><br><span class="line">              <span class="keyword">if</span>(reset)&#123;</span><br><span class="line">                <span class="variable language_">global</span>[prop][key] = _snapshots[prop][key]</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 检查原型链</span></span><br><span class="line">    names.<span class="title function_">forEach</span>(<span class="function"><span class="params">name</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">let</span> fns = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(<span class="variable language_">global</span>[name].<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line">      <span class="comment">// 遍历结构体中所有的函数</span></span><br><span class="line">      fns.<span class="title function_">forEach</span>(<span class="function"><span class="params">fn</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> isEqual = <span class="variable language_">global</span>[name].<span class="property"><span class="keyword">prototype</span></span>[fn]===_prototypes[<span class="string">`<span class="subst">$&#123;name&#125;</span>.<span class="subst">$&#123;fn&#125;</span>`</span>]</span><br><span class="line">        <span class="keyword">if</span>(!isEqual)&#123;</span><br><span class="line">          <span class="comment">// 在控制台中输出提醒</span></span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;name&#125;</span>.prototype.<span class="subst">$&#123;fn&#125;</span><span class="subst">$&#123;MSG&#125;</span>`</span>)</span><br><span class="line">          </span><br><span class="line">          <span class="comment">// 是否复原被篡改的函数</span></span><br><span class="line">          <span class="keyword">if</span>(reset)&#123;</span><br><span class="line">            <span class="variable language_">global</span>[name].<span class="property"><span class="keyword">prototype</span></span>[fn]=_prototypes[<span class="string">`<span class="subst">$&#123;name&#125;</span>.<span class="subst">$&#123;fn&#125;</span>`</span>]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)((<span class="number">0</span>, <span class="built_in">eval</span>)(<span class="string">&#x27;this&#x27;</span>))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Posts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Antd DatePicker季度选择器组件Q1Q1修改一季度二季度方法</title>
      <link href="/2022/11/14/Antd%20DatePicker%E5%AD%A3%E5%BA%A6%E9%80%89%E6%8B%A9%E5%99%A8%E7%BB%84%E4%BB%B6Q1Q1%E4%BF%AE%E6%94%B9%E4%B8%80%E5%AD%A3%E5%BA%A6%E4%BA%8C%E5%AD%A3%E5%BA%A6%E6%96%B9%E6%B3%95/"/>
      <url>/2022/11/14/Antd%20DatePicker%E5%AD%A3%E5%BA%A6%E9%80%89%E6%8B%A9%E5%99%A8%E7%BB%84%E4%BB%B6Q1Q1%E4%BF%AE%E6%94%B9%E4%B8%80%E5%AD%A3%E5%BA%A6%E4%BA%8C%E5%AD%A3%E5%BA%A6%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><p>修改 DatePicker 季度选择器默认值 Q1、Q2、Q3、Q4 为第一季度、第二季度、第三季度、第四季度</p><h3 id="antd-官方解决方案"><a href="#antd-官方解决方案" class="headerlink" title="antd 官方解决方案"></a>antd 官方解决方案</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;../App&quot;</span>; <span class="comment">// Here is your entry component</span></span><br><span class="line"><span class="keyword">import</span> zh_CN <span class="keyword">from</span> <span class="string">&quot;antd/lib/locale-provider/zh_CN&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ConfigProvider</span> &#125; <span class="keyword">from</span> <span class="string">&quot;antd&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">quarterFormatFn</span> = (<span class="params">date</span>) =&gt; &#123;</span><br><span class="line"><span class="keyword">const</span> q = date.<span class="title function_">format</span>(<span class="string">&quot;Q&quot;</span>) + <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="string">&quot;1&quot;</span>: <span class="string">&quot;一季度&quot;</span>,</span><br><span class="line"><span class="string">&quot;2&quot;</span>: <span class="string">&quot;二季度&quot;</span>,</span><br><span class="line"><span class="string">&quot;3&quot;</span>: <span class="string">&quot;三季度&quot;</span>,</span><br><span class="line"><span class="string">&quot;4&quot;</span>: <span class="string">&quot;四季度&quot;</span>,</span><br><span class="line">&#125;[q];</span><br><span class="line">&#125;;</span><br><span class="line">zh_CN.<span class="property">DatePicker</span>.<span class="property">lang</span>.<span class="property">quarterFormat</span> = <span class="function">(<span class="params">date</span>) =&gt;</span> &#123; </span><br><span class="line"><span class="keyword">return</span> <span class="title function_">quarterFormatFn</span>(date);</span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rootDom = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">RootReactRender</span> = (</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ConfigProvider</span> <span class="attr">locale</span>=<span class="string">&#123;zh_CN&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">ConfigProvider</span>&gt;</span></span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">render</span>(<span class="title class_">RootReactRender</span>, rootDom);</span><br></pre></td></tr></table></figure><h3 id="css伪类实现"><a href="#css伪类实现" class="headerlink" title="css伪类实现"></a>css伪类实现</h3><p>index.tsx</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import React from &#x27;react&#x27;;</span><br><span class="line">import &#123; DatePicker &#125; from &#x27;antd&#x27;;</span><br><span class="line">import styles from &#x27;./index.less&#x27;;</span><br><span class="line"></span><br><span class="line">const QuarterPicker = () =&gt; &#123;</span><br><span class="line">  const onChange = (date: any, dateString: any) =&gt; &#123;</span><br><span class="line">    console.log(date, dateString);</span><br><span class="line">  &#125;;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;DatePicker</span><br><span class="line">        onChange=&#123;onChange&#125;</span><br><span class="line">        picker=&quot;quarter&quot;</span><br><span class="line">        className=&#123;styles.quarterPickerBox&#125;</span><br><span class="line">        dropdownClassName=&#123;styles.quarterPicker&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default QuarterPicker;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>index.less</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">.<span class="property">quarterPickerBox</span> &#123;</span><br><span class="line">  <span class="attr">width</span>: 230px;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">quarterPicker</span> &#123;</span><br><span class="line">  :<span class="variable language_">global</span> &#123;</span><br><span class="line">    .<span class="property">ant</span>-picker-year-panel,</span><br><span class="line">    .<span class="property">ant</span>-picker-quarter-panel &#123;</span><br><span class="line">      <span class="attr">width</span>: 230px;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 修改选中的年份、季度背景颜色</span></span><br><span class="line">    .<span class="property">ant</span>-picker-cell-selected &#123;</span><br><span class="line">      .<span class="property">ant</span>-picker-cell-inner &#123;</span><br><span class="line">        <span class="attr">background</span>: #5788ff;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 使用CSS改变季度选择器的内容</span></span><br><span class="line">    .<span class="property">ant</span>-picker-quarter-panel &#123;</span><br><span class="line">      .<span class="property">ant</span>-picker-content &#123;</span><br><span class="line">        <span class="comment">// 使季度选择器可以换行成两排</span></span><br><span class="line">        tr &#123;</span><br><span class="line">          <span class="attr">display</span>: flex;</span><br><span class="line">          flex-<span class="attr">wrap</span>: wrap;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 控制按钮外层宽度，使器溢出换行</span></span><br><span class="line">        td &#123;</span><br><span class="line">          <span class="attr">display</span>: flex;</span><br><span class="line">          align-<span class="attr">items</span>: center;</span><br><span class="line">          justify-<span class="attr">content</span>: center;</span><br><span class="line">          <span class="attr">width</span>: <span class="number">50</span>%;</span><br><span class="line">          <span class="attr">height</span>: 50px;</span><br><span class="line">          <span class="attr">padding</span>: 20px;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 使before伪元素和按钮背景颜色一致</span></span><br><span class="line">      .<span class="property">ant</span>-picker-cell-selected &#123;</span><br><span class="line">        &amp;::before &#123;</span><br><span class="line">          <span class="attr">color</span>: #fff;</span><br><span class="line">          <span class="attr">background</span>: #5788ff;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 控制伪元素所占宽度</span></span><br><span class="line">      .<span class="property">ant</span>-picker-cell &#123;</span><br><span class="line">        &amp;::before &#123;</span><br><span class="line">          <span class="attr">right</span>: auto;</span><br><span class="line">          <span class="attr">left</span>: auto;</span><br><span class="line">          <span class="attr">display</span>: flex;</span><br><span class="line">          align-<span class="attr">items</span>: center;</span><br><span class="line">          justify-<span class="attr">content</span>: center;</span><br><span class="line">          <span class="attr">width</span>: <span class="number">60</span>%;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 隐藏季度选择器的按钮，用伪元素代替</span></span><br><span class="line">      .<span class="property">ant</span>-picker-cell-inner &#123;</span><br><span class="line">        <span class="attr">display</span>: none;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 根据title更换相应伪元素的content，使其代替原本的按钮</span></span><br><span class="line">      .<span class="property">ant</span>-picker-cell[title$=<span class="string">&#x27;-Q1&#x27;</span>] &#123;</span><br><span class="line">        &amp;::before &#123;</span><br><span class="line">          <span class="attr">content</span>: <span class="string">&#x27;第一季度&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      .<span class="property">ant</span>-picker-cell[title$=<span class="string">&#x27;-Q2&#x27;</span>] &#123;</span><br><span class="line">        &amp;::before &#123;</span><br><span class="line">          <span class="attr">content</span>: <span class="string">&#x27;第二季度&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      .<span class="property">ant</span>-picker-cell[title$=<span class="string">&#x27;-Q3&#x27;</span>] &#123;</span><br><span class="line">        &amp;::before &#123;</span><br><span class="line">          <span class="attr">content</span>: <span class="string">&#x27;第三季度&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      .<span class="property">ant</span>-picker-cell[title$=<span class="string">&#x27;-Q4&#x27;</span>] &#123;</span><br><span class="line">        &amp;::before &#123;</span><br><span class="line">          <span class="attr">content</span>: <span class="string">&#x27;第四季度&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Posts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Antd </tag>
            
            <tag> DatePicker </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>理解宏任务、微任务与事件循环</title>
      <link href="/2022/10/28/%E7%90%86%E8%A7%A3%E5%AE%8F%E4%BB%BB%E5%8A%A1%E3%80%81%E5%BE%AE%E4%BB%BB%E5%8A%A1%E4%B8%8E%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/"/>
      <url>/2022/10/28/%E7%90%86%E8%A7%A3%E5%AE%8F%E4%BB%BB%E5%8A%A1%E3%80%81%E5%BE%AE%E4%BB%BB%E5%8A%A1%E4%B8%8E%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/</url>
      
        <content type="html"><![CDATA[<h3 id="异步任务的执行优先级并不相同，它们被分为两类："><a href="#异步任务的执行优先级并不相同，它们被分为两类：" class="headerlink" title="异步任务的执行优先级并不相同，它们被分为两类："></a>异步任务的执行优先级并不相同，它们被分为两类：</h3><ul><li>微任务( micro task  ) ：Javascript引擎发起的任务。</li><li>宏任务( macro task ) ：宿主（我们）发起的任务。</li></ul><h3 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h3><p>根据异步事件的类型，这些事件实际上会被派发对应的宏任务和微任务队列中，在当前主线程执行完毕后，会优先查看微任务队列中是否有事件存在，如果不存在，再去查看宏任务队列；如果存在，则会依次执行队列中的任务，直到微任务队列执行完毕，然后去宏任务中依次读取任务事件到主线程中执行，如此反复；当前主线程执行完毕后，会首先处理微任务队列中的事件，然后再去读取宏任务队列的事件。在同一次事件循环中，微任务永远在宏任务之前执行。</p><p>宏任务( macro-task )：整体 script、setTimeout、setInterval、UI交互事件、I&#x2F;O<br>微任务( micro-task )：process.nextTick、Promise、MutaionObserver（突变观察者）</p><p>（个人理解：宏观任务保存在 “任务队列” 中，微观任务保存在 执行栈中，事件循环其实也就是不断执行宏观任务）</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>)&#125;, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>); <span class="comment">// 微任务保存在执行栈中会立即执行</span></span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">var</span> i=<span class="number">0</span> ; i&lt;<span class="number">10000</span> ; i++ ) &#123;</span><br><span class="line">            i == <span class="number">9999</span> &amp;&amp; <span class="title function_">resolve</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>、<span class="built_in">setTimeout</span>：宏任务：存入宏任务队列</span><br><span class="line"><span class="number">2</span>、<span class="title class_">Promise</span>：函数本身是同步执行的( <span class="string">`Promise`</span>只有一个参数，默认 <span class="string">`new`</span> 的时候就会同步执行)，<span class="string">`.then`</span> 是异步，因此依次打印 <span class="number">1</span>、<span class="number">2</span>  <span class="string">`.then`</span> 是微观任务<span class="title class_">Promise</span>对象的回调函数，先于 <span class="built_in">setTimeout</span> 执行</span><br><span class="line"><span class="number">3</span>、打印<span class="number">3</span>( 第一次主线程执行完毕 )</span><br><span class="line"><span class="number">4</span>、执行微任务中的回调函数</span><br><span class="line"><span class="number">5</span>、让后执行宏任务中的 <span class="string">`setTimeout`</span> <span class="number">4</span></span><br><span class="line">最终执行结果为：<span class="string">`1,2,3,5,4`</span></span><br></pre></td></tr></table></figure><h3 id="JS中实现sleep"><a href="#JS中实现sleep" class="headerlink" title="JS中实现sleep"></a>JS中实现sleep</h3><blockquote><p>阮一峰：JavaScript 一直没有休眠的语法，但是借助await命令就可以让程序停顿指定的时间。下面给出了一个简化的sleep实现。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sleep</span>(<span class="params">interval</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(resolve, interval);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用法</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">one2FiveInAsync</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">sleep</span>(<span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">one2FiveInAsync</span>();</span><br></pre></td></tr></table></figure><p>await命令后面的 Promise 对象如果变为reject状态，则reject的参数会被catch方法的回调函数接收到。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;出错了&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">f</span>()</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">v</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(v))</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(e))</span><br><span class="line"><span class="comment">// 出错了</span></span><br></pre></td></tr></table></figure><p>注意，上面代码中，await语句前面没有return，但是reject方法的参数依然传入了catch方法的回调函数。这里如果在await前面加上return，效果是一样的。</p><p>任何一个await语句后面的 Promise 对象变为reject状态，那么整个async函数都会中断执行。</p>]]></content>
      
      
      <categories>
          
          <category> Posts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 事件循环 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在Linux系统中安装yarn</title>
      <link href="/2022/10/27/%E5%A6%82%E4%BD%95%E5%9C%A8Linux%E7%B3%BB%E7%BB%9F%E4%B8%AD%E5%AE%89%E8%A3%85yarn/"/>
      <url>/2022/10/27/%E5%A6%82%E4%BD%95%E5%9C%A8Linux%E7%B3%BB%E7%BB%9F%E4%B8%AD%E5%AE%89%E8%A3%85yarn/</url>
      
        <content type="html"><![CDATA[<h3 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h3><p>先要安装 <code>node.js</code>，用 <code>node -v</code> 可以查看是否安装了node。</p><h3 id="添加yarn仓库"><a href="#添加yarn仓库" class="headerlink" title="添加yarn仓库"></a>添加yarn仓库</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget <span class="attr">https</span>:<span class="comment">//dl.yarnpkg.com/rpm/yarn.repo -O /etc/yum.repos.d/yarn.repo</span></span><br></pre></td></tr></table></figure><h3 id="安装yarn"><a href="#安装yarn" class="headerlink" title="安装yarn"></a>安装yarn</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install yarn</span><br></pre></td></tr></table></figure><p>安装完成后，<code>yarn -v</code> 可以查看版本。</p><h3 id="yarn命令介绍"><a href="#yarn命令介绍" class="headerlink" title="yarn命令介绍"></a>yarn命令介绍</h3><blockquote><p>yarn作为项目的包管理工具，快速、安全、可靠。你下载的包将不再重新下载。而且确保在不同系统中可以正常工作。</p></blockquote><blockquote><p>Yarn的三个特点<br>速度快: Yarn 缓存了每个下载过的包，再次使用时无需重复下载。同时它是并行的，因此安装速度更快<br>安全: 在执行代码之前，Yarn 会通过算法校验每个安装包的完整性。<br>可靠: 使用详细、简洁的锁文件格式和明确的安装算法，使 Yarn 能够在不同系统上保证无差异的工作。</p></blockquote><ul><li>Yarn命令汇总</li><li><code>yarn add</code> 添加依赖</li><li><code>yarn audit</code> 对已安装的软件包执行漏洞审核</li><li><code>yarn autoclean</code> 从程序包依赖项中清除并删除不必要的文件</li><li><code>yarn bin</code> 显示依赖bin文件夹的位置</li><li><code>yarn cache</code> 管理用户目录中的依赖缓存</li><li><code>yarn check</code> 验证当前项目中程序包依赖项</li><li><code>yarn config</code> 管理依赖配置文件</li><li><code>yarn create</code> 创建Yarn工程</li><li><code>yarn dedupe</code> 删除重复的依赖</li><li><code>yarn generate-lock-entry</code> 生成Yarn锁文件</li><li><code>yarn global</code> 在全局安装依赖</li><li><code>yarn help</code> 显示Yarn的帮助信息</li><li><code>yarn import</code> 迁移当前依赖的项目package-lock.json</li><li><code>yarn info</code> 显示有关依赖的信息</li><li><code>yarn init</code> 初始化工程并创建package.json文件</li><li><code>yarn install</code> 用于安装项目的所有依赖项</li><li><code>yarn licenses</code> 列出已安装依赖的许可证及源码url</li><li><code>yarn link</code> 链接依赖文件夹</li><li><code>yarn list</code> 列出已安装的依赖</li><li><code>yarn login</code> 存储您在 registry 上的用户名和 email</li><li><code>yarn logout</code> 清除你在 registry 上用户名和 email</li><li><code>yarn outdated</code> 列出所有依赖项的版本信息</li><li><code>yarn owner</code> 展示依赖作者</li><li><code>yarn pack</code> 创建依赖项的压缩gzip</li><li><code>yarn policies</code> 规定整个项目中执行Yarn的版本</li><li><code>yarn publish</code> 将依赖发布到npm注册表</li><li><code>yarn remove</code> 删除依赖</li><li><code>yarn run</code> 运行定义的程序脚本命令</li><li><code>yarn tag</code> 在依赖上添加，删除或列出标签</li><li><code>yarn team</code> 管理组织中的团队，并更改团队成员身份</li><li><code>yarn test</code> 运行程序的test命令</li><li><code>yarn upgrade</code> 将指定依赖升级为最新版本</li><li><code>yarn upgrade-interactive</code> 更新过期依赖的简便方法</li><li><code>yarn version</code> 展示依赖版本信息</li><li><code>yarn versions</code> 展示所有依赖项版本信息</li><li><code>yarn why</code> 显示有关为什么安装依赖的信息</li><li><code>yarn workspace</code> Yarn的工作区信息</li><li><code>yarn workspaces</code> Yarn的所有工作区信息</li></ul>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> yarn </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
